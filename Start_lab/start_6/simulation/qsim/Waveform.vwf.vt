// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/19/2023 19:28:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    start_6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module start_6_vlg_sample_tst(
	CLK_50,
	SW,
	sampler_tx
);
input  CLK_50;
input [9:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(CLK_50 or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module start_6_vlg_check_tst (
	RAOUT,
	ROMOUT,
	sampler_rx
);
input [6:0] RAOUT;
input [7:0] ROMOUT;
input sampler_rx;

reg [6:0] RAOUT_expected;
reg [7:0] ROMOUT_expected;

reg [6:0] RAOUT_prev;
reg [7:0] ROMOUT_prev;

reg [6:0] RAOUT_expected_prev;
reg [7:0] ROMOUT_expected_prev;

reg [6:0] last_RAOUT_exp;
reg [7:0] last_ROMOUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	RAOUT_prev = RAOUT;
	ROMOUT_prev = ROMOUT;
end

// update expected /o prevs

always @(trigger)
begin
	RAOUT_expected_prev = RAOUT_expected;
	ROMOUT_expected_prev = ROMOUT_expected;
end


// expected RAOUT[ 6 ]
initial
begin
	RAOUT_expected[6] = 1'bX;
	RAOUT_expected[6] = #999000 1'b0;
end 
// expected RAOUT[ 5 ]
initial
begin
	RAOUT_expected[5] = 1'bX;
	RAOUT_expected[5] = #999000 1'b0;
end 
// expected RAOUT[ 4 ]
initial
begin
	RAOUT_expected[4] = 1'bX;
	RAOUT_expected[4] = #999000 1'b0;
end 
// expected RAOUT[ 3 ]
initial
begin
	RAOUT_expected[3] = 1'bX;
	RAOUT_expected[3] = #999000 1'b0;
end 
// expected RAOUT[ 2 ]
initial
begin
	RAOUT_expected[2] = 1'bX;
	RAOUT_expected[2] = #999000 1'b0;
end 
// expected RAOUT[ 1 ]
initial
begin
	RAOUT_expected[1] = 1'bX;
	RAOUT_expected[1] = #999000 1'b0;
end 
// expected RAOUT[ 0 ]
initial
begin
	RAOUT_expected[0] = 1'bX;
	RAOUT_expected[0] = #999000 1'b0;
end 
// expected ROMOUT[ 7 ]
initial
begin
	ROMOUT_expected[7] = 1'bX;
	ROMOUT_expected[7] = #999000 1'b0;
end 
// expected ROMOUT[ 6 ]
initial
begin
	ROMOUT_expected[6] = 1'bX;
	ROMOUT_expected[6] = #999000 1'b0;
end 
// expected ROMOUT[ 5 ]
initial
begin
	ROMOUT_expected[5] = 1'bX;
	ROMOUT_expected[5] = #999000 1'b0;
end 
// expected ROMOUT[ 4 ]
initial
begin
	ROMOUT_expected[4] = 1'bX;
	ROMOUT_expected[4] = #999000 1'b0;
end 
// expected ROMOUT[ 3 ]
initial
begin
	ROMOUT_expected[3] = 1'bX;
	ROMOUT_expected[3] = #999000 1'b0;
end 
// expected ROMOUT[ 2 ]
initial
begin
	ROMOUT_expected[2] = 1'bX;
	ROMOUT_expected[2] = #999000 1'b0;
end 
// expected ROMOUT[ 1 ]
initial
begin
	ROMOUT_expected[1] = 1'bX;
	ROMOUT_expected[1] = #999000 1'b0;
end 
// expected ROMOUT[ 0 ]
initial
begin
	ROMOUT_expected[0] = 1'bX;
	ROMOUT_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(RAOUT_expected or RAOUT or ROMOUT_expected or ROMOUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected RAOUT = %b | expected ROMOUT = %b | ",RAOUT_expected_prev,ROMOUT_expected_prev);
	$display("| real RAOUT = %b | real ROMOUT = %b | ",RAOUT_prev,ROMOUT_prev);
`endif
	if (
		( RAOUT_expected_prev[0] !== 1'bx ) && ( RAOUT_prev[0] !== RAOUT_expected_prev[0] )
		&& ((RAOUT_expected_prev[0] !== last_RAOUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAOUT_expected_prev);
		$display ("     Real value = %b", RAOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RAOUT_exp[0] = RAOUT_expected_prev[0];
	end
	if (
		( RAOUT_expected_prev[1] !== 1'bx ) && ( RAOUT_prev[1] !== RAOUT_expected_prev[1] )
		&& ((RAOUT_expected_prev[1] !== last_RAOUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAOUT_expected_prev);
		$display ("     Real value = %b", RAOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RAOUT_exp[1] = RAOUT_expected_prev[1];
	end
	if (
		( RAOUT_expected_prev[2] !== 1'bx ) && ( RAOUT_prev[2] !== RAOUT_expected_prev[2] )
		&& ((RAOUT_expected_prev[2] !== last_RAOUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAOUT_expected_prev);
		$display ("     Real value = %b", RAOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RAOUT_exp[2] = RAOUT_expected_prev[2];
	end
	if (
		( RAOUT_expected_prev[3] !== 1'bx ) && ( RAOUT_prev[3] !== RAOUT_expected_prev[3] )
		&& ((RAOUT_expected_prev[3] !== last_RAOUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAOUT_expected_prev);
		$display ("     Real value = %b", RAOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RAOUT_exp[3] = RAOUT_expected_prev[3];
	end
	if (
		( RAOUT_expected_prev[4] !== 1'bx ) && ( RAOUT_prev[4] !== RAOUT_expected_prev[4] )
		&& ((RAOUT_expected_prev[4] !== last_RAOUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAOUT_expected_prev);
		$display ("     Real value = %b", RAOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RAOUT_exp[4] = RAOUT_expected_prev[4];
	end
	if (
		( RAOUT_expected_prev[5] !== 1'bx ) && ( RAOUT_prev[5] !== RAOUT_expected_prev[5] )
		&& ((RAOUT_expected_prev[5] !== last_RAOUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAOUT_expected_prev);
		$display ("     Real value = %b", RAOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RAOUT_exp[5] = RAOUT_expected_prev[5];
	end
	if (
		( RAOUT_expected_prev[6] !== 1'bx ) && ( RAOUT_prev[6] !== RAOUT_expected_prev[6] )
		&& ((RAOUT_expected_prev[6] !== last_RAOUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAOUT_expected_prev);
		$display ("     Real value = %b", RAOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RAOUT_exp[6] = RAOUT_expected_prev[6];
	end
	if (
		( ROMOUT_expected_prev[0] !== 1'bx ) && ( ROMOUT_prev[0] !== ROMOUT_expected_prev[0] )
		&& ((ROMOUT_expected_prev[0] !== last_ROMOUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROMOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROMOUT_expected_prev);
		$display ("     Real value = %b", ROMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ROMOUT_exp[0] = ROMOUT_expected_prev[0];
	end
	if (
		( ROMOUT_expected_prev[1] !== 1'bx ) && ( ROMOUT_prev[1] !== ROMOUT_expected_prev[1] )
		&& ((ROMOUT_expected_prev[1] !== last_ROMOUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROMOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROMOUT_expected_prev);
		$display ("     Real value = %b", ROMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ROMOUT_exp[1] = ROMOUT_expected_prev[1];
	end
	if (
		( ROMOUT_expected_prev[2] !== 1'bx ) && ( ROMOUT_prev[2] !== ROMOUT_expected_prev[2] )
		&& ((ROMOUT_expected_prev[2] !== last_ROMOUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROMOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROMOUT_expected_prev);
		$display ("     Real value = %b", ROMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ROMOUT_exp[2] = ROMOUT_expected_prev[2];
	end
	if (
		( ROMOUT_expected_prev[3] !== 1'bx ) && ( ROMOUT_prev[3] !== ROMOUT_expected_prev[3] )
		&& ((ROMOUT_expected_prev[3] !== last_ROMOUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROMOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROMOUT_expected_prev);
		$display ("     Real value = %b", ROMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ROMOUT_exp[3] = ROMOUT_expected_prev[3];
	end
	if (
		( ROMOUT_expected_prev[4] !== 1'bx ) && ( ROMOUT_prev[4] !== ROMOUT_expected_prev[4] )
		&& ((ROMOUT_expected_prev[4] !== last_ROMOUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROMOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROMOUT_expected_prev);
		$display ("     Real value = %b", ROMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ROMOUT_exp[4] = ROMOUT_expected_prev[4];
	end
	if (
		( ROMOUT_expected_prev[5] !== 1'bx ) && ( ROMOUT_prev[5] !== ROMOUT_expected_prev[5] )
		&& ((ROMOUT_expected_prev[5] !== last_ROMOUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROMOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROMOUT_expected_prev);
		$display ("     Real value = %b", ROMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ROMOUT_exp[5] = ROMOUT_expected_prev[5];
	end
	if (
		( ROMOUT_expected_prev[6] !== 1'bx ) && ( ROMOUT_prev[6] !== ROMOUT_expected_prev[6] )
		&& ((ROMOUT_expected_prev[6] !== last_ROMOUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROMOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROMOUT_expected_prev);
		$display ("     Real value = %b", ROMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ROMOUT_exp[6] = ROMOUT_expected_prev[6];
	end
	if (
		( ROMOUT_expected_prev[7] !== 1'bx ) && ( ROMOUT_prev[7] !== ROMOUT_expected_prev[7] )
		&& ((ROMOUT_expected_prev[7] !== last_ROMOUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROMOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROMOUT_expected_prev);
		$display ("     Real value = %b", ROMOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ROMOUT_exp[7] = ROMOUT_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module start_6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_50;
reg [9:0] SW;
// wires                                               
wire [6:0] RAOUT;
wire [7:0] ROMOUT;

wire sampler;                             

// assign statements (if any)                          
start_6 i1 (
// port map - connection between master ports and signals/registers   
	.CLK_50(CLK_50),
	.RAOUT(RAOUT),
	.ROMOUT(ROMOUT),
	.SW(SW)
);

// CLK_50
always
begin
	CLK_50 = 1'b0;
	CLK_50 = #100000 1'b1;
	#100000;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b0;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b0;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b1;
end 

start_6_vlg_sample_tst tb_sample (
	.CLK_50(CLK_50),
	.SW(SW),
	.sampler_tx(sampler)
);

start_6_vlg_check_tst tb_out(
	.RAOUT(RAOUT),
	.ROMOUT(ROMOUT),
	.sampler_rx(sampler)
);
endmodule

