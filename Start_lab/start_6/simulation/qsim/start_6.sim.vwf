/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 20000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("CLK_50")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("RAOUT")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("RAOUT[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "RAOUT";
}

SIGNAL("RAOUT[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "RAOUT";
}

SIGNAL("RAOUT[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "RAOUT";
}

SIGNAL("RAOUT[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "RAOUT";
}

SIGNAL("RAOUT[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "RAOUT";
}

SIGNAL("RAOUT[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "RAOUT";
}

SIGNAL("RAOUT[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "RAOUT";
}

SIGNAL("ROMOUT")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ROMOUT[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ROMOUT";
}

SIGNAL("ROMOUT[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ROMOUT";
}

SIGNAL("ROMOUT[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ROMOUT";
}

SIGNAL("ROMOUT[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ROMOUT";
}

SIGNAL("ROMOUT[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ROMOUT";
}

SIGNAL("ROMOUT[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ROMOUT";
}

SIGNAL("ROMOUT[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ROMOUT";
}

SIGNAL("ROMOUT[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ROMOUT";
}

SIGNAL("SW")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 10;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("SW[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

SIGNAL("SW[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "SW";
}

TRANSITION_LIST("CLK_50")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 100.0;
		}
	}
}

TRANSITION_LIST("RAOUT[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 12700.0;
			LEVEL 1 FOR 7300.0;
		}
	}
}

TRANSITION_LIST("RAOUT[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 6300.0;
			LEVEL 1 FOR 6400.0;
			LEVEL 0 FOR 6400.0;
			LEVEL 1 FOR 900.0;
		}
	}
}

TRANSITION_LIST("RAOUT[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 3100.0;
			LEVEL 1 FOR 3200.0;
			LEVEL 0 FOR 3200.0;
			LEVEL 1 FOR 3200.0;
			LEVEL 0 FOR 3200.0;
			LEVEL 1 FOR 3200.0;
			LEVEL 0 FOR 900.0;
		}
	}
}

TRANSITION_LIST("RAOUT[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 1500.0;
			LEVEL 1 FOR 1600.0;
			LEVEL 0 FOR 1600.0;
			LEVEL 1 FOR 1600.0;
			LEVEL 0 FOR 1600.0;
			LEVEL 1 FOR 1600.0;
			LEVEL 0 FOR 1600.0;
			LEVEL 1 FOR 1600.0;
			LEVEL 0 FOR 1600.0;
			LEVEL 1 FOR 1600.0;
			LEVEL 0 FOR 1600.0;
			LEVEL 1 FOR 1600.0;
			LEVEL 0 FOR 900.0;
		}
	}
}

TRANSITION_LIST("RAOUT[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 700.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 100.0;
		}
	}
}

TRANSITION_LIST("RAOUT[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 300.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 100.0;
		}
	}
}

TRANSITION_LIST("RAOUT[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 100.0;
		}
	}
}

TRANSITION_LIST("ROMOUT[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 13100.001;
			LEVEL 1 FOR 6899.999;
		}
	}
}

TRANSITION_LIST("ROMOUT[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2300.001;
			LEVEL 1 FOR 8600.0;
			LEVEL 0 FOR 2200.0;
			LEVEL 1 FOR 2000.0;
			LEVEL 0 FOR 4899.999;
		}
	}
}

TRANSITION_LIST("ROMOUT[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 1300.001;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1400.0;
			LEVEL 1 FOR 5800.0;
			LEVEL 0 FOR 1400.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1200.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1400.0;
			LEVEL 0 FOR 3499.999;
		}
	}
}

TRANSITION_LIST("ROMOUT[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 700.001;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 4200.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 2499.999;
		}
	}
}

TRANSITION_LIST("ROMOUT[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 500.001;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 2600.0;
			LEVEL 0 FOR 800.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 1899.999;
		}
	}
}

TRANSITION_LIST("ROMOUT[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 300.001;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 1800.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 1299.999;
		}
	}
}

TRANSITION_LIST("ROMOUT[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 300.001;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 1000.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 1200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 600.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 499.999;
		}
	}
}

TRANSITION_LIST("ROMOUT[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 2100.001;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 3800.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 600.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 99.999;
		}
	}
}

TRANSITION_LIST("SW[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 20000.0;
		}
	}
}

TRANSITION_LIST("SW[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 20000.0;
		}
	}
}

TRANSITION_LIST("SW[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 20000.0;
		}
	}
}

TRANSITION_LIST("SW[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 20000.0;
		}
	}
}

TRANSITION_LIST("SW[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 20000.0;
		}
	}
}

TRANSITION_LIST("SW[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 20000.0;
		}
	}
}

TRANSITION_LIST("SW[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 20000.0;
		}
	}
}

TRANSITION_LIST("SW[9]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 20000.0;
		}
	}
}

TRANSITION_LIST("SW[8]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 20000.0;
		}
	}
}

TRANSITION_LIST("SW[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 20000.0;
		}
	}
}

DISPLAY_LINE
{
	CHANNEL = "CLK_50";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "SW";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5, 6, 7, 8, 9, 10, 11;
}

DISPLAY_LINE
{
	CHANNEL = "SW[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "SW[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "SW[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "SW[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "SW[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "SW[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "SW[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "SW[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "SW[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "SW[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "RAOUT";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
	CHILDREN = 13, 14, 15, 16, 17, 18, 19;
}

DISPLAY_LINE
{
	CHANNEL = "RAOUT[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "RAOUT[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "RAOUT[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "RAOUT[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "RAOUT[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "RAOUT[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "RAOUT[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "ROMOUT";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
	CHILDREN = 21, 22, 23, 24, 25, 26, 27, 28;
}

DISPLAY_LINE
{
	CHANNEL = "ROMOUT[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "ROMOUT[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "ROMOUT[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "ROMOUT[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "ROMOUT[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "ROMOUT[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "ROMOUT[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "ROMOUT[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 20;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
