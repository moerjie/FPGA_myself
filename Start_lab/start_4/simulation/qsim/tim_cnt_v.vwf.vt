// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/15/2023 10:47:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TIM_CNT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TIM_CNT_vlg_sample_tst(
	CLK_50,
	CTRL_clear,
	CTRL_STOP,
	sampler_tx
);
input  CLK_50;
input  CTRL_clear;
input  CTRL_STOP;
output sampler_tx;

reg sample;
time current_time;
always @(CLK_50 or CTRL_clear or CTRL_STOP)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TIM_CNT_vlg_check_tst (
	CDOT,
	HEX_HIGH,
	HEX_LOW,
	high,
	low,
	OVERFLOW,
	sampler_rx
);
input  CDOT;
input [6:0] HEX_HIGH;
input [6:0] HEX_LOW;
input [3:0] high;
input [3:0] low;
input  OVERFLOW;
input sampler_rx;

reg  CDOT_expected;
reg [6:0] HEX_HIGH_expected;
reg [6:0] HEX_LOW_expected;
reg [3:0] high_expected;
reg [3:0] low_expected;
reg  OVERFLOW_expected;

reg  CDOT_prev;
reg [6:0] HEX_HIGH_prev;
reg [6:0] HEX_LOW_prev;
reg [3:0] high_prev;
reg [3:0] low_prev;
reg  OVERFLOW_prev;

reg  CDOT_expected_prev;
reg [6:0] HEX_HIGH_expected_prev;
reg [6:0] HEX_LOW_expected_prev;
reg [3:0] high_expected_prev;
reg [3:0] low_expected_prev;
reg  OVERFLOW_expected_prev;

reg  last_CDOT_exp;
reg [6:0] last_HEX_HIGH_exp;
reg [6:0] last_HEX_LOW_exp;
reg [3:0] last_high_exp;
reg [3:0] last_low_exp;
reg  last_OVERFLOW_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	CDOT_prev = CDOT;
	HEX_HIGH_prev = HEX_HIGH;
	HEX_LOW_prev = HEX_LOW;
	high_prev = high;
	low_prev = low;
	OVERFLOW_prev = OVERFLOW;
end

// update expected /o prevs

always @(trigger)
begin
	CDOT_expected_prev = CDOT_expected;
	HEX_HIGH_expected_prev = HEX_HIGH_expected;
	HEX_LOW_expected_prev = HEX_LOW_expected;
	high_expected_prev = high_expected;
	low_expected_prev = low_expected;
	OVERFLOW_expected_prev = OVERFLOW_expected;
end


// expected HEX_HIGH[ 6 ]
initial
begin
	HEX_HIGH_expected[6] = 1'bX;
	HEX_HIGH_expected[6] = #999000 1'b0;
end 
// expected HEX_HIGH[ 5 ]
initial
begin
	HEX_HIGH_expected[5] = 1'bX;
	HEX_HIGH_expected[5] = #999000 1'b0;
end 
// expected HEX_HIGH[ 4 ]
initial
begin
	HEX_HIGH_expected[4] = 1'bX;
	HEX_HIGH_expected[4] = #999000 1'b0;
end 
// expected HEX_HIGH[ 3 ]
initial
begin
	HEX_HIGH_expected[3] = 1'bX;
	HEX_HIGH_expected[3] = #999000 1'b0;
end 
// expected HEX_HIGH[ 2 ]
initial
begin
	HEX_HIGH_expected[2] = 1'bX;
	HEX_HIGH_expected[2] = #999000 1'b0;
end 
// expected HEX_HIGH[ 1 ]
initial
begin
	HEX_HIGH_expected[1] = 1'bX;
	HEX_HIGH_expected[1] = #999000 1'b0;
end 
// expected HEX_HIGH[ 0 ]
initial
begin
	HEX_HIGH_expected[0] = 1'bX;
	HEX_HIGH_expected[0] = #999000 1'b0;
end 

// expected CDOT
initial
begin
	CDOT_expected = 1'bX;
	CDOT_expected = #999000 1'b0;
end 
// expected HEX_LOW[ 6 ]
initial
begin
	HEX_LOW_expected[6] = 1'bX;
	HEX_LOW_expected[6] = #999000 1'b0;
end 
// expected HEX_LOW[ 5 ]
initial
begin
	HEX_LOW_expected[5] = 1'bX;
	HEX_LOW_expected[5] = #999000 1'b0;
end 
// expected HEX_LOW[ 4 ]
initial
begin
	HEX_LOW_expected[4] = 1'bX;
	HEX_LOW_expected[4] = #999000 1'b0;
end 
// expected HEX_LOW[ 3 ]
initial
begin
	HEX_LOW_expected[3] = 1'bX;
	HEX_LOW_expected[3] = #999000 1'b0;
end 
// expected HEX_LOW[ 2 ]
initial
begin
	HEX_LOW_expected[2] = 1'bX;
	HEX_LOW_expected[2] = #999000 1'b0;
end 
// expected HEX_LOW[ 1 ]
initial
begin
	HEX_LOW_expected[1] = 1'bX;
	HEX_LOW_expected[1] = #999000 1'b0;
end 
// expected HEX_LOW[ 0 ]
initial
begin
	HEX_LOW_expected[0] = 1'bX;
	HEX_LOW_expected[0] = #999000 1'b0;
end 

// expected OVERFLOW
initial
begin
	OVERFLOW_expected = 1'bX;
	OVERFLOW_expected = #999000 1'b0;
end 
// expected high[ 3 ]
initial
begin
	high_expected[3] = 1'bX;
end 
// expected high[ 2 ]
initial
begin
	high_expected[2] = 1'bX;
end 
// expected high[ 1 ]
initial
begin
	high_expected[1] = 1'bX;
end 
// expected high[ 0 ]
initial
begin
	high_expected[0] = 1'bX;
end 
// expected low[ 3 ]
initial
begin
	low_expected[3] = 1'bX;
end 
// expected low[ 2 ]
initial
begin
	low_expected[2] = 1'bX;
end 
// expected low[ 1 ]
initial
begin
	low_expected[1] = 1'bX;
end 
// expected low[ 0 ]
initial
begin
	low_expected[0] = 1'bX;
end 
// generate trigger
always @(CDOT_expected or CDOT or HEX_HIGH_expected or HEX_HIGH or HEX_LOW_expected or HEX_LOW or high_expected or high or low_expected or low or OVERFLOW_expected or OVERFLOW)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CDOT = %b | expected HEX_HIGH = %b | expected HEX_LOW = %b | expected high = %b | expected low = %b | expected OVERFLOW = %b | ",CDOT_expected_prev,HEX_HIGH_expected_prev,HEX_LOW_expected_prev,high_expected_prev,low_expected_prev,OVERFLOW_expected_prev);
	$display("| real CDOT = %b | real HEX_HIGH = %b | real HEX_LOW = %b | real high = %b | real low = %b | real OVERFLOW = %b | ",CDOT_prev,HEX_HIGH_prev,HEX_LOW_prev,high_prev,low_prev,OVERFLOW_prev);
`endif
	if (
		( CDOT_expected_prev !== 1'bx ) && ( CDOT_prev !== CDOT_expected_prev )
		&& ((CDOT_expected_prev !== last_CDOT_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CDOT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CDOT_expected_prev);
		$display ("     Real value = %b", CDOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CDOT_exp = CDOT_expected_prev;
	end
	if (
		( HEX_HIGH_expected_prev[0] !== 1'bx ) && ( HEX_HIGH_prev[0] !== HEX_HIGH_expected_prev[0] )
		&& ((HEX_HIGH_expected_prev[0] !== last_HEX_HIGH_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_HIGH[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_HIGH_expected_prev);
		$display ("     Real value = %b", HEX_HIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX_HIGH_exp[0] = HEX_HIGH_expected_prev[0];
	end
	if (
		( HEX_HIGH_expected_prev[1] !== 1'bx ) && ( HEX_HIGH_prev[1] !== HEX_HIGH_expected_prev[1] )
		&& ((HEX_HIGH_expected_prev[1] !== last_HEX_HIGH_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_HIGH[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_HIGH_expected_prev);
		$display ("     Real value = %b", HEX_HIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX_HIGH_exp[1] = HEX_HIGH_expected_prev[1];
	end
	if (
		( HEX_HIGH_expected_prev[2] !== 1'bx ) && ( HEX_HIGH_prev[2] !== HEX_HIGH_expected_prev[2] )
		&& ((HEX_HIGH_expected_prev[2] !== last_HEX_HIGH_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_HIGH[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_HIGH_expected_prev);
		$display ("     Real value = %b", HEX_HIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX_HIGH_exp[2] = HEX_HIGH_expected_prev[2];
	end
	if (
		( HEX_HIGH_expected_prev[3] !== 1'bx ) && ( HEX_HIGH_prev[3] !== HEX_HIGH_expected_prev[3] )
		&& ((HEX_HIGH_expected_prev[3] !== last_HEX_HIGH_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_HIGH[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_HIGH_expected_prev);
		$display ("     Real value = %b", HEX_HIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX_HIGH_exp[3] = HEX_HIGH_expected_prev[3];
	end
	if (
		( HEX_HIGH_expected_prev[4] !== 1'bx ) && ( HEX_HIGH_prev[4] !== HEX_HIGH_expected_prev[4] )
		&& ((HEX_HIGH_expected_prev[4] !== last_HEX_HIGH_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_HIGH[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_HIGH_expected_prev);
		$display ("     Real value = %b", HEX_HIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX_HIGH_exp[4] = HEX_HIGH_expected_prev[4];
	end
	if (
		( HEX_HIGH_expected_prev[5] !== 1'bx ) && ( HEX_HIGH_prev[5] !== HEX_HIGH_expected_prev[5] )
		&& ((HEX_HIGH_expected_prev[5] !== last_HEX_HIGH_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_HIGH[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_HIGH_expected_prev);
		$display ("     Real value = %b", HEX_HIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX_HIGH_exp[5] = HEX_HIGH_expected_prev[5];
	end
	if (
		( HEX_HIGH_expected_prev[6] !== 1'bx ) && ( HEX_HIGH_prev[6] !== HEX_HIGH_expected_prev[6] )
		&& ((HEX_HIGH_expected_prev[6] !== last_HEX_HIGH_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_HIGH[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_HIGH_expected_prev);
		$display ("     Real value = %b", HEX_HIGH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX_HIGH_exp[6] = HEX_HIGH_expected_prev[6];
	end
	if (
		( HEX_LOW_expected_prev[0] !== 1'bx ) && ( HEX_LOW_prev[0] !== HEX_LOW_expected_prev[0] )
		&& ((HEX_LOW_expected_prev[0] !== last_HEX_LOW_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_LOW[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_LOW_expected_prev);
		$display ("     Real value = %b", HEX_LOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX_LOW_exp[0] = HEX_LOW_expected_prev[0];
	end
	if (
		( HEX_LOW_expected_prev[1] !== 1'bx ) && ( HEX_LOW_prev[1] !== HEX_LOW_expected_prev[1] )
		&& ((HEX_LOW_expected_prev[1] !== last_HEX_LOW_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_LOW[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_LOW_expected_prev);
		$display ("     Real value = %b", HEX_LOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX_LOW_exp[1] = HEX_LOW_expected_prev[1];
	end
	if (
		( HEX_LOW_expected_prev[2] !== 1'bx ) && ( HEX_LOW_prev[2] !== HEX_LOW_expected_prev[2] )
		&& ((HEX_LOW_expected_prev[2] !== last_HEX_LOW_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_LOW[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_LOW_expected_prev);
		$display ("     Real value = %b", HEX_LOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX_LOW_exp[2] = HEX_LOW_expected_prev[2];
	end
	if (
		( HEX_LOW_expected_prev[3] !== 1'bx ) && ( HEX_LOW_prev[3] !== HEX_LOW_expected_prev[3] )
		&& ((HEX_LOW_expected_prev[3] !== last_HEX_LOW_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_LOW[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_LOW_expected_prev);
		$display ("     Real value = %b", HEX_LOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX_LOW_exp[3] = HEX_LOW_expected_prev[3];
	end
	if (
		( HEX_LOW_expected_prev[4] !== 1'bx ) && ( HEX_LOW_prev[4] !== HEX_LOW_expected_prev[4] )
		&& ((HEX_LOW_expected_prev[4] !== last_HEX_LOW_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_LOW[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_LOW_expected_prev);
		$display ("     Real value = %b", HEX_LOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX_LOW_exp[4] = HEX_LOW_expected_prev[4];
	end
	if (
		( HEX_LOW_expected_prev[5] !== 1'bx ) && ( HEX_LOW_prev[5] !== HEX_LOW_expected_prev[5] )
		&& ((HEX_LOW_expected_prev[5] !== last_HEX_LOW_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_LOW[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_LOW_expected_prev);
		$display ("     Real value = %b", HEX_LOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX_LOW_exp[5] = HEX_LOW_expected_prev[5];
	end
	if (
		( HEX_LOW_expected_prev[6] !== 1'bx ) && ( HEX_LOW_prev[6] !== HEX_LOW_expected_prev[6] )
		&& ((HEX_LOW_expected_prev[6] !== last_HEX_LOW_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX_LOW[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX_LOW_expected_prev);
		$display ("     Real value = %b", HEX_LOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX_LOW_exp[6] = HEX_LOW_expected_prev[6];
	end
	if (
		( high_expected_prev[0] !== 1'bx ) && ( high_prev[0] !== high_expected_prev[0] )
		&& ((high_expected_prev[0] !== last_high_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port high[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", high_expected_prev);
		$display ("     Real value = %b", high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_high_exp[0] = high_expected_prev[0];
	end
	if (
		( high_expected_prev[1] !== 1'bx ) && ( high_prev[1] !== high_expected_prev[1] )
		&& ((high_expected_prev[1] !== last_high_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port high[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", high_expected_prev);
		$display ("     Real value = %b", high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_high_exp[1] = high_expected_prev[1];
	end
	if (
		( high_expected_prev[2] !== 1'bx ) && ( high_prev[2] !== high_expected_prev[2] )
		&& ((high_expected_prev[2] !== last_high_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port high[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", high_expected_prev);
		$display ("     Real value = %b", high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_high_exp[2] = high_expected_prev[2];
	end
	if (
		( high_expected_prev[3] !== 1'bx ) && ( high_prev[3] !== high_expected_prev[3] )
		&& ((high_expected_prev[3] !== last_high_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port high[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", high_expected_prev);
		$display ("     Real value = %b", high_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_high_exp[3] = high_expected_prev[3];
	end
	if (
		( low_expected_prev[0] !== 1'bx ) && ( low_prev[0] !== low_expected_prev[0] )
		&& ((low_expected_prev[0] !== last_low_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_expected_prev);
		$display ("     Real value = %b", low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_low_exp[0] = low_expected_prev[0];
	end
	if (
		( low_expected_prev[1] !== 1'bx ) && ( low_prev[1] !== low_expected_prev[1] )
		&& ((low_expected_prev[1] !== last_low_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_expected_prev);
		$display ("     Real value = %b", low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_low_exp[1] = low_expected_prev[1];
	end
	if (
		( low_expected_prev[2] !== 1'bx ) && ( low_prev[2] !== low_expected_prev[2] )
		&& ((low_expected_prev[2] !== last_low_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_expected_prev);
		$display ("     Real value = %b", low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_low_exp[2] = low_expected_prev[2];
	end
	if (
		( low_expected_prev[3] !== 1'bx ) && ( low_prev[3] !== low_expected_prev[3] )
		&& ((low_expected_prev[3] !== last_low_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_expected_prev);
		$display ("     Real value = %b", low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_low_exp[3] = low_expected_prev[3];
	end
	if (
		( OVERFLOW_expected_prev !== 1'bx ) && ( OVERFLOW_prev !== OVERFLOW_expected_prev )
		&& ((OVERFLOW_expected_prev !== last_OVERFLOW_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OVERFLOW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OVERFLOW_expected_prev);
		$display ("     Real value = %b", OVERFLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OVERFLOW_exp = OVERFLOW_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TIM_CNT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_50;
reg CTRL_clear;
reg CTRL_STOP;
// wires                                               
wire CDOT;
wire [6:0] HEX_HIGH;
wire [6:0] HEX_LOW;
wire [3:0] high;
wire [3:0] low;
wire OVERFLOW;

wire sampler;                             

// assign statements (if any)                          
TIM_CNT i1 (
// port map - connection between master ports and signals/registers   
	.CDOT(CDOT),
	.CLK_50(CLK_50),
	.CTRL_clear(CTRL_clear),
	.CTRL_STOP(CTRL_STOP),
	.HEX_HIGH(HEX_HIGH),
	.HEX_LOW(HEX_LOW),
	.high(high),
	.low(low),
	.OVERFLOW(OVERFLOW)
);

// CLK_50
always
begin
	CLK_50 = 1'b0;
	CLK_50 = #5000 1'b1;
	#5000;
end 

// CTRL_clear
initial
begin
	CTRL_clear = 1'b1;
end 

// CTRL_STOP
initial
begin
	CTRL_STOP = 1'b1;
end 

TIM_CNT_vlg_sample_tst tb_sample (
	.CLK_50(CLK_50),
	.CTRL_clear(CTRL_clear),
	.CTRL_STOP(CTRL_STOP),
	.sampler_tx(sampler)
);

TIM_CNT_vlg_check_tst tb_out(
	.CDOT(CDOT),
	.HEX_HIGH(HEX_HIGH),
	.HEX_LOW(HEX_LOW),
	.high(high),
	.low(low),
	.OVERFLOW(OVERFLOW),
	.sampler_rx(sampler)
);
endmodule

