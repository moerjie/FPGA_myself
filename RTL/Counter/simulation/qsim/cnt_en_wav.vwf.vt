// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/26/2023 21:33:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cnt_en
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cnt_en_vlg_sample_tst(
	CLK,
	CLR,
	DATA,
	EN,
	LOAD,
	RST,
	sampler_tx
);
input  CLK;
input  CLR;
input [3:0] DATA;
input  EN;
input  LOAD;
input  RST;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLR or DATA or EN or LOAD or RST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cnt_en_vlg_check_tst (
	CNTVAL,
	OV,
	sampler_rx
);
input [3:0] CNTVAL;
input  OV;
input sampler_rx;

reg [3:0] CNTVAL_expected;
reg  OV_expected;

reg [3:0] CNTVAL_prev;
reg  OV_prev;

reg [3:0] CNTVAL_expected_prev;
reg  OV_expected_prev;

reg [3:0] last_CNTVAL_exp;
reg  last_OV_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	CNTVAL_prev = CNTVAL;
	OV_prev = OV;
end

// update expected /o prevs

always @(trigger)
begin
	CNTVAL_expected_prev = CNTVAL_expected;
	OV_expected_prev = OV_expected;
end


// expected CNTVAL[ 3 ]
initial
begin
	CNTVAL_expected[3] = 1'bX;
end 
// expected CNTVAL[ 2 ]
initial
begin
	CNTVAL_expected[2] = 1'bX;
end 
// expected CNTVAL[ 1 ]
initial
begin
	CNTVAL_expected[1] = 1'bX;
end 
// expected CNTVAL[ 0 ]
initial
begin
	CNTVAL_expected[0] = 1'bX;
end 

// expected OV
initial
begin
	OV_expected = 1'bX;
end 
// generate trigger
always @(CNTVAL_expected or CNTVAL or OV_expected or OV)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CNTVAL = %b | expected OV = %b | ",CNTVAL_expected_prev,OV_expected_prev);
	$display("| real CNTVAL = %b | real OV = %b | ",CNTVAL_prev,OV_prev);
`endif
	if (
		( CNTVAL_expected_prev[0] !== 1'bx ) && ( CNTVAL_prev[0] !== CNTVAL_expected_prev[0] )
		&& ((CNTVAL_expected_prev[0] !== last_CNTVAL_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNTVAL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNTVAL_expected_prev);
		$display ("     Real value = %b", CNTVAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CNTVAL_exp[0] = CNTVAL_expected_prev[0];
	end
	if (
		( CNTVAL_expected_prev[1] !== 1'bx ) && ( CNTVAL_prev[1] !== CNTVAL_expected_prev[1] )
		&& ((CNTVAL_expected_prev[1] !== last_CNTVAL_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNTVAL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNTVAL_expected_prev);
		$display ("     Real value = %b", CNTVAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CNTVAL_exp[1] = CNTVAL_expected_prev[1];
	end
	if (
		( CNTVAL_expected_prev[2] !== 1'bx ) && ( CNTVAL_prev[2] !== CNTVAL_expected_prev[2] )
		&& ((CNTVAL_expected_prev[2] !== last_CNTVAL_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNTVAL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNTVAL_expected_prev);
		$display ("     Real value = %b", CNTVAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CNTVAL_exp[2] = CNTVAL_expected_prev[2];
	end
	if (
		( CNTVAL_expected_prev[3] !== 1'bx ) && ( CNTVAL_prev[3] !== CNTVAL_expected_prev[3] )
		&& ((CNTVAL_expected_prev[3] !== last_CNTVAL_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNTVAL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNTVAL_expected_prev);
		$display ("     Real value = %b", CNTVAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CNTVAL_exp[3] = CNTVAL_expected_prev[3];
	end
	if (
		( OV_expected_prev !== 1'bx ) && ( OV_prev !== OV_expected_prev )
		&& ((OV_expected_prev !== last_OV_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OV_expected_prev);
		$display ("     Real value = %b", OV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OV_exp = OV_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cnt_en_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
reg [3:0] DATA;
reg EN;
reg LOAD;
reg RST;
// wires                                               
wire [3:0] CNTVAL;
wire OV;

wire sampler;                             

// assign statements (if any)                          
cnt_en i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR(CLR),
	.CNTVAL(CNTVAL),
	.DATA(DATA),
	.EN(EN),
	.LOAD(LOAD),
	.OV(OV),
	.RST(RST)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// CLR
initial
begin
	CLR = 1'b0;
	CLR = #160000 1'b1;
	CLR = #20000 1'b0;
end 

// EN
initial
begin
	EN = 1'b1;
	EN = #810000 1'b0;
	EN = #40000 1'b1;
end 

// LOAD
initial
begin
	LOAD = 1'b0;
	LOAD = #180000 1'b1;
	LOAD = #20000 1'b0;
end 

// RST
initial
begin
	RST = 1'b0;
	RST = #400000 1'b1;
	RST = #50000 1'b0;
end 
// DATA[ 3 ]
initial
begin
	DATA[3] = 1'b0;
end 
// DATA[ 2 ]
initial
begin
	DATA[2] = 1'b0;
end 
// DATA[ 1 ]
initial
begin
	DATA[1] = 1'b1;
end 
// DATA[ 0 ]
initial
begin
	DATA[0] = 1'b0;
end 

cnt_en_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLR(CLR),
	.DATA(DATA),
	.EN(EN),
	.LOAD(LOAD),
	.RST(RST),
	.sampler_tx(sampler)
);

cnt_en_vlg_check_tst tb_out(
	.CNTVAL(CNTVAL),
	.OV(OV),
	.sampler_rx(sampler)
);
endmodule

