// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/21/2023 22:12:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cross_bar
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cross_bar_vlg_sample_tst(
	IN0,
	IN1,
	IN2,
	IN3,
	SEL0,
	SEL1,
	SEL2,
	SEL3,
	sampler_tx
);
input [15:0] IN0;
input [15:0] IN1;
input [15:0] IN2;
input [15:0] IN3;
input [1:0] SEL0;
input [1:0] SEL1;
input [1:0] SEL2;
input [1:0] SEL3;
output sampler_tx;

reg sample;
time current_time;
always @(IN0 or IN1 or IN2 or IN3 or SEL0 or SEL1 or SEL2 or SEL3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cross_bar_vlg_check_tst (
	OUT0,
	OUT1,
	OUT2,
	OUT3,
	sampler_rx
);
input [15:0] OUT0;
input [15:0] OUT1;
input [15:0] OUT2;
input [15:0] OUT3;
input sampler_rx;

reg [15:0] OUT0_expected;
reg [15:0] OUT1_expected;
reg [15:0] OUT2_expected;
reg [15:0] OUT3_expected;

reg [15:0] OUT0_prev;
reg [15:0] OUT1_prev;
reg [15:0] OUT2_prev;
reg [15:0] OUT3_prev;

reg [15:0] OUT0_expected_prev;
reg [15:0] OUT1_expected_prev;
reg [15:0] OUT2_expected_prev;
reg [15:0] OUT3_expected_prev;

reg [15:0] last_OUT0_exp;
reg [15:0] last_OUT1_exp;
reg [15:0] last_OUT2_exp;
reg [15:0] last_OUT3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUT0_prev = OUT0;
	OUT1_prev = OUT1;
	OUT2_prev = OUT2;
	OUT3_prev = OUT3;
end

// update expected /o prevs

always @(trigger)
begin
	OUT0_expected_prev = OUT0_expected;
	OUT1_expected_prev = OUT1_expected;
	OUT2_expected_prev = OUT2_expected;
	OUT3_expected_prev = OUT3_expected;
end


// expected OUT0[ 15 ]
initial
begin
	OUT0_expected[15] = 1'bX;
	OUT0_expected[15] = #999000 1'b0;
end 
// expected OUT0[ 14 ]
initial
begin
	OUT0_expected[14] = 1'bX;
	OUT0_expected[14] = #999000 1'b0;
end 
// expected OUT0[ 13 ]
initial
begin
	OUT0_expected[13] = 1'bX;
	OUT0_expected[13] = #999000 1'b0;
end 
// expected OUT0[ 12 ]
initial
begin
	OUT0_expected[12] = 1'bX;
	OUT0_expected[12] = #999000 1'b0;
end 
// expected OUT0[ 11 ]
initial
begin
	OUT0_expected[11] = 1'bX;
	OUT0_expected[11] = #999000 1'b0;
end 
// expected OUT0[ 10 ]
initial
begin
	OUT0_expected[10] = 1'bX;
	OUT0_expected[10] = #999000 1'b0;
end 
// expected OUT0[ 9 ]
initial
begin
	OUT0_expected[9] = 1'bX;
	OUT0_expected[9] = #999000 1'b0;
end 
// expected OUT0[ 8 ]
initial
begin
	OUT0_expected[8] = 1'bX;
	OUT0_expected[8] = #999000 1'b0;
end 
// expected OUT0[ 7 ]
initial
begin
	OUT0_expected[7] = 1'bX;
	OUT0_expected[7] = #999000 1'b0;
end 
// expected OUT0[ 6 ]
initial
begin
	OUT0_expected[6] = 1'bX;
	OUT0_expected[6] = #999000 1'b0;
end 
// expected OUT0[ 5 ]
initial
begin
	OUT0_expected[5] = 1'bX;
	OUT0_expected[5] = #999000 1'b0;
end 
// expected OUT0[ 4 ]
initial
begin
	OUT0_expected[4] = 1'bX;
	OUT0_expected[4] = #999000 1'b0;
end 
// expected OUT0[ 3 ]
initial
begin
	OUT0_expected[3] = 1'bX;
	OUT0_expected[3] = #999000 1'b0;
end 
// expected OUT0[ 2 ]
initial
begin
	OUT0_expected[2] = 1'bX;
	OUT0_expected[2] = #999000 1'b0;
end 
// expected OUT0[ 1 ]
initial
begin
	OUT0_expected[1] = 1'bX;
	OUT0_expected[1] = #999000 1'b0;
end 
// expected OUT0[ 0 ]
initial
begin
	OUT0_expected[0] = 1'bX;
	OUT0_expected[0] = #999000 1'b0;
end 
// expected OUT1[ 15 ]
initial
begin
	OUT1_expected[15] = 1'bX;
	OUT1_expected[15] = #999000 1'b0;
end 
// expected OUT1[ 14 ]
initial
begin
	OUT1_expected[14] = 1'bX;
	OUT1_expected[14] = #999000 1'b0;
end 
// expected OUT1[ 13 ]
initial
begin
	OUT1_expected[13] = 1'bX;
	OUT1_expected[13] = #999000 1'b0;
end 
// expected OUT1[ 12 ]
initial
begin
	OUT1_expected[12] = 1'bX;
	OUT1_expected[12] = #999000 1'b0;
end 
// expected OUT1[ 11 ]
initial
begin
	OUT1_expected[11] = 1'bX;
	OUT1_expected[11] = #999000 1'b0;
end 
// expected OUT1[ 10 ]
initial
begin
	OUT1_expected[10] = 1'bX;
	OUT1_expected[10] = #999000 1'b0;
end 
// expected OUT1[ 9 ]
initial
begin
	OUT1_expected[9] = 1'bX;
	OUT1_expected[9] = #999000 1'b0;
end 
// expected OUT1[ 8 ]
initial
begin
	OUT1_expected[8] = 1'bX;
	OUT1_expected[8] = #999000 1'b0;
end 
// expected OUT1[ 7 ]
initial
begin
	OUT1_expected[7] = 1'bX;
	OUT1_expected[7] = #999000 1'b0;
end 
// expected OUT1[ 6 ]
initial
begin
	OUT1_expected[6] = 1'bX;
	OUT1_expected[6] = #999000 1'b0;
end 
// expected OUT1[ 5 ]
initial
begin
	OUT1_expected[5] = 1'bX;
	OUT1_expected[5] = #999000 1'b0;
end 
// expected OUT1[ 4 ]
initial
begin
	OUT1_expected[4] = 1'bX;
	OUT1_expected[4] = #999000 1'b0;
end 
// expected OUT1[ 3 ]
initial
begin
	OUT1_expected[3] = 1'bX;
	OUT1_expected[3] = #999000 1'b0;
end 
// expected OUT1[ 2 ]
initial
begin
	OUT1_expected[2] = 1'bX;
	OUT1_expected[2] = #999000 1'b0;
end 
// expected OUT1[ 1 ]
initial
begin
	OUT1_expected[1] = 1'bX;
	OUT1_expected[1] = #999000 1'b0;
end 
// expected OUT1[ 0 ]
initial
begin
	OUT1_expected[0] = 1'bX;
	OUT1_expected[0] = #999000 1'b0;
end 
// expected OUT2[ 15 ]
initial
begin
	OUT2_expected[15] = 1'bX;
	OUT2_expected[15] = #999000 1'b0;
end 
// expected OUT2[ 14 ]
initial
begin
	OUT2_expected[14] = 1'bX;
	OUT2_expected[14] = #999000 1'b0;
end 
// expected OUT2[ 13 ]
initial
begin
	OUT2_expected[13] = 1'bX;
	OUT2_expected[13] = #999000 1'b0;
end 
// expected OUT2[ 12 ]
initial
begin
	OUT2_expected[12] = 1'bX;
	OUT2_expected[12] = #999000 1'b0;
end 
// expected OUT2[ 11 ]
initial
begin
	OUT2_expected[11] = 1'bX;
	OUT2_expected[11] = #999000 1'b0;
end 
// expected OUT2[ 10 ]
initial
begin
	OUT2_expected[10] = 1'bX;
	OUT2_expected[10] = #999000 1'b0;
end 
// expected OUT2[ 9 ]
initial
begin
	OUT2_expected[9] = 1'bX;
	OUT2_expected[9] = #999000 1'b0;
end 
// expected OUT2[ 8 ]
initial
begin
	OUT2_expected[8] = 1'bX;
	OUT2_expected[8] = #999000 1'b0;
end 
// expected OUT2[ 7 ]
initial
begin
	OUT2_expected[7] = 1'bX;
	OUT2_expected[7] = #999000 1'b0;
end 
// expected OUT2[ 6 ]
initial
begin
	OUT2_expected[6] = 1'bX;
	OUT2_expected[6] = #999000 1'b0;
end 
// expected OUT2[ 5 ]
initial
begin
	OUT2_expected[5] = 1'bX;
	OUT2_expected[5] = #999000 1'b0;
end 
// expected OUT2[ 4 ]
initial
begin
	OUT2_expected[4] = 1'bX;
	OUT2_expected[4] = #999000 1'b0;
end 
// expected OUT2[ 3 ]
initial
begin
	OUT2_expected[3] = 1'bX;
	OUT2_expected[3] = #999000 1'b0;
end 
// expected OUT2[ 2 ]
initial
begin
	OUT2_expected[2] = 1'bX;
	OUT2_expected[2] = #999000 1'b0;
end 
// expected OUT2[ 1 ]
initial
begin
	OUT2_expected[1] = 1'bX;
	OUT2_expected[1] = #999000 1'b0;
end 
// expected OUT2[ 0 ]
initial
begin
	OUT2_expected[0] = 1'bX;
	OUT2_expected[0] = #999000 1'b0;
end 
// expected OUT3[ 15 ]
initial
begin
	OUT3_expected[15] = 1'bX;
	OUT3_expected[15] = #999000 1'b0;
end 
// expected OUT3[ 14 ]
initial
begin
	OUT3_expected[14] = 1'bX;
	OUT3_expected[14] = #999000 1'b0;
end 
// expected OUT3[ 13 ]
initial
begin
	OUT3_expected[13] = 1'bX;
	OUT3_expected[13] = #999000 1'b0;
end 
// expected OUT3[ 12 ]
initial
begin
	OUT3_expected[12] = 1'bX;
	OUT3_expected[12] = #999000 1'b0;
end 
// expected OUT3[ 11 ]
initial
begin
	OUT3_expected[11] = 1'bX;
	OUT3_expected[11] = #999000 1'b0;
end 
// expected OUT3[ 10 ]
initial
begin
	OUT3_expected[10] = 1'bX;
	OUT3_expected[10] = #999000 1'b0;
end 
// expected OUT3[ 9 ]
initial
begin
	OUT3_expected[9] = 1'bX;
	OUT3_expected[9] = #999000 1'b0;
end 
// expected OUT3[ 8 ]
initial
begin
	OUT3_expected[8] = 1'bX;
	OUT3_expected[8] = #999000 1'b0;
end 
// expected OUT3[ 7 ]
initial
begin
	OUT3_expected[7] = 1'bX;
	OUT3_expected[7] = #999000 1'b0;
end 
// expected OUT3[ 6 ]
initial
begin
	OUT3_expected[6] = 1'bX;
	OUT3_expected[6] = #999000 1'b0;
end 
// expected OUT3[ 5 ]
initial
begin
	OUT3_expected[5] = 1'bX;
	OUT3_expected[5] = #999000 1'b0;
end 
// expected OUT3[ 4 ]
initial
begin
	OUT3_expected[4] = 1'bX;
	OUT3_expected[4] = #999000 1'b0;
end 
// expected OUT3[ 3 ]
initial
begin
	OUT3_expected[3] = 1'bX;
	OUT3_expected[3] = #999000 1'b0;
end 
// expected OUT3[ 2 ]
initial
begin
	OUT3_expected[2] = 1'bX;
	OUT3_expected[2] = #999000 1'b0;
end 
// expected OUT3[ 1 ]
initial
begin
	OUT3_expected[1] = 1'bX;
	OUT3_expected[1] = #999000 1'b0;
end 
// expected OUT3[ 0 ]
initial
begin
	OUT3_expected[0] = 1'bX;
	OUT3_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(OUT0_expected or OUT0 or OUT1_expected or OUT1 or OUT2_expected or OUT2 or OUT3_expected or OUT3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUT0 = %b | expected OUT1 = %b | expected OUT2 = %b | expected OUT3 = %b | ",OUT0_expected_prev,OUT1_expected_prev,OUT2_expected_prev,OUT3_expected_prev);
	$display("| real OUT0 = %b | real OUT1 = %b | real OUT2 = %b | real OUT3 = %b | ",OUT0_prev,OUT1_prev,OUT2_prev,OUT3_prev);
`endif
	if (
		( OUT0_expected_prev[0] !== 1'bx ) && ( OUT0_prev[0] !== OUT0_expected_prev[0] )
		&& ((OUT0_expected_prev[0] !== last_OUT0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[0] = OUT0_expected_prev[0];
	end
	if (
		( OUT0_expected_prev[1] !== 1'bx ) && ( OUT0_prev[1] !== OUT0_expected_prev[1] )
		&& ((OUT0_expected_prev[1] !== last_OUT0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[1] = OUT0_expected_prev[1];
	end
	if (
		( OUT0_expected_prev[2] !== 1'bx ) && ( OUT0_prev[2] !== OUT0_expected_prev[2] )
		&& ((OUT0_expected_prev[2] !== last_OUT0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[2] = OUT0_expected_prev[2];
	end
	if (
		( OUT0_expected_prev[3] !== 1'bx ) && ( OUT0_prev[3] !== OUT0_expected_prev[3] )
		&& ((OUT0_expected_prev[3] !== last_OUT0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[3] = OUT0_expected_prev[3];
	end
	if (
		( OUT0_expected_prev[4] !== 1'bx ) && ( OUT0_prev[4] !== OUT0_expected_prev[4] )
		&& ((OUT0_expected_prev[4] !== last_OUT0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[4] = OUT0_expected_prev[4];
	end
	if (
		( OUT0_expected_prev[5] !== 1'bx ) && ( OUT0_prev[5] !== OUT0_expected_prev[5] )
		&& ((OUT0_expected_prev[5] !== last_OUT0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[5] = OUT0_expected_prev[5];
	end
	if (
		( OUT0_expected_prev[6] !== 1'bx ) && ( OUT0_prev[6] !== OUT0_expected_prev[6] )
		&& ((OUT0_expected_prev[6] !== last_OUT0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[6] = OUT0_expected_prev[6];
	end
	if (
		( OUT0_expected_prev[7] !== 1'bx ) && ( OUT0_prev[7] !== OUT0_expected_prev[7] )
		&& ((OUT0_expected_prev[7] !== last_OUT0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[7] = OUT0_expected_prev[7];
	end
	if (
		( OUT0_expected_prev[8] !== 1'bx ) && ( OUT0_prev[8] !== OUT0_expected_prev[8] )
		&& ((OUT0_expected_prev[8] !== last_OUT0_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[8] = OUT0_expected_prev[8];
	end
	if (
		( OUT0_expected_prev[9] !== 1'bx ) && ( OUT0_prev[9] !== OUT0_expected_prev[9] )
		&& ((OUT0_expected_prev[9] !== last_OUT0_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[9] = OUT0_expected_prev[9];
	end
	if (
		( OUT0_expected_prev[10] !== 1'bx ) && ( OUT0_prev[10] !== OUT0_expected_prev[10] )
		&& ((OUT0_expected_prev[10] !== last_OUT0_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[10] = OUT0_expected_prev[10];
	end
	if (
		( OUT0_expected_prev[11] !== 1'bx ) && ( OUT0_prev[11] !== OUT0_expected_prev[11] )
		&& ((OUT0_expected_prev[11] !== last_OUT0_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[11] = OUT0_expected_prev[11];
	end
	if (
		( OUT0_expected_prev[12] !== 1'bx ) && ( OUT0_prev[12] !== OUT0_expected_prev[12] )
		&& ((OUT0_expected_prev[12] !== last_OUT0_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[12] = OUT0_expected_prev[12];
	end
	if (
		( OUT0_expected_prev[13] !== 1'bx ) && ( OUT0_prev[13] !== OUT0_expected_prev[13] )
		&& ((OUT0_expected_prev[13] !== last_OUT0_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[13] = OUT0_expected_prev[13];
	end
	if (
		( OUT0_expected_prev[14] !== 1'bx ) && ( OUT0_prev[14] !== OUT0_expected_prev[14] )
		&& ((OUT0_expected_prev[14] !== last_OUT0_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[14] = OUT0_expected_prev[14];
	end
	if (
		( OUT0_expected_prev[15] !== 1'bx ) && ( OUT0_prev[15] !== OUT0_expected_prev[15] )
		&& ((OUT0_expected_prev[15] !== last_OUT0_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT0_expected_prev);
		$display ("     Real value = %b", OUT0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT0_exp[15] = OUT0_expected_prev[15];
	end
	if (
		( OUT1_expected_prev[0] !== 1'bx ) && ( OUT1_prev[0] !== OUT1_expected_prev[0] )
		&& ((OUT1_expected_prev[0] !== last_OUT1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[0] = OUT1_expected_prev[0];
	end
	if (
		( OUT1_expected_prev[1] !== 1'bx ) && ( OUT1_prev[1] !== OUT1_expected_prev[1] )
		&& ((OUT1_expected_prev[1] !== last_OUT1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[1] = OUT1_expected_prev[1];
	end
	if (
		( OUT1_expected_prev[2] !== 1'bx ) && ( OUT1_prev[2] !== OUT1_expected_prev[2] )
		&& ((OUT1_expected_prev[2] !== last_OUT1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[2] = OUT1_expected_prev[2];
	end
	if (
		( OUT1_expected_prev[3] !== 1'bx ) && ( OUT1_prev[3] !== OUT1_expected_prev[3] )
		&& ((OUT1_expected_prev[3] !== last_OUT1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[3] = OUT1_expected_prev[3];
	end
	if (
		( OUT1_expected_prev[4] !== 1'bx ) && ( OUT1_prev[4] !== OUT1_expected_prev[4] )
		&& ((OUT1_expected_prev[4] !== last_OUT1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[4] = OUT1_expected_prev[4];
	end
	if (
		( OUT1_expected_prev[5] !== 1'bx ) && ( OUT1_prev[5] !== OUT1_expected_prev[5] )
		&& ((OUT1_expected_prev[5] !== last_OUT1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[5] = OUT1_expected_prev[5];
	end
	if (
		( OUT1_expected_prev[6] !== 1'bx ) && ( OUT1_prev[6] !== OUT1_expected_prev[6] )
		&& ((OUT1_expected_prev[6] !== last_OUT1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[6] = OUT1_expected_prev[6];
	end
	if (
		( OUT1_expected_prev[7] !== 1'bx ) && ( OUT1_prev[7] !== OUT1_expected_prev[7] )
		&& ((OUT1_expected_prev[7] !== last_OUT1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[7] = OUT1_expected_prev[7];
	end
	if (
		( OUT1_expected_prev[8] !== 1'bx ) && ( OUT1_prev[8] !== OUT1_expected_prev[8] )
		&& ((OUT1_expected_prev[8] !== last_OUT1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[8] = OUT1_expected_prev[8];
	end
	if (
		( OUT1_expected_prev[9] !== 1'bx ) && ( OUT1_prev[9] !== OUT1_expected_prev[9] )
		&& ((OUT1_expected_prev[9] !== last_OUT1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[9] = OUT1_expected_prev[9];
	end
	if (
		( OUT1_expected_prev[10] !== 1'bx ) && ( OUT1_prev[10] !== OUT1_expected_prev[10] )
		&& ((OUT1_expected_prev[10] !== last_OUT1_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[10] = OUT1_expected_prev[10];
	end
	if (
		( OUT1_expected_prev[11] !== 1'bx ) && ( OUT1_prev[11] !== OUT1_expected_prev[11] )
		&& ((OUT1_expected_prev[11] !== last_OUT1_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[11] = OUT1_expected_prev[11];
	end
	if (
		( OUT1_expected_prev[12] !== 1'bx ) && ( OUT1_prev[12] !== OUT1_expected_prev[12] )
		&& ((OUT1_expected_prev[12] !== last_OUT1_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[12] = OUT1_expected_prev[12];
	end
	if (
		( OUT1_expected_prev[13] !== 1'bx ) && ( OUT1_prev[13] !== OUT1_expected_prev[13] )
		&& ((OUT1_expected_prev[13] !== last_OUT1_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[13] = OUT1_expected_prev[13];
	end
	if (
		( OUT1_expected_prev[14] !== 1'bx ) && ( OUT1_prev[14] !== OUT1_expected_prev[14] )
		&& ((OUT1_expected_prev[14] !== last_OUT1_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[14] = OUT1_expected_prev[14];
	end
	if (
		( OUT1_expected_prev[15] !== 1'bx ) && ( OUT1_prev[15] !== OUT1_expected_prev[15] )
		&& ((OUT1_expected_prev[15] !== last_OUT1_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT1_expected_prev);
		$display ("     Real value = %b", OUT1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT1_exp[15] = OUT1_expected_prev[15];
	end
	if (
		( OUT2_expected_prev[0] !== 1'bx ) && ( OUT2_prev[0] !== OUT2_expected_prev[0] )
		&& ((OUT2_expected_prev[0] !== last_OUT2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[0] = OUT2_expected_prev[0];
	end
	if (
		( OUT2_expected_prev[1] !== 1'bx ) && ( OUT2_prev[1] !== OUT2_expected_prev[1] )
		&& ((OUT2_expected_prev[1] !== last_OUT2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[1] = OUT2_expected_prev[1];
	end
	if (
		( OUT2_expected_prev[2] !== 1'bx ) && ( OUT2_prev[2] !== OUT2_expected_prev[2] )
		&& ((OUT2_expected_prev[2] !== last_OUT2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[2] = OUT2_expected_prev[2];
	end
	if (
		( OUT2_expected_prev[3] !== 1'bx ) && ( OUT2_prev[3] !== OUT2_expected_prev[3] )
		&& ((OUT2_expected_prev[3] !== last_OUT2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[3] = OUT2_expected_prev[3];
	end
	if (
		( OUT2_expected_prev[4] !== 1'bx ) && ( OUT2_prev[4] !== OUT2_expected_prev[4] )
		&& ((OUT2_expected_prev[4] !== last_OUT2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[4] = OUT2_expected_prev[4];
	end
	if (
		( OUT2_expected_prev[5] !== 1'bx ) && ( OUT2_prev[5] !== OUT2_expected_prev[5] )
		&& ((OUT2_expected_prev[5] !== last_OUT2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[5] = OUT2_expected_prev[5];
	end
	if (
		( OUT2_expected_prev[6] !== 1'bx ) && ( OUT2_prev[6] !== OUT2_expected_prev[6] )
		&& ((OUT2_expected_prev[6] !== last_OUT2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[6] = OUT2_expected_prev[6];
	end
	if (
		( OUT2_expected_prev[7] !== 1'bx ) && ( OUT2_prev[7] !== OUT2_expected_prev[7] )
		&& ((OUT2_expected_prev[7] !== last_OUT2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[7] = OUT2_expected_prev[7];
	end
	if (
		( OUT2_expected_prev[8] !== 1'bx ) && ( OUT2_prev[8] !== OUT2_expected_prev[8] )
		&& ((OUT2_expected_prev[8] !== last_OUT2_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[8] = OUT2_expected_prev[8];
	end
	if (
		( OUT2_expected_prev[9] !== 1'bx ) && ( OUT2_prev[9] !== OUT2_expected_prev[9] )
		&& ((OUT2_expected_prev[9] !== last_OUT2_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[9] = OUT2_expected_prev[9];
	end
	if (
		( OUT2_expected_prev[10] !== 1'bx ) && ( OUT2_prev[10] !== OUT2_expected_prev[10] )
		&& ((OUT2_expected_prev[10] !== last_OUT2_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[10] = OUT2_expected_prev[10];
	end
	if (
		( OUT2_expected_prev[11] !== 1'bx ) && ( OUT2_prev[11] !== OUT2_expected_prev[11] )
		&& ((OUT2_expected_prev[11] !== last_OUT2_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[11] = OUT2_expected_prev[11];
	end
	if (
		( OUT2_expected_prev[12] !== 1'bx ) && ( OUT2_prev[12] !== OUT2_expected_prev[12] )
		&& ((OUT2_expected_prev[12] !== last_OUT2_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[12] = OUT2_expected_prev[12];
	end
	if (
		( OUT2_expected_prev[13] !== 1'bx ) && ( OUT2_prev[13] !== OUT2_expected_prev[13] )
		&& ((OUT2_expected_prev[13] !== last_OUT2_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[13] = OUT2_expected_prev[13];
	end
	if (
		( OUT2_expected_prev[14] !== 1'bx ) && ( OUT2_prev[14] !== OUT2_expected_prev[14] )
		&& ((OUT2_expected_prev[14] !== last_OUT2_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[14] = OUT2_expected_prev[14];
	end
	if (
		( OUT2_expected_prev[15] !== 1'bx ) && ( OUT2_prev[15] !== OUT2_expected_prev[15] )
		&& ((OUT2_expected_prev[15] !== last_OUT2_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT2_expected_prev);
		$display ("     Real value = %b", OUT2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT2_exp[15] = OUT2_expected_prev[15];
	end
	if (
		( OUT3_expected_prev[0] !== 1'bx ) && ( OUT3_prev[0] !== OUT3_expected_prev[0] )
		&& ((OUT3_expected_prev[0] !== last_OUT3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[0] = OUT3_expected_prev[0];
	end
	if (
		( OUT3_expected_prev[1] !== 1'bx ) && ( OUT3_prev[1] !== OUT3_expected_prev[1] )
		&& ((OUT3_expected_prev[1] !== last_OUT3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[1] = OUT3_expected_prev[1];
	end
	if (
		( OUT3_expected_prev[2] !== 1'bx ) && ( OUT3_prev[2] !== OUT3_expected_prev[2] )
		&& ((OUT3_expected_prev[2] !== last_OUT3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[2] = OUT3_expected_prev[2];
	end
	if (
		( OUT3_expected_prev[3] !== 1'bx ) && ( OUT3_prev[3] !== OUT3_expected_prev[3] )
		&& ((OUT3_expected_prev[3] !== last_OUT3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[3] = OUT3_expected_prev[3];
	end
	if (
		( OUT3_expected_prev[4] !== 1'bx ) && ( OUT3_prev[4] !== OUT3_expected_prev[4] )
		&& ((OUT3_expected_prev[4] !== last_OUT3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[4] = OUT3_expected_prev[4];
	end
	if (
		( OUT3_expected_prev[5] !== 1'bx ) && ( OUT3_prev[5] !== OUT3_expected_prev[5] )
		&& ((OUT3_expected_prev[5] !== last_OUT3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[5] = OUT3_expected_prev[5];
	end
	if (
		( OUT3_expected_prev[6] !== 1'bx ) && ( OUT3_prev[6] !== OUT3_expected_prev[6] )
		&& ((OUT3_expected_prev[6] !== last_OUT3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[6] = OUT3_expected_prev[6];
	end
	if (
		( OUT3_expected_prev[7] !== 1'bx ) && ( OUT3_prev[7] !== OUT3_expected_prev[7] )
		&& ((OUT3_expected_prev[7] !== last_OUT3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[7] = OUT3_expected_prev[7];
	end
	if (
		( OUT3_expected_prev[8] !== 1'bx ) && ( OUT3_prev[8] !== OUT3_expected_prev[8] )
		&& ((OUT3_expected_prev[8] !== last_OUT3_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[8] = OUT3_expected_prev[8];
	end
	if (
		( OUT3_expected_prev[9] !== 1'bx ) && ( OUT3_prev[9] !== OUT3_expected_prev[9] )
		&& ((OUT3_expected_prev[9] !== last_OUT3_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[9] = OUT3_expected_prev[9];
	end
	if (
		( OUT3_expected_prev[10] !== 1'bx ) && ( OUT3_prev[10] !== OUT3_expected_prev[10] )
		&& ((OUT3_expected_prev[10] !== last_OUT3_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[10] = OUT3_expected_prev[10];
	end
	if (
		( OUT3_expected_prev[11] !== 1'bx ) && ( OUT3_prev[11] !== OUT3_expected_prev[11] )
		&& ((OUT3_expected_prev[11] !== last_OUT3_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[11] = OUT3_expected_prev[11];
	end
	if (
		( OUT3_expected_prev[12] !== 1'bx ) && ( OUT3_prev[12] !== OUT3_expected_prev[12] )
		&& ((OUT3_expected_prev[12] !== last_OUT3_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[12] = OUT3_expected_prev[12];
	end
	if (
		( OUT3_expected_prev[13] !== 1'bx ) && ( OUT3_prev[13] !== OUT3_expected_prev[13] )
		&& ((OUT3_expected_prev[13] !== last_OUT3_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[13] = OUT3_expected_prev[13];
	end
	if (
		( OUT3_expected_prev[14] !== 1'bx ) && ( OUT3_prev[14] !== OUT3_expected_prev[14] )
		&& ((OUT3_expected_prev[14] !== last_OUT3_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[14] = OUT3_expected_prev[14];
	end
	if (
		( OUT3_expected_prev[15] !== 1'bx ) && ( OUT3_prev[15] !== OUT3_expected_prev[15] )
		&& ((OUT3_expected_prev[15] !== last_OUT3_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT3_expected_prev);
		$display ("     Real value = %b", OUT3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT3_exp[15] = OUT3_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cross_bar_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] IN0;
reg [15:0] IN1;
reg [15:0] IN2;
reg [15:0] IN3;
reg [1:0] SEL0;
reg [1:0] SEL1;
reg [1:0] SEL2;
reg [1:0] SEL3;
// wires                                               
wire [15:0] OUT0;
wire [15:0] OUT1;
wire [15:0] OUT2;
wire [15:0] OUT3;

wire sampler;                             

// assign statements (if any)                          
cross_bar i1 (
// port map - connection between master ports and signals/registers   
	.IN0(IN0),
	.IN1(IN1),
	.IN2(IN2),
	.IN3(IN3),
	.OUT0(OUT0),
	.OUT1(OUT1),
	.OUT2(OUT2),
	.OUT3(OUT3),
	.SEL0(SEL0),
	.SEL1(SEL1),
	.SEL2(SEL2),
	.SEL3(SEL3)
);
// IN0[ 15 ]
initial
begin
	IN0[15] = 1'b1;
	IN0[15] = #150000 1'b0;
	IN0[15] = #50000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #50000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #50000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #50000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #50000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #75000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #100000 1'b1;
	IN0[15] = #50000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #175000 1'b1;
	IN0[15] = #50000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #50000 1'b0;
	IN0[15] = #50000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #50000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #50000 1'b1;
	IN0[15] = #100000 1'b0;
	IN0[15] = #75000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #50000 1'b1;
	IN0[15] = #75000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #50000 1'b0;
	IN0[15] = #100000 1'b1;
	IN0[15] = #50000 1'b0;
	IN0[15] = #75000 1'b1;
	IN0[15] = #75000 1'b0;
	IN0[15] = #75000 1'b1;
	IN0[15] = #50000 1'b0;
	IN0[15] = #25000 1'b1;
	IN0[15] = #75000 1'b0;
	IN0[15] = #125000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #50000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #50000 1'b1;
	IN0[15] = #25000 1'b0;
	IN0[15] = #125000 1'b1;
	IN0[15] = #25000 1'b0;
end 
// IN0[ 14 ]
initial
begin
	IN0[14] = 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #75000 1'b1;
	IN0[14] = #50000 1'b0;
	IN0[14] = #125000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #100000 1'b0;
	IN0[14] = #75000 1'b1;
	IN0[14] = #50000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #200000 1'b1;
	IN0[14] = #125000 1'b0;
	IN0[14] = #150000 1'b1;
	IN0[14] = #100000 1'b0;
	IN0[14] = #50000 1'b1;
	IN0[14] = #50000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #100000 1'b0;
	IN0[14] = #50000 1'b1;
	IN0[14] = #50000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #75000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #50000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #50000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #75000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #50000 1'b1;
	IN0[14] = #75000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #75000 1'b0;
	IN0[14] = #50000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #50000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #75000 1'b1;
	IN0[14] = #50000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #100000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #25000 1'b0;
	IN0[14] = #25000 1'b1;
	IN0[14] = #50000 1'b0;
end 
// IN0[ 13 ]
initial
begin
	IN0[13] = 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #50000 1'b0;
	IN0[13] = #75000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #100000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #50000 1'b1;
	IN0[13] = #50000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #125000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #125000 1'b1;
	IN0[13] = #50000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #175000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #50000 1'b0;
	IN0[13] = #75000 1'b1;
	IN0[13] = #150000 1'b0;
	IN0[13] = #50000 1'b1;
	IN0[13] = #100000 1'b0;
	IN0[13] = #50000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #50000 1'b1;
	IN0[13] = #50000 1'b0;
	IN0[13] = #50000 1'b1;
	IN0[13] = #75000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #50000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #50000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #100000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #50000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #50000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #50000 1'b0;
	IN0[13] = #25000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #75000 1'b1;
	IN0[13] = #25000 1'b0;
	IN0[13] = #50000 1'b1;
end 
// IN0[ 12 ]
initial
begin
	IN0[12] = 1'b1;
	IN0[12] = #50000 1'b0;
	IN0[12] = #50000 1'b1;
	IN0[12] = #25000 1'b0;
	IN0[12] = #25000 1'b1;
	IN0[12] = #50000 1'b0;
	IN0[12] = #25000 1'b1;
	IN0[12] = #25000 1'b0;
	IN0[12] = #25000 1'b1;
	IN0[12] = #75000 1'b0;
	IN0[12] = #50000 1'b1;
	IN0[12] = #50000 1'b0;
	IN0[12] = #25000 1'b1;
	IN0[12] = #25000 1'b0;
	IN0[12] = #25000 1'b1;
	IN0[12] = #75000 1'b0;
	IN0[12] = #25000 1'b1;
	IN0[12] = #25000 1'b0;
	IN0[12] = #50000 1'b1;
	IN0[12] = #225000 1'b0;
	IN0[12] = #75000 1'b1;
	IN0[12] = #125000 1'b0;
	IN0[12] = #75000 1'b1;
	IN0[12] = #25000 1'b0;
	IN0[12] = #50000 1'b1;
	IN0[12] = #25000 1'b0;
	IN0[12] = #125000 1'b1;
	IN0[12] = #50000 1'b0;
	IN0[12] = #100000 1'b1;
	IN0[12] = #25000 1'b0;
	IN0[12] = #25000 1'b1;
	IN0[12] = #25000 1'b0;
	IN0[12] = #75000 1'b1;
	IN0[12] = #75000 1'b0;
	IN0[12] = #50000 1'b1;
	IN0[12] = #50000 1'b0;
	IN0[12] = #150000 1'b1;
	IN0[12] = #50000 1'b0;
	IN0[12] = #100000 1'b1;
	IN0[12] = #75000 1'b0;
	IN0[12] = #25000 1'b1;
	IN0[12] = #25000 1'b0;
	IN0[12] = #25000 1'b1;
	IN0[12] = #100000 1'b0;
	IN0[12] = #50000 1'b1;
	IN0[12] = #25000 1'b0;
	IN0[12] = #25000 1'b1;
	IN0[12] = #25000 1'b0;
	IN0[12] = #75000 1'b1;
	IN0[12] = #50000 1'b0;
	IN0[12] = #50000 1'b1;
	IN0[12] = #125000 1'b0;
	IN0[12] = #50000 1'b1;
end 
// IN0[ 11 ]
initial
begin
	IN0[11] = 1'b1;
	IN0[11] = #50000 1'b0;
	IN0[11] = #75000 1'b1;
	IN0[11] = #50000 1'b0;
	IN0[11] = #50000 1'b1;
	IN0[11] = #200000 1'b0;
	IN0[11] = #50000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #125000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #50000 1'b1;
	IN0[11] = #50000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #75000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #75000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #50000 1'b1;
	IN0[11] = #100000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #50000 1'b0;
	IN0[11] = #175000 1'b1;
	IN0[11] = #50000 1'b0;
	IN0[11] = #50000 1'b1;
	IN0[11] = #75000 1'b0;
	IN0[11] = #50000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #75000 1'b1;
	IN0[11] = #50000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #75000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #50000 1'b1;
	IN0[11] = #100000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #100000 1'b0;
	IN0[11] = #50000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #50000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #75000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #50000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #100000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #25000 1'b0;
	IN0[11] = #25000 1'b1;
	IN0[11] = #50000 1'b0;
end 
// IN0[ 10 ]
initial
begin
	IN0[10] = 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #50000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #50000 1'b1;
	IN0[10] = #50000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #50000 1'b0;
	IN0[10] = #50000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #50000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #50000 1'b0;
	IN0[10] = #75000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #125000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #50000 1'b1;
	IN0[10] = #175000 1'b0;
	IN0[10] = #50000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #50000 1'b1;
	IN0[10] = #125000 1'b0;
	IN0[10] = #75000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #100000 1'b1;
	IN0[10] = #100000 1'b0;
	IN0[10] = #150000 1'b1;
	IN0[10] = #50000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #50000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #50000 1'b1;
	IN0[10] = #75000 1'b0;
	IN0[10] = #125000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #50000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #50000 1'b1;
	IN0[10] = #100000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #50000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #50000 1'b0;
	IN0[10] = #50000 1'b1;
	IN0[10] = #25000 1'b0;
	IN0[10] = #25000 1'b1;
	IN0[10] = #125000 1'b0;
end 
// IN0[ 9 ]
initial
begin
	IN0[9] = 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #50000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #50000 1'b0;
	IN0[9] = #75000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #125000 1'b1;
	IN0[9] = #125000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #50000 1'b1;
	IN0[9] = #50000 1'b0;
	IN0[9] = #75000 1'b1;
	IN0[9] = #50000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #50000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #125000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #50000 1'b0;
	IN0[9] = #175000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #50000 1'b1;
	IN0[9] = #100000 1'b0;
	IN0[9] = #125000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #50000 1'b1;
	IN0[9] = #75000 1'b0;
	IN0[9] = #50000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #75000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #125000 1'b1;
	IN0[9] = #50000 1'b0;
	IN0[9] = #50000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #50000 1'b0;
	IN0[9] = #50000 1'b1;
	IN0[9] = #175000 1'b0;
	IN0[9] = #50000 1'b1;
	IN0[9] = #75000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #25000 1'b0;
	IN0[9] = #25000 1'b1;
	IN0[9] = #50000 1'b0;
	IN0[9] = #25000 1'b1;
end 
// IN0[ 8 ]
initial
begin
	IN0[8] = 1'b1;
	IN0[8] = #25000 1'b0;
	IN0[8] = #25000 1'b1;
	IN0[8] = #75000 1'b0;
	IN0[8] = #50000 1'b1;
	IN0[8] = #75000 1'b0;
	IN0[8] = #25000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #50000 1'b1;
	IN0[8] = #25000 1'b0;
	IN0[8] = #25000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #25000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #100000 1'b1;
	IN0[8] = #25000 1'b0;
	IN0[8] = #50000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #100000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #50000 1'b1;
	IN0[8] = #125000 1'b0;
	IN0[8] = #25000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #50000 1'b1;
	IN0[8] = #75000 1'b0;
	IN0[8] = #25000 1'b1;
	IN0[8] = #25000 1'b0;
	IN0[8] = #125000 1'b1;
	IN0[8] = #100000 1'b0;
	IN0[8] = #75000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #125000 1'b1;
	IN0[8] = #25000 1'b0;
	IN0[8] = #50000 1'b1;
	IN0[8] = #25000 1'b0;
	IN0[8] = #50000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #25000 1'b1;
	IN0[8] = #25000 1'b0;
	IN0[8] = #50000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #75000 1'b1;
	IN0[8] = #25000 1'b0;
	IN0[8] = #25000 1'b1;
	IN0[8] = #100000 1'b0;
	IN0[8] = #100000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #25000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #25000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #150000 1'b1;
	IN0[8] = #50000 1'b0;
	IN0[8] = #75000 1'b1;
end 
// IN0[ 7 ]
initial
begin
	IN0[7] = 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #50000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #50000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #50000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #125000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #100000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #125000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #50000 1'b1;
	IN0[7] = #75000 1'b0;
	IN0[7] = #125000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #50000 1'b1;
	IN0[7] = #25000 1'b0;
	IN0[7] = #50000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #50000 1'b1;
	IN0[7] = #75000 1'b0;
	IN0[7] = #50000 1'b1;
	IN0[7] = #125000 1'b0;
	IN0[7] = #75000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #125000 1'b1;
	IN0[7] = #100000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #75000 1'b0;
	IN0[7] = #25000 1'b1;
	IN0[7] = #50000 1'b0;
	IN0[7] = #25000 1'b1;
end 
// IN0[ 6 ]
initial
begin
	IN0[6] = 1'b1;
	IN0[6] = #75000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #50000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #75000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #100000 1'b0;
	IN0[6] = #75000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #75000 1'b0;
	IN0[6] = #50000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #75000 1'b1;
	IN0[6] = #100000 1'b0;
	IN0[6] = #125000 1'b1;
	IN0[6] = #50000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #75000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #50000 1'b1;
	IN0[6] = #175000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #50000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #50000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #50000 1'b0;
	IN0[6] = #150000 1'b1;
	IN0[6] = #50000 1'b0;
	IN0[6] = #75000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #50000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #100000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #50000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #25000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #100000 1'b0;
	IN0[6] = #25000 1'b1;
	IN0[6] = #125000 1'b0;
	IN0[6] = #100000 1'b1;
	IN0[6] = #50000 1'b0;
	IN0[6] = #25000 1'b1;
end 
// IN0[ 5 ]
initial
begin
	IN0[5] = 1'b0;
	IN0[5] = #100000 1'b1;
	IN0[5] = #75000 1'b0;
	IN0[5] = #50000 1'b1;
	IN0[5] = #75000 1'b0;
	IN0[5] = #75000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #50000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #25000 1'b1;
	IN0[5] = #50000 1'b0;
	IN0[5] = #50000 1'b1;
	IN0[5] = #75000 1'b0;
	IN0[5] = #25000 1'b1;
	IN0[5] = #100000 1'b0;
	IN0[5] = #175000 1'b1;
	IN0[5] = #50000 1'b0;
	IN0[5] = #25000 1'b1;
	IN0[5] = #50000 1'b0;
	IN0[5] = #150000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #100000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #75000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #50000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #25000 1'b1;
	IN0[5] = #50000 1'b0;
	IN0[5] = #25000 1'b1;
	IN0[5] = #50000 1'b0;
	IN0[5] = #50000 1'b1;
	IN0[5] = #50000 1'b0;
	IN0[5] = #25000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #100000 1'b1;
	IN0[5] = #50000 1'b0;
	IN0[5] = #25000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #50000 1'b1;
	IN0[5] = #100000 1'b0;
	IN0[5] = #25000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #175000 1'b1;
	IN0[5] = #100000 1'b0;
	IN0[5] = #25000 1'b1;
	IN0[5] = #50000 1'b0;
	IN0[5] = #25000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #50000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #125000 1'b1;
	IN0[5] = #25000 1'b0;
	IN0[5] = #25000 1'b1;
	IN0[5] = #50000 1'b0;
end 
// IN0[ 4 ]
initial
begin
	IN0[4] = 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #50000 1'b1;
	IN0[4] = #75000 1'b0;
	IN0[4] = #100000 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #100000 1'b0;
	IN0[4] = #175000 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #125000 1'b0;
	IN0[4] = #50000 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #50000 1'b1;
	IN0[4] = #150000 1'b0;
	IN0[4] = #50000 1'b1;
	IN0[4] = #50000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #75000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #100000 1'b1;
	IN0[4] = #125000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #50000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #75000 1'b0;
	IN0[4] = #50000 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #50000 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #50000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #50000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #175000 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #75000 1'b1;
	IN0[4] = #100000 1'b0;
	IN0[4] = #50000 1'b1;
	IN0[4] = #75000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #25000 1'b1;
	IN0[4] = #25000 1'b0;
	IN0[4] = #50000 1'b1;
	IN0[4] = #125000 1'b0;
	IN0[4] = #50000 1'b1;
	IN0[4] = #50000 1'b0;
	IN0[4] = #25000 1'b1;
end 
// IN0[ 3 ]
initial
begin
	IN0[3] = 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #50000 1'b1;
	IN0[3] = #75000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #50000 1'b1;
	IN0[3] = #50000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #75000 1'b0;
	IN0[3] = #75000 1'b1;
	IN0[3] = #75000 1'b0;
	IN0[3] = #50000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #100000 1'b1;
	IN0[3] = #75000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #75000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #75000 1'b0;
	IN0[3] = #50000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #50000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #50000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #150000 1'b0;
	IN0[3] = #50000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #50000 1'b1;
	IN0[3] = #75000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #50000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #50000 1'b0;
	IN0[3] = #75000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #75000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #100000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #75000 1'b1;
	IN0[3] = #100000 1'b0;
	IN0[3] = #50000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #50000 1'b0;
	IN0[3] = #125000 1'b1;
	IN0[3] = #25000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #100000 1'b0;
	IN0[3] = #25000 1'b1;
	IN0[3] = #25000 1'b0;
end 
// IN0[ 2 ]
initial
begin
	IN0[2] = 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #25000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #300000 1'b0;
	IN0[2] = #50000 1'b1;
	IN0[2] = #100000 1'b0;
	IN0[2] = #75000 1'b1;
	IN0[2] = #25000 1'b0;
	IN0[2] = #125000 1'b1;
	IN0[2] = #125000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #50000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #50000 1'b0;
	IN0[2] = #50000 1'b1;
	IN0[2] = #25000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #25000 1'b0;
	IN0[2] = #75000 1'b1;
	IN0[2] = #50000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #25000 1'b0;
	IN0[2] = #50000 1'b1;
	IN0[2] = #50000 1'b0;
	IN0[2] = #100000 1'b1;
	IN0[2] = #50000 1'b0;
	IN0[2] = #50000 1'b1;
	IN0[2] = #75000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #25000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #25000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #25000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #25000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #75000 1'b0;
	IN0[2] = #75000 1'b1;
	IN0[2] = #75000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #25000 1'b0;
	IN0[2] = #50000 1'b1;
	IN0[2] = #25000 1'b0;
	IN0[2] = #100000 1'b1;
	IN0[2] = #125000 1'b0;
	IN0[2] = #50000 1'b1;
	IN0[2] = #75000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #100000 1'b0;
	IN0[2] = #75000 1'b1;
	IN0[2] = #50000 1'b0;
	IN0[2] = #25000 1'b1;
	IN0[2] = #50000 1'b0;
end 
// IN0[ 1 ]
initial
begin
	IN0[1] = 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #50000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #75000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #100000 1'b0;
	IN0[1] = #50000 1'b1;
	IN0[1] = #50000 1'b0;
	IN0[1] = #75000 1'b1;
	IN0[1] = #150000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #50000 1'b0;
	IN0[1] = #50000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #50000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #175000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #50000 1'b0;
	IN0[1] = #100000 1'b1;
	IN0[1] = #50000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #150000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #50000 1'b1;
	IN0[1] = #50000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #50000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #100000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #50000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #50000 1'b0;
	IN0[1] = #50000 1'b1;
	IN0[1] = #50000 1'b0;
	IN0[1] = #50000 1'b1;
	IN0[1] = #50000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #25000 1'b1;
	IN0[1] = #75000 1'b0;
	IN0[1] = #50000 1'b1;
	IN0[1] = #50000 1'b0;
	IN0[1] = #50000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #50000 1'b1;
	IN0[1] = #25000 1'b0;
	IN0[1] = #50000 1'b1;
end 
// IN0[ 0 ]
initial
begin
	IN0[0] = 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #50000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #75000 1'b1;
	IN0[0] = #125000 1'b0;
	IN0[0] = #150000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #50000 1'b1;
	IN0[0] = #75000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #75000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #150000 1'b0;
	IN0[0] = #75000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #100000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #150000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #50000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #75000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #125000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #50000 1'b1;
	IN0[0] = #75000 1'b0;
	IN0[0] = #50000 1'b1;
	IN0[0] = #75000 1'b0;
	IN0[0] = #100000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #125000 1'b1;
	IN0[0] = #75000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #25000 1'b1;
	IN0[0] = #75000 1'b0;
	IN0[0] = #50000 1'b1;
	IN0[0] = #25000 1'b0;
	IN0[0] = #150000 1'b1;
end 
// IN1[ 15 ]
initial
begin
	IN1[15] = 1'b1;
	IN1[15] = #250000 1'b0;
	IN1[15] = #100000 1'b1;
	IN1[15] = #200000 1'b0;
	IN1[15] = #50000 1'b1;
	IN1[15] = #50000 1'b0;
	IN1[15] = #300000 1'b1;
	IN1[15] = #50000 1'b0;
	IN1[15] = #150000 1'b1;
	IN1[15] = #50000 1'b0;
	IN1[15] = #250000 1'b1;
	IN1[15] = #400000 1'b0;
	IN1[15] = #150000 1'b1;
	IN1[15] = #100000 1'b0;
	IN1[15] = #300000 1'b1;
	IN1[15] = #50000 1'b0;
	IN1[15] = #100000 1'b1;
	IN1[15] = #50000 1'b0;
	IN1[15] = #100000 1'b1;
	IN1[15] = #100000 1'b0;
	IN1[15] = #50000 1'b1;
	IN1[15] = #50000 1'b0;
end 
// IN1[ 14 ]
initial
begin
	IN1[14] = 1'b0;
	IN1[14] = #100000 1'b1;
	IN1[14] = #50000 1'b0;
	IN1[14] = #50000 1'b1;
	IN1[14] = #50000 1'b0;
	IN1[14] = #300000 1'b1;
	IN1[14] = #50000 1'b0;
	IN1[14] = #100000 1'b1;
	IN1[14] = #250000 1'b0;
	IN1[14] = #150000 1'b1;
	IN1[14] = #100000 1'b0;
	IN1[14] = #50000 1'b1;
	IN1[14] = #100000 1'b0;
	IN1[14] = #50000 1'b1;
	IN1[14] = #50000 1'b0;
	IN1[14] = #100000 1'b1;
	IN1[14] = #100000 1'b0;
	IN1[14] = #50000 1'b1;
	IN1[14] = #100000 1'b0;
	IN1[14] = #50000 1'b1;
	IN1[14] = #50000 1'b0;
	IN1[14] = #50000 1'b1;
	IN1[14] = #50000 1'b0;
	IN1[14] = #50000 1'b1;
	IN1[14] = #100000 1'b0;
	IN1[14] = #50000 1'b1;
	IN1[14] = #50000 1'b0;
	IN1[14] = #50000 1'b1;
	IN1[14] = #100000 1'b0;
	IN1[14] = #100000 1'b1;
	IN1[14] = #50000 1'b0;
	IN1[14] = #50000 1'b1;
	IN1[14] = #50000 1'b0;
	IN1[14] = #100000 1'b1;
	IN1[14] = #100000 1'b0;
	IN1[14] = #50000 1'b1;
end 
// IN1[ 13 ]
initial
begin
	IN1[13] = 1'b1;
	IN1[13] = #50000 1'b0;
	IN1[13] = #50000 1'b1;
	IN1[13] = #50000 1'b0;
	IN1[13] = #100000 1'b1;
	IN1[13] = #100000 1'b0;
	IN1[13] = #100000 1'b1;
	IN1[13] = #100000 1'b0;
	IN1[13] = #200000 1'b1;
	IN1[13] = #50000 1'b0;
	IN1[13] = #100000 1'b1;
	IN1[13] = #100000 1'b0;
	IN1[13] = #200000 1'b1;
	IN1[13] = #150000 1'b0;
	IN1[13] = #50000 1'b1;
	IN1[13] = #100000 1'b0;
	IN1[13] = #150000 1'b1;
	IN1[13] = #50000 1'b0;
	IN1[13] = #50000 1'b1;
	IN1[13] = #100000 1'b0;
	IN1[13] = #100000 1'b1;
	IN1[13] = #200000 1'b0;
	IN1[13] = #150000 1'b1;
	IN1[13] = #100000 1'b0;
	IN1[13] = #50000 1'b1;
	IN1[13] = #200000 1'b0;
	IN1[13] = #50000 1'b1;
	IN1[13] = #50000 1'b0;
	IN1[13] = #100000 1'b1;
	IN1[13] = #50000 1'b0;
end 
// IN1[ 12 ]
initial
begin
	IN1[12] = 1'b0;
	IN1[12] = #50000 1'b1;
	IN1[12] = #50000 1'b0;
	IN1[12] = #100000 1'b1;
	IN1[12] = #50000 1'b0;
	IN1[12] = #50000 1'b1;
	IN1[12] = #100000 1'b0;
	IN1[12] = #50000 1'b1;
	IN1[12] = #100000 1'b0;
	IN1[12] = #50000 1'b1;
	IN1[12] = #50000 1'b0;
	IN1[12] = #350000 1'b1;
	IN1[12] = #50000 1'b0;
	IN1[12] = #50000 1'b1;
	IN1[12] = #50000 1'b0;
	IN1[12] = #50000 1'b1;
	IN1[12] = #150000 1'b0;
	IN1[12] = #100000 1'b1;
	IN1[12] = #50000 1'b0;
	IN1[12] = #50000 1'b1;
	IN1[12] = #50000 1'b0;
	IN1[12] = #150000 1'b1;
	IN1[12] = #250000 1'b0;
	IN1[12] = #50000 1'b1;
	IN1[12] = #50000 1'b0;
	IN1[12] = #50000 1'b1;
	IN1[12] = #50000 1'b0;
	IN1[12] = #50000 1'b1;
	IN1[12] = #50000 1'b0;
	IN1[12] = #100000 1'b1;
	IN1[12] = #250000 1'b0;
	IN1[12] = #150000 1'b1;
	IN1[12] = #50000 1'b0;
	IN1[12] = #50000 1'b1;
	IN1[12] = #50000 1'b0;
end 
// IN1[ 11 ]
initial
begin
	IN1[11] = 1'b0;
	IN1[11] = #150000 1'b1;
	IN1[11] = #50000 1'b0;
	IN1[11] = #50000 1'b1;
	IN1[11] = #100000 1'b0;
	IN1[11] = #50000 1'b1;
	IN1[11] = #300000 1'b0;
	IN1[11] = #150000 1'b1;
	IN1[11] = #100000 1'b0;
	IN1[11] = #50000 1'b1;
	IN1[11] = #50000 1'b0;
	IN1[11] = #100000 1'b1;
	IN1[11] = #350000 1'b0;
	IN1[11] = #100000 1'b1;
	IN1[11] = #150000 1'b0;
	IN1[11] = #50000 1'b1;
	IN1[11] = #50000 1'b0;
	IN1[11] = #50000 1'b1;
	IN1[11] = #50000 1'b0;
	IN1[11] = #50000 1'b1;
	IN1[11] = #50000 1'b0;
	IN1[11] = #50000 1'b1;
	IN1[11] = #150000 1'b0;
	IN1[11] = #100000 1'b1;
	IN1[11] = #100000 1'b0;
	IN1[11] = #50000 1'b1;
	IN1[11] = #50000 1'b0;
	IN1[11] = #50000 1'b1;
	IN1[11] = #150000 1'b0;
	IN1[11] = #50000 1'b1;
	IN1[11] = #50000 1'b0;
	IN1[11] = #50000 1'b1;
end 
// IN1[ 10 ]
initial
begin
	IN1[10] = 1'b1;
	IN1[10] = #100000 1'b0;
	IN1[10] = #50000 1'b1;
	IN1[10] = #150000 1'b0;
	IN1[10] = #200000 1'b1;
	IN1[10] = #50000 1'b0;
	IN1[10] = #50000 1'b1;
	IN1[10] = #100000 1'b0;
	IN1[10] = #100000 1'b1;
	IN1[10] = #100000 1'b0;
	IN1[10] = #50000 1'b1;
	IN1[10] = #150000 1'b0;
	IN1[10] = #100000 1'b1;
	IN1[10] = #100000 1'b0;
	IN1[10] = #150000 1'b1;
	IN1[10] = #50000 1'b0;
	IN1[10] = #50000 1'b1;
	IN1[10] = #50000 1'b0;
	IN1[10] = #50000 1'b1;
	IN1[10] = #150000 1'b0;
	IN1[10] = #100000 1'b1;
	IN1[10] = #100000 1'b0;
	IN1[10] = #150000 1'b1;
	IN1[10] = #50000 1'b0;
	IN1[10] = #50000 1'b1;
	IN1[10] = #200000 1'b0;
	IN1[10] = #50000 1'b1;
	IN1[10] = #50000 1'b0;
	IN1[10] = #100000 1'b1;
	IN1[10] = #50000 1'b0;
	IN1[10] = #50000 1'b1;
	IN1[10] = #100000 1'b0;
	IN1[10] = #50000 1'b1;
	IN1[10] = #50000 1'b0;
end 
// IN1[ 9 ]
initial
begin
	IN1[9] = 1'b0;
	IN1[9] = #50000 1'b1;
	IN1[9] = #200000 1'b0;
	IN1[9] = #100000 1'b1;
	IN1[9] = #150000 1'b0;
	IN1[9] = #50000 1'b1;
	IN1[9] = #50000 1'b0;
	IN1[9] = #150000 1'b1;
	IN1[9] = #50000 1'b0;
	IN1[9] = #200000 1'b1;
	IN1[9] = #50000 1'b0;
	IN1[9] = #50000 1'b1;
	IN1[9] = #50000 1'b0;
	IN1[9] = #100000 1'b1;
	IN1[9] = #100000 1'b0;
	IN1[9] = #100000 1'b1;
	IN1[9] = #50000 1'b0;
	IN1[9] = #100000 1'b1;
	IN1[9] = #50000 1'b0;
	IN1[9] = #50000 1'b1;
	IN1[9] = #50000 1'b0;
	IN1[9] = #100000 1'b1;
	IN1[9] = #50000 1'b0;
	IN1[9] = #250000 1'b1;
	IN1[9] = #150000 1'b0;
	IN1[9] = #50000 1'b1;
	IN1[9] = #150000 1'b0;
	IN1[9] = #200000 1'b1;
	IN1[9] = #100000 1'b0;
	IN1[9] = #100000 1'b1;
end 
// IN1[ 8 ]
initial
begin
	IN1[8] = 1'b0;
	IN1[8] = #150000 1'b1;
	IN1[8] = #50000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #50000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #300000 1'b0;
	IN1[8] = #100000 1'b1;
	IN1[8] = #50000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #100000 1'b0;
	IN1[8] = #200000 1'b1;
	IN1[8] = #150000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #100000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #200000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #200000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #100000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #50000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #50000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #50000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #100000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #50000 1'b0;
	IN1[8] = #100000 1'b1;
	IN1[8] = #50000 1'b0;
	IN1[8] = #50000 1'b1;
	IN1[8] = #50000 1'b0;
end 
// IN1[ 7 ]
initial
begin
	IN1[7] = 1'b1;
	IN1[7] = #50000 1'b0;
	IN1[7] = #250000 1'b1;
	IN1[7] = #100000 1'b0;
	IN1[7] = #50000 1'b1;
	IN1[7] = #50000 1'b0;
	IN1[7] = #150000 1'b1;
	IN1[7] = #50000 1'b0;
	IN1[7] = #200000 1'b1;
	IN1[7] = #200000 1'b0;
	IN1[7] = #100000 1'b1;
	IN1[7] = #100000 1'b0;
	IN1[7] = #100000 1'b1;
	IN1[7] = #50000 1'b0;
	IN1[7] = #250000 1'b1;
	IN1[7] = #50000 1'b0;
	IN1[7] = #50000 1'b1;
	IN1[7] = #50000 1'b0;
	IN1[7] = #50000 1'b1;
	IN1[7] = #100000 1'b0;
	IN1[7] = #300000 1'b1;
	IN1[7] = #100000 1'b0;
	IN1[7] = #150000 1'b1;
	IN1[7] = #100000 1'b0;
	IN1[7] = #50000 1'b1;
	IN1[7] = #50000 1'b0;
	IN1[7] = #150000 1'b1;
	IN1[7] = #50000 1'b0;
end 
// IN1[ 6 ]
initial
begin
	IN1[6] = 1'b0;
	IN1[6] = #200000 1'b1;
	IN1[6] = #100000 1'b0;
	IN1[6] = #50000 1'b1;
	IN1[6] = #50000 1'b0;
	IN1[6] = #50000 1'b1;
	IN1[6] = #50000 1'b0;
	IN1[6] = #50000 1'b1;
	IN1[6] = #50000 1'b0;
	IN1[6] = #150000 1'b1;
	IN1[6] = #100000 1'b0;
	IN1[6] = #50000 1'b1;
	IN1[6] = #100000 1'b0;
	IN1[6] = #50000 1'b1;
	IN1[6] = #300000 1'b0;
	IN1[6] = #200000 1'b1;
	IN1[6] = #200000 1'b0;
	IN1[6] = #100000 1'b1;
	IN1[6] = #100000 1'b0;
	IN1[6] = #100000 1'b1;
	IN1[6] = #200000 1'b0;
	IN1[6] = #200000 1'b1;
	IN1[6] = #100000 1'b0;
	IN1[6] = #150000 1'b1;
end 
// IN1[ 5 ]
initial
begin
	IN1[5] = 1'b0;
	IN1[5] = #150000 1'b1;
	IN1[5] = #100000 1'b0;
	IN1[5] = #150000 1'b1;
	IN1[5] = #250000 1'b0;
	IN1[5] = #50000 1'b1;
	IN1[5] = #200000 1'b0;
	IN1[5] = #50000 1'b1;
	IN1[5] = #100000 1'b0;
	IN1[5] = #100000 1'b1;
	IN1[5] = #50000 1'b0;
	IN1[5] = #50000 1'b1;
	IN1[5] = #100000 1'b0;
	IN1[5] = #50000 1'b1;
	IN1[5] = #100000 1'b0;
	IN1[5] = #50000 1'b1;
	IN1[5] = #50000 1'b0;
	IN1[5] = #50000 1'b1;
	IN1[5] = #300000 1'b0;
	IN1[5] = #150000 1'b1;
	IN1[5] = #100000 1'b0;
	IN1[5] = #50000 1'b1;
	IN1[5] = #100000 1'b0;
	IN1[5] = #150000 1'b1;
	IN1[5] = #100000 1'b0;
	IN1[5] = #100000 1'b1;
	IN1[5] = #50000 1'b0;
	IN1[5] = #50000 1'b1;
	IN1[5] = #150000 1'b0;
end 
// IN1[ 4 ]
initial
begin
	IN1[4] = 1'b0;
	IN1[4] = #50000 1'b1;
	IN1[4] = #50000 1'b0;
	IN1[4] = #50000 1'b1;
	IN1[4] = #400000 1'b0;
	IN1[4] = #100000 1'b1;
	IN1[4] = #100000 1'b0;
	IN1[4] = #50000 1'b1;
	IN1[4] = #50000 1'b0;
	IN1[4] = #50000 1'b1;
	IN1[4] = #50000 1'b0;
	IN1[4] = #150000 1'b1;
	IN1[4] = #50000 1'b0;
	IN1[4] = #50000 1'b1;
	IN1[4] = #250000 1'b0;
	IN1[4] = #50000 1'b1;
	IN1[4] = #100000 1'b0;
	IN1[4] = #100000 1'b1;
	IN1[4] = #200000 1'b0;
	IN1[4] = #100000 1'b1;
	IN1[4] = #50000 1'b0;
	IN1[4] = #50000 1'b1;
	IN1[4] = #50000 1'b0;
	IN1[4] = #100000 1'b1;
	IN1[4] = #50000 1'b0;
	IN1[4] = #50000 1'b1;
	IN1[4] = #50000 1'b0;
	IN1[4] = #50000 1'b1;
	IN1[4] = #50000 1'b0;
	IN1[4] = #100000 1'b1;
	IN1[4] = #50000 1'b0;
	IN1[4] = #200000 1'b1;
	IN1[4] = #50000 1'b0;
end 
// IN1[ 3 ]
initial
begin
	IN1[3] = 1'b0;
	IN1[3] = #50000 1'b1;
	IN1[3] = #50000 1'b0;
	IN1[3] = #50000 1'b1;
	IN1[3] = #50000 1'b0;
	IN1[3] = #350000 1'b1;
	IN1[3] = #50000 1'b0;
	IN1[3] = #100000 1'b1;
	IN1[3] = #50000 1'b0;
	IN1[3] = #150000 1'b1;
	IN1[3] = #50000 1'b0;
	IN1[3] = #150000 1'b1;
	IN1[3] = #200000 1'b0;
	IN1[3] = #50000 1'b1;
	IN1[3] = #50000 1'b0;
	IN1[3] = #50000 1'b1;
	IN1[3] = #50000 1'b0;
	IN1[3] = #100000 1'b1;
	IN1[3] = #150000 1'b0;
	IN1[3] = #250000 1'b1;
	IN1[3] = #150000 1'b0;
	IN1[3] = #150000 1'b1;
	IN1[3] = #50000 1'b0;
	IN1[3] = #100000 1'b1;
	IN1[3] = #50000 1'b0;
	IN1[3] = #50000 1'b1;
	IN1[3] = #100000 1'b0;
	IN1[3] = #100000 1'b1;
	IN1[3] = #50000 1'b0;
	IN1[3] = #150000 1'b1;
end 
// IN1[ 2 ]
initial
begin
	IN1[2] = 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #50000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #200000 1'b0;
	IN1[2] = #150000 1'b1;
	IN1[2] = #100000 1'b0;
	IN1[2] = #100000 1'b1;
	IN1[2] = #300000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #50000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #150000 1'b0;
	IN1[2] = #200000 1'b1;
	IN1[2] = #50000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #50000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #50000 1'b0;
	IN1[2] = #150000 1'b1;
	IN1[2] = #200000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #150000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #50000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #50000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #150000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #100000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #50000 1'b0;
end 
// IN1[ 1 ]
initial
begin
	IN1[1] = 1'b1;
	IN1[1] = #150000 1'b0;
	IN1[1] = #50000 1'b1;
	IN1[1] = #150000 1'b0;
	IN1[1] = #150000 1'b1;
	IN1[1] = #150000 1'b0;
	IN1[1] = #300000 1'b1;
	IN1[1] = #50000 1'b0;
	IN1[1] = #150000 1'b1;
	IN1[1] = #50000 1'b0;
	IN1[1] = #50000 1'b1;
	IN1[1] = #50000 1'b0;
	IN1[1] = #50000 1'b1;
	IN1[1] = #50000 1'b0;
	IN1[1] = #50000 1'b1;
	IN1[1] = #200000 1'b0;
	IN1[1] = #100000 1'b1;
	IN1[1] = #50000 1'b0;
	IN1[1] = #50000 1'b1;
	IN1[1] = #150000 1'b0;
	IN1[1] = #100000 1'b1;
	IN1[1] = #50000 1'b0;
	IN1[1] = #100000 1'b1;
	IN1[1] = #150000 1'b0;
	IN1[1] = #50000 1'b1;
	IN1[1] = #150000 1'b0;
	IN1[1] = #50000 1'b1;
	IN1[1] = #100000 1'b0;
	IN1[1] = #50000 1'b1;
	IN1[1] = #150000 1'b0;
end 
// IN1[ 0 ]
initial
begin
	IN1[0] = 1'b0;
	IN1[0] = #50000 1'b1;
	IN1[0] = #100000 1'b0;
	IN1[0] = #250000 1'b1;
	IN1[0] = #100000 1'b0;
	IN1[0] = #50000 1'b1;
	IN1[0] = #50000 1'b0;
	IN1[0] = #150000 1'b1;
	IN1[0] = #150000 1'b0;
	IN1[0] = #150000 1'b1;
	IN1[0] = #100000 1'b0;
	IN1[0] = #300000 1'b1;
	IN1[0] = #50000 1'b0;
	IN1[0] = #100000 1'b1;
	IN1[0] = #200000 1'b0;
	IN1[0] = #100000 1'b1;
	IN1[0] = #100000 1'b0;
	IN1[0] = #250000 1'b1;
	IN1[0] = #100000 1'b0;
	IN1[0] = #150000 1'b1;
	IN1[0] = #50000 1'b0;
	IN1[0] = #400000 1'b1;
end 
// IN2[ 15 ]
initial
begin
	IN2[15] = 1'b1;
	IN2[15] = #50000 1'b0;
	IN2[15] = #100000 1'b1;
	IN2[15] = #350000 1'b0;
	IN2[15] = #100000 1'b1;
	IN2[15] = #200000 1'b0;
	IN2[15] = #150000 1'b1;
	IN2[15] = #50000 1'b0;
	IN2[15] = #50000 1'b1;
	IN2[15] = #50000 1'b0;
	IN2[15] = #150000 1'b1;
	IN2[15] = #200000 1'b0;
	IN2[15] = #50000 1'b1;
	IN2[15] = #350000 1'b0;
	IN2[15] = #50000 1'b1;
	IN2[15] = #50000 1'b0;
	IN2[15] = #50000 1'b1;
	IN2[15] = #300000 1'b0;
	IN2[15] = #50000 1'b1;
	IN2[15] = #150000 1'b0;
	IN2[15] = #100000 1'b1;
	IN2[15] = #50000 1'b0;
	IN2[15] = #100000 1'b1;
	IN2[15] = #150000 1'b0;
	IN2[15] = #50000 1'b1;
end 
// IN2[ 14 ]
initial
begin
	IN2[14] = 1'b0;
	IN2[14] = #50000 1'b1;
	IN2[14] = #200000 1'b0;
	IN2[14] = #100000 1'b1;
	IN2[14] = #250000 1'b0;
	IN2[14] = #50000 1'b1;
	IN2[14] = #50000 1'b0;
	IN2[14] = #50000 1'b1;
	IN2[14] = #100000 1'b0;
	IN2[14] = #200000 1'b1;
	IN2[14] = #100000 1'b0;
	IN2[14] = #150000 1'b1;
	IN2[14] = #100000 1'b0;
	IN2[14] = #50000 1'b1;
	IN2[14] = #50000 1'b0;
	IN2[14] = #100000 1'b1;
	IN2[14] = #50000 1'b0;
	IN2[14] = #50000 1'b1;
	IN2[14] = #150000 1'b0;
	IN2[14] = #50000 1'b1;
	IN2[14] = #50000 1'b0;
	IN2[14] = #150000 1'b1;
	IN2[14] = #100000 1'b0;
	IN2[14] = #50000 1'b1;
	IN2[14] = #200000 1'b0;
	IN2[14] = #100000 1'b1;
	IN2[14] = #100000 1'b0;
	IN2[14] = #50000 1'b1;
	IN2[14] = #50000 1'b0;
	IN2[14] = #100000 1'b1;
	IN2[14] = #50000 1'b0;
	IN2[14] = #50000 1'b1;
end 
// IN2[ 13 ]
initial
begin
	IN2[13] = 1'b1;
	IN2[13] = #200000 1'b0;
	IN2[13] = #50000 1'b1;
	IN2[13] = #50000 1'b0;
	IN2[13] = #50000 1'b1;
	IN2[13] = #250000 1'b0;
	IN2[13] = #50000 1'b1;
	IN2[13] = #50000 1'b0;
	IN2[13] = #50000 1'b1;
	IN2[13] = #50000 1'b0;
	IN2[13] = #50000 1'b1;
	IN2[13] = #50000 1'b0;
	IN2[13] = #50000 1'b1;
	IN2[13] = #150000 1'b0;
	IN2[13] = #50000 1'b1;
	IN2[13] = #50000 1'b0;
	IN2[13] = #200000 1'b1;
	IN2[13] = #150000 1'b0;
	IN2[13] = #50000 1'b1;
	IN2[13] = #100000 1'b0;
	IN2[13] = #400000 1'b1;
	IN2[13] = #150000 1'b0;
	IN2[13] = #200000 1'b1;
	IN2[13] = #50000 1'b0;
	IN2[13] = #50000 1'b1;
	IN2[13] = #50000 1'b0;
	IN2[13] = #50000 1'b1;
	IN2[13] = #50000 1'b0;
	IN2[13] = #50000 1'b1;
	IN2[13] = #100000 1'b0;
	IN2[13] = #50000 1'b1;
end 
// IN2[ 12 ]
initial
begin
	IN2[12] = 1'b0;
	IN2[12] = #150000 1'b1;
	IN2[12] = #150000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #50000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #50000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #100000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #200000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #150000 1'b0;
	IN2[12] = #100000 1'b1;
	IN2[12] = #50000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #50000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #50000 1'b0;
	IN2[12] = #100000 1'b1;
	IN2[12] = #50000 1'b0;
	IN2[12] = #200000 1'b1;
	IN2[12] = #100000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #50000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #50000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #200000 1'b0;
	IN2[12] = #100000 1'b1;
	IN2[12] = #50000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #50000 1'b0;
	IN2[12] = #50000 1'b1;
	IN2[12] = #50000 1'b0;
	IN2[12] = #50000 1'b1;
end 
// IN2[ 11 ]
initial
begin
	IN2[11] = 1'b1;
	IN2[11] = #50000 1'b0;
	IN2[11] = #50000 1'b1;
	IN2[11] = #150000 1'b0;
	IN2[11] = #50000 1'b1;
	IN2[11] = #50000 1'b0;
	IN2[11] = #50000 1'b1;
	IN2[11] = #100000 1'b0;
	IN2[11] = #150000 1'b1;
	IN2[11] = #50000 1'b0;
	IN2[11] = #200000 1'b1;
	IN2[11] = #50000 1'b0;
	IN2[11] = #200000 1'b1;
	IN2[11] = #150000 1'b0;
	IN2[11] = #200000 1'b1;
	IN2[11] = #50000 1'b0;
	IN2[11] = #250000 1'b1;
	IN2[11] = #50000 1'b0;
	IN2[11] = #150000 1'b1;
	IN2[11] = #100000 1'b0;
	IN2[11] = #50000 1'b1;
	IN2[11] = #200000 1'b0;
	IN2[11] = #50000 1'b1;
	IN2[11] = #100000 1'b0;
	IN2[11] = #150000 1'b1;
	IN2[11] = #100000 1'b0;
	IN2[11] = #50000 1'b1;
	IN2[11] = #50000 1'b0;
	IN2[11] = #100000 1'b1;
end 
// IN2[ 10 ]
initial
begin
	IN2[10] = 1'b0;
	IN2[10] = #100000 1'b1;
	IN2[10] = #50000 1'b0;
	IN2[10] = #200000 1'b1;
	IN2[10] = #50000 1'b0;
	IN2[10] = #50000 1'b1;
	IN2[10] = #150000 1'b0;
	IN2[10] = #100000 1'b1;
	IN2[10] = #100000 1'b0;
	IN2[10] = #100000 1'b1;
	IN2[10] = #100000 1'b0;
	IN2[10] = #150000 1'b1;
	IN2[10] = #100000 1'b0;
	IN2[10] = #50000 1'b1;
	IN2[10] = #100000 1'b0;
	IN2[10] = #100000 1'b1;
	IN2[10] = #150000 1'b0;
	IN2[10] = #50000 1'b1;
	IN2[10] = #50000 1'b0;
	IN2[10] = #50000 1'b1;
	IN2[10] = #50000 1'b0;
	IN2[10] = #100000 1'b1;
	IN2[10] = #50000 1'b0;
	IN2[10] = #300000 1'b1;
	IN2[10] = #100000 1'b0;
	IN2[10] = #100000 1'b1;
	IN2[10] = #100000 1'b0;
	IN2[10] = #50000 1'b1;
	IN2[10] = #100000 1'b0;
	IN2[10] = #150000 1'b1;
	IN2[10] = #50000 1'b0;
end 
// IN2[ 9 ]
initial
begin
	IN2[9] = 1'b1;
	IN2[9] = #50000 1'b0;
	IN2[9] = #50000 1'b1;
	IN2[9] = #50000 1'b0;
	IN2[9] = #50000 1'b1;
	IN2[9] = #50000 1'b0;
	IN2[9] = #100000 1'b1;
	IN2[9] = #50000 1'b0;
	IN2[9] = #200000 1'b1;
	IN2[9] = #100000 1'b0;
	IN2[9] = #100000 1'b1;
	IN2[9] = #50000 1'b0;
	IN2[9] = #200000 1'b1;
	IN2[9] = #150000 1'b0;
	IN2[9] = #50000 1'b1;
	IN2[9] = #50000 1'b0;
	IN2[9] = #100000 1'b1;
	IN2[9] = #150000 1'b0;
	IN2[9] = #50000 1'b1;
	IN2[9] = #100000 1'b0;
	IN2[9] = #50000 1'b1;
	IN2[9] = #50000 1'b0;
	IN2[9] = #350000 1'b1;
	IN2[9] = #100000 1'b0;
	IN2[9] = #50000 1'b1;
	IN2[9] = #50000 1'b0;
	IN2[9] = #100000 1'b1;
	IN2[9] = #100000 1'b0;
	IN2[9] = #100000 1'b1;
	IN2[9] = #150000 1'b0;
end 
// IN2[ 8 ]
initial
begin
	IN2[8] = 1'b0;
	IN2[8] = #50000 1'b1;
	IN2[8] = #100000 1'b0;
	IN2[8] = #100000 1'b1;
	IN2[8] = #150000 1'b0;
	IN2[8] = #100000 1'b1;
	IN2[8] = #50000 1'b0;
	IN2[8] = #100000 1'b1;
	IN2[8] = #50000 1'b0;
	IN2[8] = #150000 1'b1;
	IN2[8] = #50000 1'b0;
	IN2[8] = #150000 1'b1;
	IN2[8] = #50000 1'b0;
	IN2[8] = #300000 1'b1;
	IN2[8] = #200000 1'b0;
	IN2[8] = #150000 1'b1;
	IN2[8] = #100000 1'b0;
	IN2[8] = #100000 1'b1;
	IN2[8] = #100000 1'b0;
	IN2[8] = #200000 1'b1;
	IN2[8] = #150000 1'b0;
	IN2[8] = #100000 1'b1;
	IN2[8] = #150000 1'b0;
	IN2[8] = #50000 1'b1;
	IN2[8] = #50000 1'b0;
	IN2[8] = #50000 1'b1;
	IN2[8] = #50000 1'b0;
	IN2[8] = #100000 1'b1;
end 
// IN2[ 7 ]
initial
begin
	IN2[7] = 1'b1;
	IN2[7] = #150000 1'b0;
	IN2[7] = #100000 1'b1;
	IN2[7] = #50000 1'b0;
	IN2[7] = #100000 1'b1;
	IN2[7] = #100000 1'b0;
	IN2[7] = #100000 1'b1;
	IN2[7] = #200000 1'b0;
	IN2[7] = #50000 1'b1;
	IN2[7] = #50000 1'b0;
	IN2[7] = #50000 1'b1;
	IN2[7] = #100000 1'b0;
	IN2[7] = #100000 1'b1;
	IN2[7] = #50000 1'b0;
	IN2[7] = #50000 1'b1;
	IN2[7] = #150000 1'b0;
	IN2[7] = #100000 1'b1;
	IN2[7] = #150000 1'b0;
	IN2[7] = #50000 1'b1;
	IN2[7] = #50000 1'b0;
	IN2[7] = #50000 1'b1;
	IN2[7] = #50000 1'b0;
	IN2[7] = #50000 1'b1;
	IN2[7] = #50000 1'b0;
	IN2[7] = #100000 1'b1;
	IN2[7] = #50000 1'b0;
	IN2[7] = #50000 1'b1;
	IN2[7] = #100000 1'b0;
	IN2[7] = #250000 1'b1;
	IN2[7] = #150000 1'b0;
	IN2[7] = #200000 1'b1;
end 
// IN2[ 6 ]
initial
begin
	IN2[6] = 1'b0;
	IN2[6] = #100000 1'b1;
	IN2[6] = #100000 1'b0;
	IN2[6] = #100000 1'b1;
	IN2[6] = #150000 1'b0;
	IN2[6] = #150000 1'b1;
	IN2[6] = #50000 1'b0;
	IN2[6] = #50000 1'b1;
	IN2[6] = #100000 1'b0;
	IN2[6] = #50000 1'b1;
	IN2[6] = #50000 1'b0;
	IN2[6] = #50000 1'b1;
	IN2[6] = #50000 1'b0;
	IN2[6] = #150000 1'b1;
	IN2[6] = #50000 1'b0;
	IN2[6] = #100000 1'b1;
	IN2[6] = #150000 1'b0;
	IN2[6] = #50000 1'b1;
	IN2[6] = #250000 1'b0;
	IN2[6] = #100000 1'b1;
	IN2[6] = #100000 1'b0;
	IN2[6] = #250000 1'b1;
	IN2[6] = #150000 1'b0;
	IN2[6] = #50000 1'b1;
	IN2[6] = #200000 1'b0;
	IN2[6] = #50000 1'b1;
end 
// IN2[ 5 ]
initial
begin
	IN2[5] = 1'b1;
	IN2[5] = #150000 1'b0;
	IN2[5] = #50000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #100000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #50000 1'b1;
	IN2[5] = #100000 1'b0;
	IN2[5] = #200000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #150000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #150000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #100000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #50000 1'b1;
	IN2[5] = #150000 1'b0;
	IN2[5] = #50000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #50000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #100000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #100000 1'b1;
	IN2[5] = #100000 1'b0;
	IN2[5] = #100000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #50000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #100000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #50000 1'b1;
	IN2[5] = #50000 1'b0;
	IN2[5] = #100000 1'b1;
	IN2[5] = #50000 1'b0;
end 
// IN2[ 4 ]
initial
begin
	IN2[4] = 1'b1;
	IN2[4] = #50000 1'b0;
	IN2[4] = #50000 1'b1;
	IN2[4] = #50000 1'b0;
	IN2[4] = #100000 1'b1;
	IN2[4] = #50000 1'b0;
	IN2[4] = #50000 1'b1;
	IN2[4] = #50000 1'b0;
	IN2[4] = #100000 1'b1;
	IN2[4] = #50000 1'b0;
	IN2[4] = #50000 1'b1;
	IN2[4] = #50000 1'b0;
	IN2[4] = #50000 1'b1;
	IN2[4] = #150000 1'b0;
	IN2[4] = #250000 1'b1;
	IN2[4] = #200000 1'b0;
	IN2[4] = #50000 1'b1;
	IN2[4] = #50000 1'b0;
	IN2[4] = #50000 1'b1;
	IN2[4] = #50000 1'b0;
	IN2[4] = #100000 1'b1;
	IN2[4] = #50000 1'b0;
	IN2[4] = #50000 1'b1;
	IN2[4] = #50000 1'b0;
	IN2[4] = #50000 1'b1;
	IN2[4] = #50000 1'b0;
	IN2[4] = #150000 1'b1;
	IN2[4] = #200000 1'b0;
	IN2[4] = #400000 1'b1;
	IN2[4] = #150000 1'b0;
	IN2[4] = #50000 1'b1;
	IN2[4] = #100000 1'b0;
end 
// IN2[ 3 ]
initial
begin
	IN2[3] = 1'b1;
	IN2[3] = #50000 1'b0;
	IN2[3] = #150000 1'b1;
	IN2[3] = #50000 1'b0;
	IN2[3] = #150000 1'b1;
	IN2[3] = #250000 1'b0;
	IN2[3] = #50000 1'b1;
	IN2[3] = #150000 1'b0;
	IN2[3] = #50000 1'b1;
	IN2[3] = #50000 1'b0;
	IN2[3] = #100000 1'b1;
	IN2[3] = #50000 1'b0;
	IN2[3] = #50000 1'b1;
	IN2[3] = #50000 1'b0;
	IN2[3] = #150000 1'b1;
	IN2[3] = #50000 1'b0;
	IN2[3] = #50000 1'b1;
	IN2[3] = #100000 1'b0;
	IN2[3] = #100000 1'b1;
	IN2[3] = #50000 1'b0;
	IN2[3] = #250000 1'b1;
	IN2[3] = #50000 1'b0;
	IN2[3] = #150000 1'b1;
	IN2[3] = #50000 1'b0;
	IN2[3] = #150000 1'b1;
	IN2[3] = #50000 1'b0;
	IN2[3] = #150000 1'b1;
	IN2[3] = #100000 1'b0;
	IN2[3] = #50000 1'b1;
	IN2[3] = #50000 1'b0;
	IN2[3] = #50000 1'b1;
end 
// IN2[ 2 ]
initial
begin
	IN2[2] = 1'b1;
	IN2[2] = #100000 1'b0;
	IN2[2] = #50000 1'b1;
	IN2[2] = #50000 1'b0;
	IN2[2] = #100000 1'b1;
	IN2[2] = #200000 1'b0;
	IN2[2] = #50000 1'b1;
	IN2[2] = #50000 1'b0;
	IN2[2] = #100000 1'b1;
	IN2[2] = #100000 1'b0;
	IN2[2] = #50000 1'b1;
	IN2[2] = #50000 1'b0;
	IN2[2] = #100000 1'b1;
	IN2[2] = #50000 1'b0;
	IN2[2] = #200000 1'b1;
	IN2[2] = #100000 1'b0;
	IN2[2] = #50000 1'b1;
	IN2[2] = #200000 1'b0;
	IN2[2] = #100000 1'b1;
	IN2[2] = #50000 1'b0;
	IN2[2] = #50000 1'b1;
	IN2[2] = #100000 1'b0;
	IN2[2] = #150000 1'b1;
	IN2[2] = #50000 1'b0;
	IN2[2] = #150000 1'b1;
	IN2[2] = #100000 1'b0;
	IN2[2] = #100000 1'b1;
	IN2[2] = #100000 1'b0;
	IN2[2] = #150000 1'b1;
	IN2[2] = #50000 1'b0;
	IN2[2] = #100000 1'b1;
	IN2[2] = #50000 1'b0;
end 
// IN2[ 1 ]
initial
begin
	IN2[1] = 1'b1;
	IN2[1] = #50000 1'b0;
	IN2[1] = #150000 1'b1;
	IN2[1] = #100000 1'b0;
	IN2[1] = #50000 1'b1;
	IN2[1] = #100000 1'b0;
	IN2[1] = #100000 1'b1;
	IN2[1] = #50000 1'b0;
	IN2[1] = #50000 1'b1;
	IN2[1] = #50000 1'b0;
	IN2[1] = #100000 1'b1;
	IN2[1] = #50000 1'b0;
	IN2[1] = #100000 1'b1;
	IN2[1] = #100000 1'b0;
	IN2[1] = #50000 1'b1;
	IN2[1] = #100000 1'b0;
	IN2[1] = #100000 1'b1;
	IN2[1] = #50000 1'b0;
	IN2[1] = #250000 1'b1;
	IN2[1] = #100000 1'b0;
	IN2[1] = #100000 1'b1;
	IN2[1] = #50000 1'b0;
	IN2[1] = #100000 1'b1;
	IN2[1] = #200000 1'b0;
	IN2[1] = #100000 1'b1;
	IN2[1] = #200000 1'b0;
	IN2[1] = #100000 1'b1;
	IN2[1] = #50000 1'b0;
	IN2[1] = #100000 1'b1;
	IN2[1] = #50000 1'b0;
	IN2[1] = #50000 1'b1;
	IN2[1] = #50000 1'b0;
	IN2[1] = #50000 1'b1;
end 
// IN2[ 0 ]
initial
begin
	IN2[0] = 1'b0;
	IN2[0] = #150000 1'b1;
	IN2[0] = #50000 1'b0;
	IN2[0] = #50000 1'b1;
	IN2[0] = #50000 1'b0;
	IN2[0] = #100000 1'b1;
	IN2[0] = #200000 1'b0;
	IN2[0] = #100000 1'b1;
	IN2[0] = #50000 1'b0;
	IN2[0] = #100000 1'b1;
	IN2[0] = #100000 1'b0;
	IN2[0] = #50000 1'b1;
	IN2[0] = #100000 1'b0;
	IN2[0] = #50000 1'b1;
	IN2[0] = #250000 1'b0;
	IN2[0] = #50000 1'b1;
	IN2[0] = #50000 1'b0;
	IN2[0] = #150000 1'b1;
	IN2[0] = #50000 1'b0;
	IN2[0] = #250000 1'b1;
	IN2[0] = #100000 1'b0;
	IN2[0] = #50000 1'b1;
	IN2[0] = #50000 1'b0;
	IN2[0] = #50000 1'b1;
	IN2[0] = #50000 1'b0;
	IN2[0] = #100000 1'b1;
	IN2[0] = #100000 1'b0;
	IN2[0] = #50000 1'b1;
	IN2[0] = #50000 1'b0;
	IN2[0] = #100000 1'b1;
	IN2[0] = #50000 1'b0;
	IN2[0] = #150000 1'b1;
end 
// IN3[ 15 ]
initial
begin
	IN3[15] = 1'b1;
	IN3[15] = #100000 1'b0;
	IN3[15] = #200000 1'b1;
	IN3[15] = #250000 1'b0;
	IN3[15] = #100000 1'b1;
	IN3[15] = #50000 1'b0;
	IN3[15] = #100000 1'b1;
	IN3[15] = #100000 1'b0;
	IN3[15] = #50000 1'b1;
	IN3[15] = #200000 1'b0;
	IN3[15] = #50000 1'b1;
	IN3[15] = #150000 1'b0;
	IN3[15] = #50000 1'b1;
	IN3[15] = #50000 1'b0;
	IN3[15] = #200000 1'b1;
	IN3[15] = #50000 1'b0;
	IN3[15] = #50000 1'b1;
	IN3[15] = #100000 1'b0;
	IN3[15] = #100000 1'b1;
	IN3[15] = #50000 1'b0;
	IN3[15] = #100000 1'b1;
	IN3[15] = #50000 1'b0;
	IN3[15] = #150000 1'b1;
	IN3[15] = #50000 1'b0;
	IN3[15] = #50000 1'b1;
	IN3[15] = #100000 1'b0;
	IN3[15] = #150000 1'b1;
	IN3[15] = #200000 1'b0;
	IN3[15] = #50000 1'b1;
	IN3[15] = #50000 1'b0;
end 
// IN3[ 14 ]
initial
begin
	IN3[14] = 1'b0;
	IN3[14] = #350000 1'b1;
	IN3[14] = #100000 1'b0;
	IN3[14] = #100000 1'b1;
	IN3[14] = #150000 1'b0;
	IN3[14] = #50000 1'b1;
	IN3[14] = #50000 1'b0;
	IN3[14] = #150000 1'b1;
	IN3[14] = #50000 1'b0;
	IN3[14] = #50000 1'b1;
	IN3[14] = #150000 1'b0;
	IN3[14] = #300000 1'b1;
	IN3[14] = #50000 1'b0;
	IN3[14] = #50000 1'b1;
	IN3[14] = #200000 1'b0;
	IN3[14] = #100000 1'b1;
	IN3[14] = #50000 1'b0;
	IN3[14] = #50000 1'b1;
	IN3[14] = #100000 1'b0;
	IN3[14] = #50000 1'b1;
	IN3[14] = #50000 1'b0;
	IN3[14] = #50000 1'b1;
	IN3[14] = #100000 1'b0;
	IN3[14] = #200000 1'b1;
	IN3[14] = #100000 1'b0;
	IN3[14] = #100000 1'b1;
	IN3[14] = #50000 1'b0;
	IN3[14] = #100000 1'b1;
end 
// IN3[ 13 ]
initial
begin
	IN3[13] = 1'b0;
	IN3[13] = #150000 1'b1;
	IN3[13] = #50000 1'b0;
	IN3[13] = #250000 1'b1;
	IN3[13] = #150000 1'b0;
	IN3[13] = #50000 1'b1;
	IN3[13] = #50000 1'b0;
	IN3[13] = #100000 1'b1;
	IN3[13] = #50000 1'b0;
	IN3[13] = #50000 1'b1;
	IN3[13] = #100000 1'b0;
	IN3[13] = #100000 1'b1;
	IN3[13] = #50000 1'b0;
	IN3[13] = #150000 1'b1;
	IN3[13] = #50000 1'b0;
	IN3[13] = #50000 1'b1;
	IN3[13] = #100000 1'b0;
	IN3[13] = #50000 1'b1;
	IN3[13] = #100000 1'b0;
	IN3[13] = #200000 1'b1;
	IN3[13] = #50000 1'b0;
	IN3[13] = #50000 1'b1;
	IN3[13] = #100000 1'b0;
	IN3[13] = #50000 1'b1;
	IN3[13] = #100000 1'b0;
	IN3[13] = #150000 1'b1;
	IN3[13] = #50000 1'b0;
	IN3[13] = #100000 1'b1;
	IN3[13] = #100000 1'b0;
	IN3[13] = #200000 1'b1;
end 
// IN3[ 12 ]
initial
begin
	IN3[12] = 1'b1;
	IN3[12] = #50000 1'b0;
	IN3[12] = #50000 1'b1;
	IN3[12] = #150000 1'b0;
	IN3[12] = #100000 1'b1;
	IN3[12] = #100000 1'b0;
	IN3[12] = #150000 1'b1;
	IN3[12] = #50000 1'b0;
	IN3[12] = #50000 1'b1;
	IN3[12] = #50000 1'b0;
	IN3[12] = #50000 1'b1;
	IN3[12] = #150000 1'b0;
	IN3[12] = #50000 1'b1;
	IN3[12] = #100000 1'b0;
	IN3[12] = #200000 1'b1;
	IN3[12] = #100000 1'b0;
	IN3[12] = #50000 1'b1;
	IN3[12] = #50000 1'b0;
	IN3[12] = #50000 1'b1;
	IN3[12] = #50000 1'b0;
	IN3[12] = #50000 1'b1;
	IN3[12] = #100000 1'b0;
	IN3[12] = #100000 1'b1;
	IN3[12] = #100000 1'b0;
	IN3[12] = #150000 1'b1;
	IN3[12] = #50000 1'b0;
	IN3[12] = #50000 1'b1;
	IN3[12] = #50000 1'b0;
	IN3[12] = #100000 1'b1;
	IN3[12] = #150000 1'b0;
	IN3[12] = #100000 1'b1;
	IN3[12] = #100000 1'b0;
	IN3[12] = #50000 1'b1;
	IN3[12] = #150000 1'b0;
	IN3[12] = #50000 1'b1;
end 
// IN3[ 11 ]
initial
begin
	IN3[11] = 1'b1;
	IN3[11] = #150000 1'b0;
	IN3[11] = #100000 1'b1;
	IN3[11] = #50000 1'b0;
	IN3[11] = #50000 1'b1;
	IN3[11] = #50000 1'b0;
	IN3[11] = #50000 1'b1;
	IN3[11] = #150000 1'b0;
	IN3[11] = #50000 1'b1;
	IN3[11] = #50000 1'b0;
	IN3[11] = #100000 1'b1;
	IN3[11] = #200000 1'b0;
	IN3[11] = #200000 1'b1;
	IN3[11] = #300000 1'b0;
	IN3[11] = #100000 1'b1;
	IN3[11] = #100000 1'b0;
	IN3[11] = #50000 1'b1;
	IN3[11] = #100000 1'b0;
	IN3[11] = #50000 1'b1;
	IN3[11] = #50000 1'b0;
	IN3[11] = #50000 1'b1;
	IN3[11] = #50000 1'b0;
	IN3[11] = #100000 1'b1;
	IN3[11] = #150000 1'b0;
	IN3[11] = #50000 1'b1;
	IN3[11] = #50000 1'b0;
	IN3[11] = #200000 1'b1;
	IN3[11] = #50000 1'b0;
	IN3[11] = #150000 1'b1;
	IN3[11] = #50000 1'b0;
end 
// IN3[ 10 ]
initial
begin
	IN3[10] = 1'b0;
	IN3[10] = #250000 1'b1;
	IN3[10] = #50000 1'b0;
	IN3[10] = #50000 1'b1;
	IN3[10] = #50000 1'b0;
	IN3[10] = #100000 1'b1;
	IN3[10] = #100000 1'b0;
	IN3[10] = #250000 1'b1;
	IN3[10] = #150000 1'b0;
	IN3[10] = #150000 1'b1;
	IN3[10] = #100000 1'b0;
	IN3[10] = #250000 1'b1;
	IN3[10] = #100000 1'b0;
	IN3[10] = #50000 1'b1;
	IN3[10] = #50000 1'b0;
	IN3[10] = #50000 1'b1;
	IN3[10] = #100000 1'b0;
	IN3[10] = #150000 1'b1;
	IN3[10] = #50000 1'b0;
	IN3[10] = #50000 1'b1;
	IN3[10] = #150000 1'b0;
	IN3[10] = #50000 1'b1;
	IN3[10] = #50000 1'b0;
	IN3[10] = #350000 1'b1;
	IN3[10] = #100000 1'b0;
	IN3[10] = #150000 1'b1;
end 
// IN3[ 9 ]
initial
begin
	IN3[9] = 1'b0;
	IN3[9] = #50000 1'b1;
	IN3[9] = #250000 1'b0;
	IN3[9] = #150000 1'b1;
	IN3[9] = #100000 1'b0;
	IN3[9] = #50000 1'b1;
	IN3[9] = #50000 1'b0;
	IN3[9] = #100000 1'b1;
	IN3[9] = #150000 1'b0;
	IN3[9] = #50000 1'b1;
	IN3[9] = #50000 1'b0;
	IN3[9] = #250000 1'b1;
	IN3[9] = #50000 1'b0;
	IN3[9] = #100000 1'b1;
	IN3[9] = #50000 1'b0;
	IN3[9] = #100000 1'b1;
	IN3[9] = #100000 1'b0;
	IN3[9] = #50000 1'b1;
	IN3[9] = #50000 1'b0;
	IN3[9] = #150000 1'b1;
	IN3[9] = #50000 1'b0;
	IN3[9] = #350000 1'b1;
	IN3[9] = #200000 1'b0;
	IN3[9] = #100000 1'b1;
	IN3[9] = #100000 1'b0;
	IN3[9] = #50000 1'b1;
	IN3[9] = #50000 1'b0;
	IN3[9] = #50000 1'b1;
end 
// IN3[ 8 ]
initial
begin
	IN3[8] = 1'b0;
	IN3[8] = #100000 1'b1;
	IN3[8] = #50000 1'b0;
	IN3[8] = #50000 1'b1;
	IN3[8] = #100000 1'b0;
	IN3[8] = #50000 1'b1;
	IN3[8] = #50000 1'b0;
	IN3[8] = #100000 1'b1;
	IN3[8] = #200000 1'b0;
	IN3[8] = #100000 1'b1;
	IN3[8] = #150000 1'b0;
	IN3[8] = #50000 1'b1;
	IN3[8] = #50000 1'b0;
	IN3[8] = #100000 1'b1;
	IN3[8] = #250000 1'b0;
	IN3[8] = #100000 1'b1;
	IN3[8] = #50000 1'b0;
	IN3[8] = #50000 1'b1;
	IN3[8] = #150000 1'b0;
	IN3[8] = #150000 1'b1;
	IN3[8] = #150000 1'b0;
	IN3[8] = #50000 1'b1;
	IN3[8] = #50000 1'b0;
	IN3[8] = #100000 1'b1;
	IN3[8] = #50000 1'b0;
	IN3[8] = #150000 1'b1;
	IN3[8] = #200000 1'b0;
	IN3[8] = #150000 1'b1;
	IN3[8] = #50000 1'b0;
end 
// IN3[ 7 ]
initial
begin
	IN3[7] = 1'b0;
	IN3[7] = #50000 1'b1;
	IN3[7] = #150000 1'b0;
	IN3[7] = #300000 1'b1;
	IN3[7] = #50000 1'b0;
	IN3[7] = #150000 1'b1;
	IN3[7] = #50000 1'b0;
	IN3[7] = #50000 1'b1;
	IN3[7] = #50000 1'b0;
	IN3[7] = #250000 1'b1;
	IN3[7] = #50000 1'b0;
	IN3[7] = #150000 1'b1;
	IN3[7] = #200000 1'b0;
	IN3[7] = #100000 1'b1;
	IN3[7] = #50000 1'b0;
	IN3[7] = #150000 1'b1;
	IN3[7] = #50000 1'b0;
	IN3[7] = #150000 1'b1;
	IN3[7] = #150000 1'b0;
	IN3[7] = #50000 1'b1;
	IN3[7] = #50000 1'b0;
	IN3[7] = #50000 1'b1;
	IN3[7] = #150000 1'b0;
	IN3[7] = #50000 1'b1;
	IN3[7] = #200000 1'b0;
	IN3[7] = #150000 1'b1;
	IN3[7] = #50000 1'b0;
	IN3[7] = #50000 1'b1;
end 
// IN3[ 6 ]
initial
begin
	IN3[6] = 1'b1;
	IN3[6] = #200000 1'b0;
	IN3[6] = #50000 1'b1;
	IN3[6] = #100000 1'b0;
	IN3[6] = #50000 1'b1;
	IN3[6] = #50000 1'b0;
	IN3[6] = #50000 1'b1;
	IN3[6] = #100000 1'b0;
	IN3[6] = #100000 1'b1;
	IN3[6] = #50000 1'b0;
	IN3[6] = #100000 1'b1;
	IN3[6] = #50000 1'b0;
	IN3[6] = #150000 1'b1;
	IN3[6] = #50000 1'b0;
	IN3[6] = #50000 1'b1;
	IN3[6] = #50000 1'b0;
	IN3[6] = #50000 1'b1;
	IN3[6] = #50000 1'b0;
	IN3[6] = #150000 1'b1;
	IN3[6] = #50000 1'b0;
	IN3[6] = #50000 1'b1;
	IN3[6] = #100000 1'b0;
	IN3[6] = #150000 1'b1;
	IN3[6] = #100000 1'b0;
	IN3[6] = #50000 1'b1;
	IN3[6] = #50000 1'b0;
	IN3[6] = #50000 1'b1;
	IN3[6] = #50000 1'b0;
	IN3[6] = #100000 1'b1;
	IN3[6] = #100000 1'b0;
	IN3[6] = #50000 1'b1;
	IN3[6] = #300000 1'b0;
	IN3[6] = #100000 1'b1;
	IN3[6] = #100000 1'b0;
	IN3[6] = #50000 1'b1;
	IN3[6] = #50000 1'b0;
end 
// IN3[ 5 ]
initial
begin
	IN3[5] = 1'b0;
	IN3[5] = #200000 1'b1;
	IN3[5] = #50000 1'b0;
	IN3[5] = #150000 1'b1;
	IN3[5] = #50000 1'b0;
	IN3[5] = #100000 1'b1;
	IN3[5] = #100000 1'b0;
	IN3[5] = #50000 1'b1;
	IN3[5] = #150000 1'b0;
	IN3[5] = #50000 1'b1;
	IN3[5] = #50000 1'b0;
	IN3[5] = #200000 1'b1;
	IN3[5] = #50000 1'b0;
	IN3[5] = #200000 1'b1;
	IN3[5] = #50000 1'b0;
	IN3[5] = #150000 1'b1;
	IN3[5] = #50000 1'b0;
	IN3[5] = #150000 1'b1;
	IN3[5] = #50000 1'b0;
	IN3[5] = #200000 1'b1;
	IN3[5] = #200000 1'b0;
	IN3[5] = #50000 1'b1;
	IN3[5] = #150000 1'b0;
	IN3[5] = #50000 1'b1;
	IN3[5] = #50000 1'b0;
	IN3[5] = #50000 1'b1;
	IN3[5] = #250000 1'b0;
	IN3[5] = #50000 1'b1;
	IN3[5] = #50000 1'b0;
end 
// IN3[ 4 ]
initial
begin
	IN3[4] = 1'b0;
	IN3[4] = #50000 1'b1;
	IN3[4] = #50000 1'b0;
	IN3[4] = #50000 1'b1;
	IN3[4] = #100000 1'b0;
	IN3[4] = #50000 1'b1;
	IN3[4] = #150000 1'b0;
	IN3[4] = #50000 1'b1;
	IN3[4] = #50000 1'b0;
	IN3[4] = #350000 1'b1;
	IN3[4] = #300000 1'b0;
	IN3[4] = #100000 1'b1;
	IN3[4] = #100000 1'b0;
	IN3[4] = #50000 1'b1;
	IN3[4] = #50000 1'b0;
	IN3[4] = #150000 1'b1;
	IN3[4] = #100000 1'b0;
	IN3[4] = #150000 1'b1;
	IN3[4] = #50000 1'b0;
	IN3[4] = #50000 1'b1;
	IN3[4] = #50000 1'b0;
	IN3[4] = #150000 1'b1;
	IN3[4] = #150000 1'b0;
	IN3[4] = #200000 1'b1;
	IN3[4] = #150000 1'b0;
	IN3[4] = #50000 1'b1;
	IN3[4] = #50000 1'b0;
end 
// IN3[ 3 ]
initial
begin
	IN3[3] = 1'b1;
	IN3[3] = #50000 1'b0;
	IN3[3] = #50000 1'b1;
	IN3[3] = #150000 1'b0;
	IN3[3] = #400000 1'b1;
	IN3[3] = #50000 1'b0;
	IN3[3] = #50000 1'b1;
	IN3[3] = #200000 1'b0;
	IN3[3] = #50000 1'b1;
	IN3[3] = #50000 1'b0;
	IN3[3] = #50000 1'b1;
	IN3[3] = #50000 1'b0;
	IN3[3] = #100000 1'b1;
	IN3[3] = #350000 1'b0;
	IN3[3] = #100000 1'b1;
	IN3[3] = #150000 1'b0;
	IN3[3] = #50000 1'b1;
	IN3[3] = #100000 1'b0;
	IN3[3] = #50000 1'b1;
	IN3[3] = #150000 1'b0;
	IN3[3] = #50000 1'b1;
	IN3[3] = #50000 1'b0;
	IN3[3] = #100000 1'b1;
	IN3[3] = #50000 1'b0;
	IN3[3] = #50000 1'b1;
	IN3[3] = #450000 1'b0;
end 
// IN3[ 2 ]
initial
begin
	IN3[2] = 1'b0;
	IN3[2] = #50000 1'b1;
	IN3[2] = #100000 1'b0;
	IN3[2] = #50000 1'b1;
	IN3[2] = #50000 1'b0;
	IN3[2] = #100000 1'b1;
	IN3[2] = #50000 1'b0;
	IN3[2] = #300000 1'b1;
	IN3[2] = #50000 1'b0;
	IN3[2] = #50000 1'b1;
	IN3[2] = #50000 1'b0;
	IN3[2] = #50000 1'b1;
	IN3[2] = #50000 1'b0;
	IN3[2] = #50000 1'b1;
	IN3[2] = #50000 1'b0;
	IN3[2] = #50000 1'b1;
	IN3[2] = #150000 1'b0;
	IN3[2] = #50000 1'b1;
	IN3[2] = #50000 1'b0;
	IN3[2] = #100000 1'b1;
	IN3[2] = #50000 1'b0;
	IN3[2] = #150000 1'b1;
	IN3[2] = #100000 1'b0;
	IN3[2] = #50000 1'b1;
	IN3[2] = #100000 1'b0;
	IN3[2] = #150000 1'b1;
	IN3[2] = #50000 1'b0;
	IN3[2] = #100000 1'b1;
	IN3[2] = #150000 1'b0;
	IN3[2] = #50000 1'b1;
	IN3[2] = #200000 1'b0;
	IN3[2] = #150000 1'b1;
	IN3[2] = #50000 1'b0;
end 
// IN3[ 1 ]
initial
begin
	IN3[1] = 1'b0;
	IN3[1] = #100000 1'b1;
	IN3[1] = #50000 1'b0;
	IN3[1] = #50000 1'b1;
	IN3[1] = #100000 1'b0;
	IN3[1] = #150000 1'b1;
	IN3[1] = #50000 1'b0;
	IN3[1] = #250000 1'b1;
	IN3[1] = #100000 1'b0;
	IN3[1] = #100000 1'b1;
	IN3[1] = #50000 1'b0;
	IN3[1] = #50000 1'b1;
	IN3[1] = #200000 1'b0;
	IN3[1] = #100000 1'b1;
	IN3[1] = #50000 1'b0;
	IN3[1] = #50000 1'b1;
	IN3[1] = #50000 1'b0;
	IN3[1] = #100000 1'b1;
	IN3[1] = #50000 1'b0;
	IN3[1] = #100000 1'b1;
	IN3[1] = #200000 1'b0;
	IN3[1] = #150000 1'b1;
	IN3[1] = #50000 1'b0;
	IN3[1] = #100000 1'b1;
	IN3[1] = #100000 1'b0;
	IN3[1] = #50000 1'b1;
	IN3[1] = #100000 1'b0;
end 
// IN3[ 0 ]
initial
begin
	IN3[0] = 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #50000 1'b0;
	IN3[0] = #100000 1'b1;
	IN3[0] = #50000 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #150000 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #50000 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #100000 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #50000 1'b0;
	IN3[0] = #150000 1'b1;
	IN3[0] = #100000 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #50000 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #50000 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #50000 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #100000 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #50000 1'b0;
	IN3[0] = #300000 1'b1;
	IN3[0] = #100000 1'b0;
	IN3[0] = #150000 1'b1;
	IN3[0] = #150000 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #50000 1'b0;
	IN3[0] = #100000 1'b1;
	IN3[0] = #200000 1'b0;
	IN3[0] = #50000 1'b1;
	IN3[0] = #50000 1'b0;
	IN3[0] = #50000 1'b1;
end 
// SEL0[ 1 ]
initial
begin
	SEL0[1] = 1'b0;
	SEL0[1] = #100000 1'b1;
	SEL0[1] = #100000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #75000 1'b0;
	SEL0[1] = #50000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #75000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #50000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #50000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #50000 1'b0;
	SEL0[1] = #100000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #50000 1'b0;
	SEL0[1] = #50000 1'b1;
	SEL0[1] = #50000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #50000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #100000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #125000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #175000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #25000 1'b0;
	SEL0[1] = #50000 1'b1;
	SEL0[1] = #50000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #75000 1'b0;
	SEL0[1] = #50000 1'b1;
	SEL0[1] = #150000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #75000 1'b0;
	SEL0[1] = #125000 1'b1;
	SEL0[1] = #50000 1'b0;
	SEL0[1] = #100000 1'b1;
	SEL0[1] = #100000 1'b0;
	SEL0[1] = #25000 1'b1;
	SEL0[1] = #75000 1'b0;
	SEL0[1] = #50000 1'b1;
end 
// SEL0[ 0 ]
initial
begin
	SEL0[0] = 1'b1;
	SEL0[0] = #125000 1'b0;
	SEL0[0] = #50000 1'b1;
	SEL0[0] = #125000 1'b0;
	SEL0[0] = #75000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #25000 1'b1;
	SEL0[0] = #50000 1'b0;
	SEL0[0] = #50000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #100000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #50000 1'b1;
	SEL0[0] = #150000 1'b0;
	SEL0[0] = #100000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #50000 1'b1;
	SEL0[0] = #50000 1'b0;
	SEL0[0] = #75000 1'b1;
	SEL0[0] = #50000 1'b0;
	SEL0[0] = #150000 1'b1;
	SEL0[0] = #75000 1'b0;
	SEL0[0] = #25000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #125000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #25000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #50000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #25000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #25000 1'b1;
	SEL0[0] = #50000 1'b0;
	SEL0[0] = #25000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #50000 1'b1;
	SEL0[0] = #50000 1'b0;
	SEL0[0] = #100000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #25000 1'b1;
	SEL0[0] = #75000 1'b0;
	SEL0[0] = #25000 1'b1;
	SEL0[0] = #100000 1'b0;
	SEL0[0] = #25000 1'b1;
	SEL0[0] = #100000 1'b0;
	SEL0[0] = #75000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #50000 1'b1;
	SEL0[0] = #25000 1'b0;
	SEL0[0] = #125000 1'b1;
end 
// SEL1[ 1 ]
initial
begin
	SEL1[1] = 1'b0;
	SEL1[1] = #50000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #100000 1'b1;
	SEL1[1] = #150000 1'b0;
	SEL1[1] = #50000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #50000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #50000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #100000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #50000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #100000 1'b1;
	SEL1[1] = #100000 1'b0;
	SEL1[1] = #100000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #50000 1'b1;
	SEL1[1] = #200000 1'b0;
	SEL1[1] = #50000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #100000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #50000 1'b1;
	SEL1[1] = #150000 1'b0;
	SEL1[1] = #50000 1'b1;
	SEL1[1] = #200000 1'b0;
	SEL1[1] = #150000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #100000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #50000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #150000 1'b1;
	SEL1[1] = #50000 1'b0;
	SEL1[1] = #50000 1'b1;
end 
// SEL1[ 0 ]
initial
begin
	SEL1[0] = 1'b0;
	SEL1[0] = #50000 1'b1;
	SEL1[0] = #150000 1'b0;
	SEL1[0] = #50000 1'b1;
	SEL1[0] = #100000 1'b0;
	SEL1[0] = #100000 1'b1;
	SEL1[0] = #150000 1'b0;
	SEL1[0] = #150000 1'b1;
	SEL1[0] = #100000 1'b0;
	SEL1[0] = #50000 1'b1;
	SEL1[0] = #50000 1'b0;
	SEL1[0] = #150000 1'b1;
	SEL1[0] = #50000 1'b0;
	SEL1[0] = #50000 1'b1;
	SEL1[0] = #50000 1'b0;
	SEL1[0] = #100000 1'b1;
	SEL1[0] = #50000 1'b0;
	SEL1[0] = #200000 1'b1;
	SEL1[0] = #50000 1'b0;
	SEL1[0] = #50000 1'b1;
	SEL1[0] = #100000 1'b0;
	SEL1[0] = #50000 1'b1;
	SEL1[0] = #50000 1'b0;
	SEL1[0] = #50000 1'b1;
	SEL1[0] = #50000 1'b0;
	SEL1[0] = #50000 1'b1;
	SEL1[0] = #150000 1'b0;
	SEL1[0] = #100000 1'b1;
	SEL1[0] = #150000 1'b0;
	SEL1[0] = #50000 1'b1;
	SEL1[0] = #100000 1'b0;
	SEL1[0] = #100000 1'b1;
	SEL1[0] = #150000 1'b0;
	SEL1[0] = #50000 1'b1;
end 
// SEL2[ 1 ]
initial
begin
	SEL2[1] = 1'b0;
	SEL2[1] = #100000 1'b1;
	SEL2[1] = #50000 1'b0;
	SEL2[1] = #100000 1'b1;
	SEL2[1] = #50000 1'b0;
	SEL2[1] = #50000 1'b1;
	SEL2[1] = #100000 1'b0;
	SEL2[1] = #50000 1'b1;
	SEL2[1] = #100000 1'b0;
	SEL2[1] = #50000 1'b1;
	SEL2[1] = #50000 1'b0;
	SEL2[1] = #350000 1'b1;
	SEL2[1] = #50000 1'b0;
	SEL2[1] = #50000 1'b1;
	SEL2[1] = #50000 1'b0;
	SEL2[1] = #50000 1'b1;
	SEL2[1] = #150000 1'b0;
	SEL2[1] = #100000 1'b1;
	SEL2[1] = #50000 1'b0;
	SEL2[1] = #50000 1'b1;
	SEL2[1] = #50000 1'b0;
	SEL2[1] = #150000 1'b1;
	SEL2[1] = #250000 1'b0;
	SEL2[1] = #50000 1'b1;
	SEL2[1] = #50000 1'b0;
	SEL2[1] = #50000 1'b1;
	SEL2[1] = #50000 1'b0;
	SEL2[1] = #50000 1'b1;
	SEL2[1] = #50000 1'b0;
	SEL2[1] = #100000 1'b1;
	SEL2[1] = #250000 1'b0;
	SEL2[1] = #150000 1'b1;
	SEL2[1] = #50000 1'b0;
	SEL2[1] = #50000 1'b1;
end 
// SEL2[ 0 ]
initial
begin
	SEL2[0] = 1'b0;
	SEL2[0] = #200000 1'b1;
	SEL2[0] = #50000 1'b0;
	SEL2[0] = #50000 1'b1;
	SEL2[0] = #100000 1'b0;
	SEL2[0] = #50000 1'b1;
	SEL2[0] = #300000 1'b0;
	SEL2[0] = #150000 1'b1;
	SEL2[0] = #100000 1'b0;
	SEL2[0] = #50000 1'b1;
	SEL2[0] = #50000 1'b0;
	SEL2[0] = #100000 1'b1;
	SEL2[0] = #350000 1'b0;
	SEL2[0] = #100000 1'b1;
	SEL2[0] = #150000 1'b0;
	SEL2[0] = #50000 1'b1;
	SEL2[0] = #50000 1'b0;
	SEL2[0] = #50000 1'b1;
	SEL2[0] = #50000 1'b0;
	SEL2[0] = #50000 1'b1;
	SEL2[0] = #50000 1'b0;
	SEL2[0] = #50000 1'b1;
	SEL2[0] = #150000 1'b0;
	SEL2[0] = #100000 1'b1;
	SEL2[0] = #100000 1'b0;
	SEL2[0] = #50000 1'b1;
	SEL2[0] = #50000 1'b0;
	SEL2[0] = #50000 1'b1;
	SEL2[0] = #150000 1'b0;
	SEL2[0] = #50000 1'b1;
	SEL2[0] = #50000 1'b0;
	SEL2[0] = #50000 1'b1;
end 
// SEL3[ 1 ]
initial
begin
	SEL3[1] = 1'b1;
	SEL3[1] = #50000 1'b0;
	SEL3[1] = #50000 1'b1;
	SEL3[1] = #50000 1'b0;
	SEL3[1] = #100000 1'b1;
	SEL3[1] = #50000 1'b0;
	SEL3[1] = #100000 1'b1;
	SEL3[1] = #50000 1'b0;
	SEL3[1] = #100000 1'b1;
	SEL3[1] = #50000 1'b0;
	SEL3[1] = #50000 1'b1;
	SEL3[1] = #450000 1'b0;
	SEL3[1] = #50000 1'b1;
	SEL3[1] = #50000 1'b0;
	SEL3[1] = #100000 1'b1;
	SEL3[1] = #50000 1'b0;
	SEL3[1] = #400000 1'b1;
	SEL3[1] = #200000 1'b0;
	SEL3[1] = #100000 1'b1;
	SEL3[1] = #50000 1'b0;
	SEL3[1] = #100000 1'b1;
	SEL3[1] = #100000 1'b0;
	SEL3[1] = #50000 1'b1;
	SEL3[1] = #50000 1'b0;
	SEL3[1] = #50000 1'b1;
	SEL3[1] = #150000 1'b0;
	SEL3[1] = #150000 1'b1;
	SEL3[1] = #50000 1'b0;
end 
// SEL3[ 0 ]
initial
begin
	SEL3[0] = 1'b1;
	SEL3[0] = #50000 1'b0;
	SEL3[0] = #50000 1'b1;
	SEL3[0] = #50000 1'b0;
	SEL3[0] = #100000 1'b1;
	SEL3[0] = #50000 1'b0;
	SEL3[0] = #100000 1'b1;
	SEL3[0] = #150000 1'b0;
	SEL3[0] = #50000 1'b1;
	SEL3[0] = #250000 1'b0;
	SEL3[0] = #50000 1'b1;
	SEL3[0] = #50000 1'b0;
	SEL3[0] = #150000 1'b1;
	SEL3[0] = #50000 1'b0;
	SEL3[0] = #150000 1'b1;
	SEL3[0] = #50000 1'b0;
	SEL3[0] = #50000 1'b1;
	SEL3[0] = #50000 1'b0;
	SEL3[0] = #50000 1'b1;
	SEL3[0] = #50000 1'b0;
	SEL3[0] = #50000 1'b1;
	SEL3[0] = #50000 1'b0;
	SEL3[0] = #100000 1'b1;
	SEL3[0] = #50000 1'b0;
	SEL3[0] = #50000 1'b1;
	SEL3[0] = #250000 1'b0;
	SEL3[0] = #50000 1'b1;
	SEL3[0] = #50000 1'b0;
	SEL3[0] = #50000 1'b1;
	SEL3[0] = #250000 1'b0;
	SEL3[0] = #100000 1'b1;
	SEL3[0] = #150000 1'b0;
	SEL3[0] = #100000 1'b1;
end 

cross_bar_vlg_sample_tst tb_sample (
	.IN0(IN0),
	.IN1(IN1),
	.IN2(IN2),
	.IN3(IN3),
	.SEL0(SEL0),
	.SEL1(SEL1),
	.SEL2(SEL2),
	.SEL3(SEL3),
	.sampler_tx(sampler)
);

cross_bar_vlg_check_tst tb_out(
	.OUT0(OUT0),
	.OUT1(OUT1),
	.OUT2(OUT2),
	.OUT3(OUT3),
	.sampler_rx(sampler)
);
endmodule

