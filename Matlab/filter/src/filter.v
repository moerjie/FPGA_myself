// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 9.10 and Filter Design HDL Coder 3.1.9.
// Generated on: 2023-09-11 20:45:45
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetDirectory: F:\Git_Repository\FPGA_myself\Matlab\filter\src
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module filter
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   [63:0] filter_in; //double
  output  [63:0] filter_out; //double

////////////////////////////////////////////////////////////////
//Module Architecture: filter
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter coeff1 = -6.4796038175229703E-04; //double
  parameter coeff2 = -1.4439790529392953E-03; //double
  parameter coeff3 = -2.7022579652495843E-03; //double
  parameter coeff4 = -4.4407447476883678E-03; //double
  parameter coeff5 = -6.1914845371743819E-03; //double
  parameter coeff6 = -6.9591590144825709E-03; //double
  parameter coeff7 = -5.3706760856332553E-03; //double
  parameter coeff8 = 2.3906867694921823E-18; //double
  parameter coeff9 = 1.0206818183281315E-02; //double
  parameter coeff10 = 2.5522446950299153E-02; //double
  parameter coeff11 = 4.5169588161010028E-02; //double
  parameter coeff12 = 6.7288914976363315E-02; //double
  parameter coeff13 = 8.9180392325726637E-02; //double
  parameter coeff14 = 1.0778063865966808E-01; //double
  parameter coeff15 = 1.2027131565483029E-01; //double
  parameter coeff16 = 1.2467229374748230E-01; //double
  parameter coeff17 = 1.2027131565483029E-01; //double
  parameter coeff18 = 1.0778063865966808E-01; //double
  parameter coeff19 = 8.9180392325726637E-02; //double
  parameter coeff20 = 6.7288914976363315E-02; //double
  parameter coeff21 = 4.5169588161010028E-02; //double
  parameter coeff22 = 2.5522446950299153E-02; //double
  parameter coeff23 = 1.0206818183281315E-02; //double
  parameter coeff24 = 2.3906867694921823E-18; //double
  parameter coeff25 = -5.3706760856332553E-03; //double
  parameter coeff26 = -6.9591590144825709E-03; //double
  parameter coeff27 = -6.1914845371743819E-03; //double
  parameter coeff28 = -4.4407447476883678E-03; //double
  parameter coeff29 = -2.7022579652495843E-03; //double
  parameter coeff30 = -1.4439790529392953E-03; //double
  parameter coeff31 = -6.4796038175229703E-04; //double

  // Signals
  real delay_pipeline [0:30] ; // double
  real product31; // double
  real product30; // double
  real product29; // double
  real product28; // double
  real product27; // double
  real product26; // double
  real product25; // double
  real product24; // double
  real product23; // double
  real product22; // double
  real product21; // double
  real product20; // double
  real product19; // double
  real product18; // double
  real product17; // double
  real product16; // double
  real product15; // double
  real product14; // double
  real product13; // double
  real product12; // double
  real product11; // double
  real product10; // double
  real product9; // double
  real product8; // double
  real product7; // double
  real product6; // double
  real product5; // double
  real product4; // double
  real product3; // double
  real product2; // double
  real product1_cast; // double
  real product1; // double
  real sum1; // double
  real sum2; // double
  real sum3; // double
  real sum4; // double
  real sum5; // double
  real sum6; // double
  real sum7; // double
  real sum8; // double
  real sum9; // double
  real sum10; // double
  real sum11; // double
  real sum12; // double
  real sum13; // double
  real sum14; // double
  real sum15; // double
  real sum16; // double
  real sum17; // double
  real sum18; // double
  real sum19; // double
  real sum20; // double
  real sum21; // double
  real sum22; // double
  real sum23; // double
  real sum24; // double
  real sum25; // double
  real sum26; // double
  real sum27; // double
  real sum28; // double
  real sum29; // double
  real sum30; // double
  real output_typeconvert; // double
  real output_register; // double

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0.0000000000000000E+00;
        delay_pipeline[1] <= 0.0000000000000000E+00;
        delay_pipeline[2] <= 0.0000000000000000E+00;
        delay_pipeline[3] <= 0.0000000000000000E+00;
        delay_pipeline[4] <= 0.0000000000000000E+00;
        delay_pipeline[5] <= 0.0000000000000000E+00;
        delay_pipeline[6] <= 0.0000000000000000E+00;
        delay_pipeline[7] <= 0.0000000000000000E+00;
        delay_pipeline[8] <= 0.0000000000000000E+00;
        delay_pipeline[9] <= 0.0000000000000000E+00;
        delay_pipeline[10] <= 0.0000000000000000E+00;
        delay_pipeline[11] <= 0.0000000000000000E+00;
        delay_pipeline[12] <= 0.0000000000000000E+00;
        delay_pipeline[13] <= 0.0000000000000000E+00;
        delay_pipeline[14] <= 0.0000000000000000E+00;
        delay_pipeline[15] <= 0.0000000000000000E+00;
        delay_pipeline[16] <= 0.0000000000000000E+00;
        delay_pipeline[17] <= 0.0000000000000000E+00;
        delay_pipeline[18] <= 0.0000000000000000E+00;
        delay_pipeline[19] <= 0.0000000000000000E+00;
        delay_pipeline[20] <= 0.0000000000000000E+00;
        delay_pipeline[21] <= 0.0000000000000000E+00;
        delay_pipeline[22] <= 0.0000000000000000E+00;
        delay_pipeline[23] <= 0.0000000000000000E+00;
        delay_pipeline[24] <= 0.0000000000000000E+00;
        delay_pipeline[25] <= 0.0000000000000000E+00;
        delay_pipeline[26] <= 0.0000000000000000E+00;
        delay_pipeline[27] <= 0.0000000000000000E+00;
        delay_pipeline[28] <= 0.0000000000000000E+00;
        delay_pipeline[29] <= 0.0000000000000000E+00;
        delay_pipeline[30] <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= $bitstoreal(filter_in);
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
        end
      end
    end // Delay_Pipeline_process


  always @* product31 <= delay_pipeline[30] * coeff31;

  always @* product30 <= delay_pipeline[29] * coeff30;

  always @* product29 <= delay_pipeline[28] * coeff29;

  always @* product28 <= delay_pipeline[27] * coeff28;

  always @* product27 <= delay_pipeline[26] * coeff27;

  always @* product26 <= delay_pipeline[25] * coeff26;

  always @* product25 <= delay_pipeline[24] * coeff25;

  always @* product24 <= delay_pipeline[23] * coeff24;

  always @* product23 <= delay_pipeline[22] * coeff23;

  always @* product22 <= delay_pipeline[21] * coeff22;

  always @* product21 <= delay_pipeline[20] * coeff21;

  always @* product20 <= delay_pipeline[19] * coeff20;

  always @* product19 <= delay_pipeline[18] * coeff19;

  always @* product18 <= delay_pipeline[17] * coeff18;

  always @* product17 <= delay_pipeline[16] * coeff17;

  always @* product16 <= delay_pipeline[15] * coeff16;

  always @* product15 <= delay_pipeline[14] * coeff15;

  always @* product14 <= delay_pipeline[13] * coeff14;

  always @* product13 <= delay_pipeline[12] * coeff13;

  always @* product12 <= delay_pipeline[11] * coeff12;

  always @* product11 <= delay_pipeline[10] * coeff11;

  always @* product10 <= delay_pipeline[9] * coeff10;

  always @* product9 <= delay_pipeline[8] * coeff9;

  always @* product8 <= delay_pipeline[7] * coeff8;

  always @* product7 <= delay_pipeline[6] * coeff7;

  always @* product6 <= delay_pipeline[5] * coeff6;

  always @* product5 <= delay_pipeline[4] * coeff5;

  always @* product4 <= delay_pipeline[3] * coeff4;

  always @* product3 <= delay_pipeline[2] * coeff3;

  always @* product2 <= delay_pipeline[1] * coeff2;

  always @* product1_cast <= product1;


  always @* product1 <= delay_pipeline[0] * coeff1;

  always @* sum1 <= product1_cast + product2;

  always @* sum2 <= sum1 + product3;

  always @* sum3 <= sum2 + product4;

  always @* sum4 <= sum3 + product5;

  always @* sum5 <= sum4 + product6;

  always @* sum6 <= sum5 + product7;

  always @* sum7 <= sum6 + product8;

  always @* sum8 <= sum7 + product9;

  always @* sum9 <= sum8 + product10;

  always @* sum10 <= sum9 + product11;

  always @* sum11 <= sum10 + product12;

  always @* sum12 <= sum11 + product13;

  always @* sum13 <= sum12 + product14;

  always @* sum14 <= sum13 + product15;

  always @* sum15 <= sum14 + product16;

  always @* sum16 <= sum15 + product17;

  always @* sum17 <= sum16 + product18;

  always @* sum18 <= sum17 + product19;

  always @* sum19 <= sum18 + product20;

  always @* sum20 <= sum19 + product21;

  always @* sum21 <= sum20 + product22;

  always @* sum22 <= sum21 + product23;

  always @* sum23 <= sum22 + product24;

  always @* sum24 <= sum23 + product25;

  always @* sum25 <= sum24 + product26;

  always @* sum26 <= sum25 + product27;

  always @* sum27 <= sum26 + product28;

  always @* sum28 <= sum27 + product29;

  always @* sum29 <= sum28 + product30;

  always @* sum30 <= sum29 + product31;

  always @* output_typeconvert <= sum30;


  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0.0000000000000000E+00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = $realtobits(output_register);
endmodule  // filter
