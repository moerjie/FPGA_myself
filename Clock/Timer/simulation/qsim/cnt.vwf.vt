// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/06/2023 18:33:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    timer_bdf
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module timer_bdf_vlg_sample_tst(
	CLK,
	rst,
	sampler_tx
);
input  CLK;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module timer_bdf_vlg_check_tst (
	p1,
	p01,
	p001,
	p10,
	SEG1,
	SEG2,
	SEG3,
	SEG4,
	sampler_rx
);
input  p1;
input  p01;
input  p001;
input  p10;
input [6:0] SEG1;
input [6:0] SEG2;
input [6:0] SEG3;
input [6:0] SEG4;
input sampler_rx;

reg  p1_expected;
reg  p01_expected;
reg  p001_expected;
reg  p10_expected;
reg [6:0] SEG1_expected;
reg [6:0] SEG2_expected;
reg [6:0] SEG3_expected;
reg [6:0] SEG4_expected;

reg  p1_prev;
reg  p01_prev;
reg  p001_prev;
reg  p10_prev;
reg [6:0] SEG1_prev;
reg [6:0] SEG2_prev;
reg [6:0] SEG3_prev;
reg [6:0] SEG4_prev;

reg  p1_expected_prev;
reg  p01_expected_prev;
reg  p001_expected_prev;
reg  p10_expected_prev;
reg [6:0] SEG1_expected_prev;
reg [6:0] SEG2_expected_prev;
reg [6:0] SEG3_expected_prev;
reg [6:0] SEG4_expected_prev;

reg  last_p1_exp;
reg  last_p01_exp;
reg  last_p001_exp;
reg  last_p10_exp;
reg [6:0] last_SEG1_exp;
reg [6:0] last_SEG2_exp;
reg [6:0] last_SEG3_exp;
reg [6:0] last_SEG4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	p1_prev = p1;
	p01_prev = p01;
	p001_prev = p001;
	p10_prev = p10;
	SEG1_prev = SEG1;
	SEG2_prev = SEG2;
	SEG3_prev = SEG3;
	SEG4_prev = SEG4;
end

// update expected /o prevs

always @(trigger)
begin
	p1_expected_prev = p1_expected;
	p01_expected_prev = p01_expected;
	p001_expected_prev = p001_expected;
	p10_expected_prev = p10_expected;
	SEG1_expected_prev = SEG1_expected;
	SEG2_expected_prev = SEG2_expected;
	SEG3_expected_prev = SEG3_expected;
	SEG4_expected_prev = SEG4_expected;
end


// expected SEG1[ 6 ]
initial
begin
	SEG1_expected[6] = 1'bX;
end 
// expected SEG1[ 5 ]
initial
begin
	SEG1_expected[5] = 1'bX;
end 
// expected SEG1[ 4 ]
initial
begin
	SEG1_expected[4] = 1'bX;
end 
// expected SEG1[ 3 ]
initial
begin
	SEG1_expected[3] = 1'bX;
end 
// expected SEG1[ 2 ]
initial
begin
	SEG1_expected[2] = 1'bX;
end 
// expected SEG1[ 1 ]
initial
begin
	SEG1_expected[1] = 1'bX;
end 
// expected SEG1[ 0 ]
initial
begin
	SEG1_expected[0] = 1'bX;
end 
// expected SEG2[ 6 ]
initial
begin
	SEG2_expected[6] = 1'bX;
end 
// expected SEG2[ 5 ]
initial
begin
	SEG2_expected[5] = 1'bX;
end 
// expected SEG2[ 4 ]
initial
begin
	SEG2_expected[4] = 1'bX;
end 
// expected SEG2[ 3 ]
initial
begin
	SEG2_expected[3] = 1'bX;
end 
// expected SEG2[ 2 ]
initial
begin
	SEG2_expected[2] = 1'bX;
end 
// expected SEG2[ 1 ]
initial
begin
	SEG2_expected[1] = 1'bX;
end 
// expected SEG2[ 0 ]
initial
begin
	SEG2_expected[0] = 1'bX;
end 
// expected SEG3[ 6 ]
initial
begin
	SEG3_expected[6] = 1'bX;
end 
// expected SEG3[ 5 ]
initial
begin
	SEG3_expected[5] = 1'bX;
end 
// expected SEG3[ 4 ]
initial
begin
	SEG3_expected[4] = 1'bX;
end 
// expected SEG3[ 3 ]
initial
begin
	SEG3_expected[3] = 1'bX;
end 
// expected SEG3[ 2 ]
initial
begin
	SEG3_expected[2] = 1'bX;
end 
// expected SEG3[ 1 ]
initial
begin
	SEG3_expected[1] = 1'bX;
end 
// expected SEG3[ 0 ]
initial
begin
	SEG3_expected[0] = 1'bX;
end 
// expected SEG4[ 6 ]
initial
begin
	SEG4_expected[6] = 1'bX;
end 
// expected SEG4[ 5 ]
initial
begin
	SEG4_expected[5] = 1'bX;
end 
// expected SEG4[ 4 ]
initial
begin
	SEG4_expected[4] = 1'bX;
end 
// expected SEG4[ 3 ]
initial
begin
	SEG4_expected[3] = 1'bX;
end 
// expected SEG4[ 2 ]
initial
begin
	SEG4_expected[2] = 1'bX;
end 
// expected SEG4[ 1 ]
initial
begin
	SEG4_expected[1] = 1'bX;
end 
// expected SEG4[ 0 ]
initial
begin
	SEG4_expected[0] = 1'bX;
end 

// expected p001
initial
begin
	p001_expected = 1'bX;
end 

// expected p01
initial
begin
	p01_expected = 1'bX;
end 

// expected p1
initial
begin
	p1_expected = 1'bX;
end 

// expected p10
initial
begin
	p10_expected = 1'bX;
end 
// generate trigger
always @(p1_expected or p1 or p01_expected or p01 or p001_expected or p001 or p10_expected or p10 or SEG1_expected or SEG1 or SEG2_expected or SEG2 or SEG3_expected or SEG3 or SEG4_expected or SEG4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected p1 = %b | expected p01 = %b | expected p001 = %b | expected p10 = %b | expected SEG1 = %b | expected SEG2 = %b | expected SEG3 = %b | expected SEG4 = %b | ",p1_expected_prev,p01_expected_prev,p001_expected_prev,p10_expected_prev,SEG1_expected_prev,SEG2_expected_prev,SEG3_expected_prev,SEG4_expected_prev);
	$display("| real p1 = %b | real p01 = %b | real p001 = %b | real p10 = %b | real SEG1 = %b | real SEG2 = %b | real SEG3 = %b | real SEG4 = %b | ",p1_prev,p01_prev,p001_prev,p10_prev,SEG1_prev,SEG2_prev,SEG3_prev,SEG4_prev);
`endif
	if (
		( p1_expected_prev !== 1'bx ) && ( p1_prev !== p1_expected_prev )
		&& ((p1_expected_prev !== last_p1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p1_expected_prev);
		$display ("     Real value = %b", p1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_p1_exp = p1_expected_prev;
	end
	if (
		( p01_expected_prev !== 1'bx ) && ( p01_prev !== p01_expected_prev )
		&& ((p01_expected_prev !== last_p01_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p01 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p01_expected_prev);
		$display ("     Real value = %b", p01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_p01_exp = p01_expected_prev;
	end
	if (
		( p001_expected_prev !== 1'bx ) && ( p001_prev !== p001_expected_prev )
		&& ((p001_expected_prev !== last_p001_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p001 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p001_expected_prev);
		$display ("     Real value = %b", p001_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_p001_exp = p001_expected_prev;
	end
	if (
		( p10_expected_prev !== 1'bx ) && ( p10_prev !== p10_expected_prev )
		&& ((p10_expected_prev !== last_p10_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port p10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", p10_expected_prev);
		$display ("     Real value = %b", p10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_p10_exp = p10_expected_prev;
	end
	if (
		( SEG1_expected_prev[0] !== 1'bx ) && ( SEG1_prev[0] !== SEG1_expected_prev[0] )
		&& ((SEG1_expected_prev[0] !== last_SEG1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[0] = SEG1_expected_prev[0];
	end
	if (
		( SEG1_expected_prev[1] !== 1'bx ) && ( SEG1_prev[1] !== SEG1_expected_prev[1] )
		&& ((SEG1_expected_prev[1] !== last_SEG1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[1] = SEG1_expected_prev[1];
	end
	if (
		( SEG1_expected_prev[2] !== 1'bx ) && ( SEG1_prev[2] !== SEG1_expected_prev[2] )
		&& ((SEG1_expected_prev[2] !== last_SEG1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[2] = SEG1_expected_prev[2];
	end
	if (
		( SEG1_expected_prev[3] !== 1'bx ) && ( SEG1_prev[3] !== SEG1_expected_prev[3] )
		&& ((SEG1_expected_prev[3] !== last_SEG1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[3] = SEG1_expected_prev[3];
	end
	if (
		( SEG1_expected_prev[4] !== 1'bx ) && ( SEG1_prev[4] !== SEG1_expected_prev[4] )
		&& ((SEG1_expected_prev[4] !== last_SEG1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[4] = SEG1_expected_prev[4];
	end
	if (
		( SEG1_expected_prev[5] !== 1'bx ) && ( SEG1_prev[5] !== SEG1_expected_prev[5] )
		&& ((SEG1_expected_prev[5] !== last_SEG1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[5] = SEG1_expected_prev[5];
	end
	if (
		( SEG1_expected_prev[6] !== 1'bx ) && ( SEG1_prev[6] !== SEG1_expected_prev[6] )
		&& ((SEG1_expected_prev[6] !== last_SEG1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG1_expected_prev);
		$display ("     Real value = %b", SEG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEG1_exp[6] = SEG1_expected_prev[6];
	end
	if (
		( SEG2_expected_prev[0] !== 1'bx ) && ( SEG2_prev[0] !== SEG2_expected_prev[0] )
		&& ((SEG2_expected_prev[0] !== last_SEG2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[0] = SEG2_expected_prev[0];
	end
	if (
		( SEG2_expected_prev[1] !== 1'bx ) && ( SEG2_prev[1] !== SEG2_expected_prev[1] )
		&& ((SEG2_expected_prev[1] !== last_SEG2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[1] = SEG2_expected_prev[1];
	end
	if (
		( SEG2_expected_prev[2] !== 1'bx ) && ( SEG2_prev[2] !== SEG2_expected_prev[2] )
		&& ((SEG2_expected_prev[2] !== last_SEG2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[2] = SEG2_expected_prev[2];
	end
	if (
		( SEG2_expected_prev[3] !== 1'bx ) && ( SEG2_prev[3] !== SEG2_expected_prev[3] )
		&& ((SEG2_expected_prev[3] !== last_SEG2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[3] = SEG2_expected_prev[3];
	end
	if (
		( SEG2_expected_prev[4] !== 1'bx ) && ( SEG2_prev[4] !== SEG2_expected_prev[4] )
		&& ((SEG2_expected_prev[4] !== last_SEG2_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[4] = SEG2_expected_prev[4];
	end
	if (
		( SEG2_expected_prev[5] !== 1'bx ) && ( SEG2_prev[5] !== SEG2_expected_prev[5] )
		&& ((SEG2_expected_prev[5] !== last_SEG2_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[5] = SEG2_expected_prev[5];
	end
	if (
		( SEG2_expected_prev[6] !== 1'bx ) && ( SEG2_prev[6] !== SEG2_expected_prev[6] )
		&& ((SEG2_expected_prev[6] !== last_SEG2_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG2_expected_prev);
		$display ("     Real value = %b", SEG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SEG2_exp[6] = SEG2_expected_prev[6];
	end
	if (
		( SEG3_expected_prev[0] !== 1'bx ) && ( SEG3_prev[0] !== SEG3_expected_prev[0] )
		&& ((SEG3_expected_prev[0] !== last_SEG3_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[0] = SEG3_expected_prev[0];
	end
	if (
		( SEG3_expected_prev[1] !== 1'bx ) && ( SEG3_prev[1] !== SEG3_expected_prev[1] )
		&& ((SEG3_expected_prev[1] !== last_SEG3_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[1] = SEG3_expected_prev[1];
	end
	if (
		( SEG3_expected_prev[2] !== 1'bx ) && ( SEG3_prev[2] !== SEG3_expected_prev[2] )
		&& ((SEG3_expected_prev[2] !== last_SEG3_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[2] = SEG3_expected_prev[2];
	end
	if (
		( SEG3_expected_prev[3] !== 1'bx ) && ( SEG3_prev[3] !== SEG3_expected_prev[3] )
		&& ((SEG3_expected_prev[3] !== last_SEG3_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[3] = SEG3_expected_prev[3];
	end
	if (
		( SEG3_expected_prev[4] !== 1'bx ) && ( SEG3_prev[4] !== SEG3_expected_prev[4] )
		&& ((SEG3_expected_prev[4] !== last_SEG3_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[4] = SEG3_expected_prev[4];
	end
	if (
		( SEG3_expected_prev[5] !== 1'bx ) && ( SEG3_prev[5] !== SEG3_expected_prev[5] )
		&& ((SEG3_expected_prev[5] !== last_SEG3_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[5] = SEG3_expected_prev[5];
	end
	if (
		( SEG3_expected_prev[6] !== 1'bx ) && ( SEG3_prev[6] !== SEG3_expected_prev[6] )
		&& ((SEG3_expected_prev[6] !== last_SEG3_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG3_expected_prev);
		$display ("     Real value = %b", SEG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEG3_exp[6] = SEG3_expected_prev[6];
	end
	if (
		( SEG4_expected_prev[0] !== 1'bx ) && ( SEG4_prev[0] !== SEG4_expected_prev[0] )
		&& ((SEG4_expected_prev[0] !== last_SEG4_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG4_expected_prev);
		$display ("     Real value = %b", SEG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SEG4_exp[0] = SEG4_expected_prev[0];
	end
	if (
		( SEG4_expected_prev[1] !== 1'bx ) && ( SEG4_prev[1] !== SEG4_expected_prev[1] )
		&& ((SEG4_expected_prev[1] !== last_SEG4_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG4_expected_prev);
		$display ("     Real value = %b", SEG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SEG4_exp[1] = SEG4_expected_prev[1];
	end
	if (
		( SEG4_expected_prev[2] !== 1'bx ) && ( SEG4_prev[2] !== SEG4_expected_prev[2] )
		&& ((SEG4_expected_prev[2] !== last_SEG4_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG4_expected_prev);
		$display ("     Real value = %b", SEG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SEG4_exp[2] = SEG4_expected_prev[2];
	end
	if (
		( SEG4_expected_prev[3] !== 1'bx ) && ( SEG4_prev[3] !== SEG4_expected_prev[3] )
		&& ((SEG4_expected_prev[3] !== last_SEG4_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG4_expected_prev);
		$display ("     Real value = %b", SEG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SEG4_exp[3] = SEG4_expected_prev[3];
	end
	if (
		( SEG4_expected_prev[4] !== 1'bx ) && ( SEG4_prev[4] !== SEG4_expected_prev[4] )
		&& ((SEG4_expected_prev[4] !== last_SEG4_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG4_expected_prev);
		$display ("     Real value = %b", SEG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SEG4_exp[4] = SEG4_expected_prev[4];
	end
	if (
		( SEG4_expected_prev[5] !== 1'bx ) && ( SEG4_prev[5] !== SEG4_expected_prev[5] )
		&& ((SEG4_expected_prev[5] !== last_SEG4_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG4_expected_prev);
		$display ("     Real value = %b", SEG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SEG4_exp[5] = SEG4_expected_prev[5];
	end
	if (
		( SEG4_expected_prev[6] !== 1'bx ) && ( SEG4_prev[6] !== SEG4_expected_prev[6] )
		&& ((SEG4_expected_prev[6] !== last_SEG4_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG4_expected_prev);
		$display ("     Real value = %b", SEG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SEG4_exp[6] = SEG4_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module timer_bdf_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg rst;
// wires                                               
wire p1;
wire p01;
wire p001;
wire p10;
wire [6:0] SEG1;
wire [6:0] SEG2;
wire [6:0] SEG3;
wire [6:0] SEG4;

wire sampler;                             

// assign statements (if any)                          
timer_bdf i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.p1(p1),
	.p01(p01),
	.p001(p001),
	.p10(p10),
	.rst(rst),
	.SEG1(SEG1),
	.SEG2(SEG2),
	.SEG3(SEG3),
	.SEG4(SEG4)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b0;
end 

timer_bdf_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.rst(rst),
	.sampler_tx(sampler)
);

timer_bdf_vlg_check_tst tb_out(
	.p1(p1),
	.p01(p01),
	.p001(p001),
	.p10(p10),
	.SEG1(SEG1),
	.SEG2(SEG2),
	.SEG3(SEG3),
	.SEG4(SEG4),
	.sampler_rx(sampler)
);
endmodule

