// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/06/2023 14:07:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    timer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module timer_vlg_sample_tst(
	clk,
	rst,
	sampler_tx
);
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module timer_vlg_check_tst (
	pul_1,
	pul_01,
	pul_001,
	pul_10,
	sampler_rx
);
input  pul_1;
input  pul_01;
input  pul_001;
input  pul_10;
input sampler_rx;

reg  pul_1_expected;
reg  pul_01_expected;
reg  pul_001_expected;
reg  pul_10_expected;

reg  pul_1_prev;
reg  pul_01_prev;
reg  pul_001_prev;
reg  pul_10_prev;

reg  pul_1_expected_prev;
reg  pul_01_expected_prev;
reg  pul_001_expected_prev;
reg  pul_10_expected_prev;

reg  last_pul_1_exp;
reg  last_pul_01_exp;
reg  last_pul_001_exp;
reg  last_pul_10_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	pul_1_prev = pul_1;
	pul_01_prev = pul_01;
	pul_001_prev = pul_001;
	pul_10_prev = pul_10;
end

// update expected /o prevs

always @(trigger)
begin
	pul_1_expected_prev = pul_1_expected;
	pul_01_expected_prev = pul_01_expected;
	pul_001_expected_prev = pul_001_expected;
	pul_10_expected_prev = pul_10_expected;
end



// expected pul_001
initial
begin
	pul_001_expected = 1'bX;
	pul_001_expected = #999000 1'b0;
end 

// expected pul_01
initial
begin
	pul_01_expected = 1'bX;
	pul_01_expected = #999000 1'b0;
end 

// expected pul_1
initial
begin
	pul_1_expected = 1'bX;
	pul_1_expected = #2999000 1'b0;
end 

// expected pul_10
initial
begin
	pul_10_expected = 1'bX;
end 
// generate trigger
always @(pul_1_expected or pul_1 or pul_01_expected or pul_01 or pul_001_expected or pul_001 or pul_10_expected or pul_10)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pul_1 = %b | expected pul_01 = %b | expected pul_001 = %b | expected pul_10 = %b | ",pul_1_expected_prev,pul_01_expected_prev,pul_001_expected_prev,pul_10_expected_prev);
	$display("| real pul_1 = %b | real pul_01 = %b | real pul_001 = %b | real pul_10 = %b | ",pul_1_prev,pul_01_prev,pul_001_prev,pul_10_prev);
`endif
	if (
		( pul_1_expected_prev !== 1'bx ) && ( pul_1_prev !== pul_1_expected_prev )
		&& ((pul_1_expected_prev !== last_pul_1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pul_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pul_1_expected_prev);
		$display ("     Real value = %b", pul_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pul_1_exp = pul_1_expected_prev;
	end
	if (
		( pul_01_expected_prev !== 1'bx ) && ( pul_01_prev !== pul_01_expected_prev )
		&& ((pul_01_expected_prev !== last_pul_01_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pul_01 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pul_01_expected_prev);
		$display ("     Real value = %b", pul_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pul_01_exp = pul_01_expected_prev;
	end
	if (
		( pul_001_expected_prev !== 1'bx ) && ( pul_001_prev !== pul_001_expected_prev )
		&& ((pul_001_expected_prev !== last_pul_001_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pul_001 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pul_001_expected_prev);
		$display ("     Real value = %b", pul_001_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pul_001_exp = pul_001_expected_prev;
	end
	if (
		( pul_10_expected_prev !== 1'bx ) && ( pul_10_prev !== pul_10_expected_prev )
		&& ((pul_10_expected_prev !== last_pul_10_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pul_10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pul_10_expected_prev);
		$display ("     Real value = %b", pul_10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pul_10_exp = pul_10_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module timer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
// wires                                               
wire pul_1;
wire pul_01;
wire pul_001;
wire pul_10;

wire sampler;                             

// assign statements (if any)                          
timer i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.pul_1(pul_1),
	.pul_01(pul_01),
	.pul_001(pul_001),
	.pul_10(pul_10),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b0;
end 

timer_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

timer_vlg_check_tst tb_out(
	.pul_1(pul_1),
	.pul_01(pul_01),
	.pul_001(pul_001),
	.pul_10(pul_10),
	.sampler_rx(sampler)
);
endmodule

