// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/15/2023 17:16:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    i2s
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module i2s_vlg_sample_tst(
	clk,
	LOAD,
	para_in,
	rst,
	sampler_tx
);
input  clk;
input  LOAD;
input [31:0] para_in;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or LOAD or para_in or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module i2s_vlg_check_tst (
	serial_out,
	sampler_rx
);
input  serial_out;
input sampler_rx;

reg  serial_out_expected;

reg  serial_out_prev;

reg  serial_out_expected_prev;

reg  last_serial_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	serial_out_prev = serial_out;
end

// update expected /o prevs

always @(trigger)
begin
	serial_out_expected_prev = serial_out_expected;
end



// expected serial_out
initial
begin
	serial_out_expected = 1'bX;
	serial_out_expected = #999000 1'b0;
end 
// generate trigger
always @(serial_out_expected or serial_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected serial_out = %b | ",serial_out_expected_prev);
	$display("| real serial_out = %b | ",serial_out_prev);
`endif
	if (
		( serial_out_expected_prev !== 1'bx ) && ( serial_out_prev !== serial_out_expected_prev )
		&& ((serial_out_expected_prev !== last_serial_out_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port serial_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", serial_out_expected_prev);
		$display ("     Real value = %b", serial_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_serial_out_exp = serial_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module i2s_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg LOAD;
reg [31:0] para_in;
reg rst;
// wires                                               
wire serial_out;

wire sampler;                             

// assign statements (if any)                          
i2s i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.LOAD(LOAD),
	.para_in(para_in),
	.rst(rst),
	.serial_out(serial_out)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #960000 1'b1;
	rst = #200000 1'b0;
	rst = #1360000 1'b1;
	rst = #120000 1'b0;
end 

// LOAD
initial
begin
	LOAD = 1'b1;
	LOAD = #240000 1'b0;
	LOAD = #800000 1'b1;
	LOAD = #120000 1'b0;
	LOAD = #1440000 1'b1;
	LOAD = #40000 1'b0;
end 
// para_in[ 31 ]
initial
begin
	para_in[31] = 1'b1;
end 
// para_in[ 30 ]
initial
begin
	para_in[30] = 1'b1;
end 
// para_in[ 29 ]
initial
begin
	para_in[29] = 1'b0;
end 
// para_in[ 28 ]
initial
begin
	para_in[28] = 1'b0;
end 
// para_in[ 27 ]
initial
begin
	para_in[27] = 1'b1;
end 
// para_in[ 26 ]
initial
begin
	para_in[26] = 1'b0;
end 
// para_in[ 25 ]
initial
begin
	para_in[25] = 1'b0;
end 
// para_in[ 24 ]
initial
begin
	para_in[24] = 1'b0;
end 
// para_in[ 23 ]
initial
begin
	para_in[23] = 1'b0;
end 
// para_in[ 22 ]
initial
begin
	para_in[22] = 1'b0;
end 
// para_in[ 21 ]
initial
begin
	para_in[21] = 1'b0;
end 
// para_in[ 20 ]
initial
begin
	para_in[20] = 1'b1;
end 
// para_in[ 19 ]
initial
begin
	para_in[19] = 1'b0;
end 
// para_in[ 18 ]
initial
begin
	para_in[18] = 1'b0;
end 
// para_in[ 17 ]
initial
begin
	para_in[17] = 1'b0;
end 
// para_in[ 16 ]
initial
begin
	para_in[16] = 1'b0;
end 
// para_in[ 15 ]
initial
begin
	para_in[15] = 1'b0;
end 
// para_in[ 14 ]
initial
begin
	para_in[14] = 1'b0;
end 
// para_in[ 13 ]
initial
begin
	para_in[13] = 1'b0;
end 
// para_in[ 12 ]
initial
begin
	para_in[12] = 1'b0;
end 
// para_in[ 11 ]
initial
begin
	para_in[11] = 1'b0;
end 
// para_in[ 10 ]
initial
begin
	para_in[10] = 1'b0;
end 
// para_in[ 9 ]
initial
begin
	para_in[9] = 1'b0;
end 
// para_in[ 8 ]
initial
begin
	para_in[8] = 1'b0;
end 
// para_in[ 7 ]
initial
begin
	para_in[7] = 1'b0;
end 
// para_in[ 6 ]
initial
begin
	para_in[6] = 1'b0;
end 
// para_in[ 5 ]
initial
begin
	para_in[5] = 1'b0;
end 
// para_in[ 4 ]
initial
begin
	para_in[4] = 1'b0;
end 
// para_in[ 3 ]
initial
begin
	para_in[3] = 1'b0;
end 
// para_in[ 2 ]
initial
begin
	para_in[2] = 1'b1;
end 
// para_in[ 1 ]
initial
begin
	para_in[1] = 1'b0;
end 
// para_in[ 0 ]
initial
begin
	para_in[0] = 1'b0;
end 

i2s_vlg_sample_tst tb_sample (
	.clk(clk),
	.LOAD(LOAD),
	.para_in(para_in),
	.rst(rst),
	.sampler_tx(sampler)
);

i2s_vlg_check_tst tb_out(
	.serial_out(serial_out),
	.sampler_rx(sampler)
);
endmodule

