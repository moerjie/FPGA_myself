// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/16/2023 14:38:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    i2s
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module i2s_vlg_sample_tst(
	BUTTON,
	CLOCK_50,
	pin_name3,
	sampler_tx
);
input [2:2] BUTTON;
input  CLOCK_50;
input  pin_name3;
output sampler_tx;

reg sample;
time current_time;
always @(BUTTON or CLOCK_50 or pin_name3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module i2s_vlg_check_tst (
	LRCK,
	MCLK,
	SCLK,
	SDATA,
	sampler_rx
);
input  LRCK;
input  MCLK;
input  SCLK;
input  SDATA;
input sampler_rx;

reg  LRCK_expected;
reg  MCLK_expected;
reg  SCLK_expected;
reg  SDATA_expected;

reg  LRCK_prev;
reg  MCLK_prev;
reg  SCLK_prev;
reg  SDATA_prev;

reg  LRCK_expected_prev;
reg  MCLK_expected_prev;
reg  SCLK_expected_prev;

reg  last_LRCK_exp;
reg  last_MCLK_exp;
reg  last_SCLK_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	LRCK_prev = LRCK;
	MCLK_prev = MCLK;
	SCLK_prev = SCLK;
	SDATA_prev = SDATA;
end

// update expected /o prevs

always @(trigger)
begin
	LRCK_expected_prev = LRCK_expected;
	MCLK_expected_prev = MCLK_expected;
	SCLK_expected_prev = SCLK_expected;
end



// expected MCLK
initial
begin
	MCLK_expected = 1'bX;
end 

// expected LRCK
initial
begin
	LRCK_expected = 1'bX;
end 

// expected SCLK
initial
begin
	SCLK_expected = 1'bX;
end 
// generate trigger
always @(LRCK_expected or LRCK or MCLK_expected or MCLK or SCLK_expected or SCLK or SDATA_expected or SDATA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LRCK = %b | expected MCLK = %b | expected SCLK = %b | expected SDATA = %b | ",LRCK_expected_prev,MCLK_expected_prev,SCLK_expected_prev,SDATA_expected_prev);
	$display("| real LRCK = %b | real MCLK = %b | real SCLK = %b | real SDATA = %b | ",LRCK_prev,MCLK_prev,SCLK_prev,SDATA_prev);
`endif
	if (
		( LRCK_expected_prev !== 1'bx ) && ( LRCK_prev !== LRCK_expected_prev )
		&& ((LRCK_expected_prev !== last_LRCK_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LRCK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LRCK_expected_prev);
		$display ("     Real value = %b", LRCK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LRCK_exp = LRCK_expected_prev;
	end
	if (
		( MCLK_expected_prev !== 1'bx ) && ( MCLK_prev !== MCLK_expected_prev )
		&& ((MCLK_expected_prev !== last_MCLK_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MCLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MCLK_expected_prev);
		$display ("     Real value = %b", MCLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MCLK_exp = MCLK_expected_prev;
	end
	if (
		( SCLK_expected_prev !== 1'bx ) && ( SCLK_prev !== SCLK_expected_prev )
		&& ((SCLK_expected_prev !== last_SCLK_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCLK_expected_prev);
		$display ("     Real value = %b", SCLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SCLK_exp = SCLK_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module i2s_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:2] BUTTON;
reg CLOCK_50;
reg pin_name3;
// wires                                               
wire LRCK;
wire MCLK;
wire SCLK;
wire SDATA;

wire sampler;                             

// assign statements (if any)                          
i2s i1 (
// port map - connection between master ports and signals/registers   
	.BUTTON(BUTTON),
	.CLOCK_50(CLOCK_50),
	.LRCK(LRCK),
	.MCLK(MCLK),
	.pin_name3(pin_name3),
	.SCLK(SCLK),
	.SDATA(SDATA)
);

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #10000 1'b1;
	#10000;
end 

i2s_vlg_sample_tst tb_sample (
	.BUTTON(BUTTON),
	.CLOCK_50(CLOCK_50),
	.pin_name3(pin_name3),
	.sampler_tx(sampler)
);

i2s_vlg_check_tst tb_out(
	.LRCK(LRCK),
	.MCLK(MCLK),
	.SCLK(SCLK),
	.SDATA(SDATA),
	.sampler_rx(sampler)
);
endmodule

