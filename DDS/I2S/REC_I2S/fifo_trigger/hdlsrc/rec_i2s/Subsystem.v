// -------------------------------------------------------------
// 
// File Name: F:\Git_Repository\FPGA_myself\DDS\I2S\REC_I2S\fifo_trigger\hdlsrc\rec_i2s\Subsystem.v
// Created: 2023-10-29 14:30:23
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: rec_i2s/REC_I2S_NOFIFO/Subsystem
// Hierarchy Level: 1
// Model version: 1.58
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           enb,
           SERIAL_IN,
           SHIFT_ENABLE,
           DATA_OUT_ENABLE,
           PARA_OUT_signal1_signal1_signal1_signal1_signal1,
           PARA_OUT_signal1_signal1_signal1_signal1_signal2,
           PARA_OUT_signal1_signal1_signal1_signal2_signal1,
           PARA_OUT_signal1_signal1_signal1_signal2_signal2,
           PARA_OUT_signal1_signal1_signal2_signal1_signal1,
           PARA_OUT_signal1_signal1_signal2_signal1_signal2,
           PARA_OUT_signal1_signal1_signal2_signal2_signal1,
           PARA_OUT_signal1_signal1_signal2_signal2_signal2,
           PARA_OUT_signal1_signal2_signal1_signal1_signal1,
           PARA_OUT_signal1_signal2_signal1_signal1_signal2,
           PARA_OUT_signal1_signal2_signal1_signal2_signal1,
           PARA_OUT_signal1_signal2_signal1_signal2_signal2,
           PARA_OUT_signal1_signal2_signal2_signal1_signal1,
           PARA_OUT_signal1_signal2_signal2_signal1_signal2,
           PARA_OUT_signal1_signal2_signal2_signal2_signal1,
           PARA_OUT_signal1_signal2_signal2_signal2_signal2,
           PARA_OUT_signal2_signal1_signal1_signal1_signal1,
           PARA_OUT_signal2_signal1_signal1_signal1_signal2,
           PARA_OUT_signal2_signal1_signal1_signal2_signal1,
           PARA_OUT_signal2_signal1_signal1_signal2_signal2,
           PARA_OUT_signal2_signal1_signal2_signal1_signal1,
           PARA_OUT_signal2_signal1_signal2_signal1_signal2,
           PARA_OUT_signal2_signal1_signal2_signal2_signal1,
           PARA_OUT_signal2_signal1_signal2_signal2_signal2,
           PARA_OUT_signal2_signal2_signal1_signal1_signal1,
           PARA_OUT_signal2_signal2_signal1_signal1_signal2,
           PARA_OUT_signal2_signal2_signal1_signal2_signal1,
           PARA_OUT_signal2_signal2_signal1_signal2_signal2,
           PARA_OUT_signal2_signal2_signal2_signal1_signal1,
           PARA_OUT_signal2_signal2_signal2_signal1_signal2,
           PARA_OUT_signal2_signal2_signal2_signal2_signal1,
           PARA_OUT_signal2_signal2_signal2_signal2_signal2);


  input   clk;
  input   reset;
  input   enb;
  input   SERIAL_IN;
  input   SHIFT_ENABLE;
  input   DATA_OUT_ENABLE;
  output  PARA_OUT_signal1_signal1_signal1_signal1_signal1;
  output  PARA_OUT_signal1_signal1_signal1_signal1_signal2;
  output  PARA_OUT_signal1_signal1_signal1_signal2_signal1;
  output  PARA_OUT_signal1_signal1_signal1_signal2_signal2;
  output  PARA_OUT_signal1_signal1_signal2_signal1_signal1;
  output  PARA_OUT_signal1_signal1_signal2_signal1_signal2;
  output  PARA_OUT_signal1_signal1_signal2_signal2_signal1;
  output  PARA_OUT_signal1_signal1_signal2_signal2_signal2;
  output  PARA_OUT_signal1_signal2_signal1_signal1_signal1;
  output  PARA_OUT_signal1_signal2_signal1_signal1_signal2;
  output  PARA_OUT_signal1_signal2_signal1_signal2_signal1;
  output  PARA_OUT_signal1_signal2_signal1_signal2_signal2;
  output  PARA_OUT_signal1_signal2_signal2_signal1_signal1;
  output  PARA_OUT_signal1_signal2_signal2_signal1_signal2;
  output  PARA_OUT_signal1_signal2_signal2_signal2_signal1;
  output  PARA_OUT_signal1_signal2_signal2_signal2_signal2;
  output  PARA_OUT_signal2_signal1_signal1_signal1_signal1;
  output  PARA_OUT_signal2_signal1_signal1_signal1_signal2;
  output  PARA_OUT_signal2_signal1_signal1_signal2_signal1;
  output  PARA_OUT_signal2_signal1_signal1_signal2_signal2;
  output  PARA_OUT_signal2_signal1_signal2_signal1_signal1;
  output  PARA_OUT_signal2_signal1_signal2_signal1_signal2;
  output  PARA_OUT_signal2_signal1_signal2_signal2_signal1;
  output  PARA_OUT_signal2_signal1_signal2_signal2_signal2;
  output  PARA_OUT_signal2_signal2_signal1_signal1_signal1;
  output  PARA_OUT_signal2_signal2_signal1_signal1_signal2;
  output  PARA_OUT_signal2_signal2_signal1_signal2_signal1;
  output  PARA_OUT_signal2_signal2_signal1_signal2_signal2;
  output  PARA_OUT_signal2_signal2_signal2_signal1_signal1;
  output  PARA_OUT_signal2_signal2_signal2_signal1_signal2;
  output  PARA_OUT_signal2_signal2_signal2_signal2_signal1;
  output  PARA_OUT_signal2_signal2_signal2_signal2_signal2;


  wire SIPO_16BIT_out1_signal1_signal1_signal1_signal1;
  wire SIPO_16BIT_out1_signal1_signal1_signal1_signal2;
  wire SIPO_16BIT_out1_signal1_signal1_signal2_signal1;
  wire SIPO_16BIT_out1_signal1_signal1_signal2_signal2;
  wire SIPO_16BIT_out1_signal1_signal2_signal1_signal1;
  wire SIPO_16BIT_out1_signal1_signal2_signal1_signal2;
  wire SIPO_16BIT_out1_signal1_signal2_signal2_signal1;
  wire SIPO_16BIT_out1_signal1_signal2_signal2_signal2;
  wire SIPO_16BIT_out1_signal2_signal1_signal1_signal1;
  wire SIPO_16BIT_out1_signal2_signal1_signal1_signal2;
  wire SIPO_16BIT_out1_signal2_signal1_signal2_signal1;
  wire SIPO_16BIT_out1_signal2_signal1_signal2_signal2;
  wire SIPO_16BIT_out1_signal2_signal2_signal1_signal1;
  wire SIPO_16BIT_out1_signal2_signal2_signal1_signal2;
  wire SIPO_16BIT_out1_signal2_signal2_signal2_signal1;
  wire SIPO_16BIT_out1_signal2_signal2_signal2_signal2;
  wire SIPO_16BIT_out2;
  wire TmpGroundAtSIPO_16BIT1Inport2_out1;
  wire SIPO_16BIT1_out1_signal1_signal1_signal1_signal1;
  wire SIPO_16BIT1_out1_signal1_signal1_signal1_signal2;
  wire SIPO_16BIT1_out1_signal1_signal1_signal2_signal1;
  wire SIPO_16BIT1_out1_signal1_signal1_signal2_signal2;
  wire SIPO_16BIT1_out1_signal1_signal2_signal1_signal1;
  wire SIPO_16BIT1_out1_signal1_signal2_signal1_signal2;
  wire SIPO_16BIT1_out1_signal1_signal2_signal2_signal1;
  wire SIPO_16BIT1_out1_signal1_signal2_signal2_signal2;
  wire SIPO_16BIT1_out1_signal2_signal1_signal1_signal1;
  wire SIPO_16BIT1_out1_signal2_signal1_signal1_signal2;
  wire SIPO_16BIT1_out1_signal2_signal1_signal2_signal1;
  wire SIPO_16BIT1_out1_signal2_signal1_signal2_signal2;
  wire SIPO_16BIT1_out1_signal2_signal2_signal1_signal1;
  wire SIPO_16BIT1_out1_signal2_signal2_signal1_signal2;
  wire SIPO_16BIT1_out1_signal2_signal2_signal2_signal1;
  wire SIPO_16BIT1_out1_signal2_signal2_signal2_signal2;
  reg  Delay_1_bypass_delay;  // ufix1
  reg  Delay_1_reg;  // ufix1
  wire signal1;
  reg  Delay_2_bypass_delay;  // ufix1
  reg  Delay_2_reg;  // ufix1
  wire signal2;
  reg  Delay_3_bypass_delay;  // ufix1
  reg  Delay_3_reg;  // ufix1
  wire signal1_1;
  reg  Delay_4_bypass_delay;  // ufix1
  reg  Delay_4_reg;  // ufix1
  wire signal2_1;
  reg  Delay_5_bypass_delay;  // ufix1
  reg  Delay_5_reg;  // ufix1
  wire signal1_2;
  reg  Delay_6_bypass_delay;  // ufix1
  reg  Delay_6_reg;  // ufix1
  wire signal2_2;
  reg  Delay_7_bypass_delay;  // ufix1
  reg  Delay_7_reg;  // ufix1
  wire signal1_3;
  reg  Delay_8_bypass_delay;  // ufix1
  reg  Delay_8_reg;  // ufix1
  wire signal2_3;
  reg  Delay_9_bypass_delay;  // ufix1
  reg  Delay_9_reg;  // ufix1
  wire signal1_4;
  reg  Delay_10_bypass_delay;  // ufix1
  reg  Delay_10_reg;  // ufix1
  wire signal2_4;
  reg  Delay_11_bypass_delay;  // ufix1
  reg  Delay_11_reg;  // ufix1
  wire signal1_5;
  reg  Delay_12_bypass_delay;  // ufix1
  reg  Delay_12_reg;  // ufix1
  wire signal2_5;
  reg  Delay_13_bypass_delay;  // ufix1
  reg  Delay_13_reg;  // ufix1
  wire signal1_6;
  reg  Delay_14_bypass_delay;  // ufix1
  reg  Delay_14_reg;  // ufix1
  wire signal2_6;
  reg  Delay_15_bypass_delay;  // ufix1
  reg  Delay_15_reg;  // ufix1
  wire signal1_7;
  reg  Delay_16_bypass_delay;  // ufix1
  reg  Delay_16_reg;  // ufix1
  wire signal2_7;
  reg  Delay_17_bypass_delay;  // ufix1
  reg  Delay_17_reg;  // ufix1
  wire signal1_8;
  reg  Delay_18_bypass_delay;  // ufix1
  reg  Delay_18_reg;  // ufix1
  wire signal2_8;
  reg  Delay_19_bypass_delay;  // ufix1
  reg  Delay_19_reg;  // ufix1
  wire signal1_9;
  reg  Delay_20_bypass_delay;  // ufix1
  reg  Delay_20_reg;  // ufix1
  wire signal2_9;
  reg  Delay_21_bypass_delay;  // ufix1
  reg  Delay_21_reg;  // ufix1
  wire signal1_10;
  reg  Delay_22_bypass_delay;  // ufix1
  reg  Delay_22_reg;  // ufix1
  wire signal2_10;
  reg  Delay_23_bypass_delay;  // ufix1
  reg  Delay_23_reg;  // ufix1
  wire signal1_11;
  reg  Delay_24_bypass_delay;  // ufix1
  reg  Delay_24_reg;  // ufix1
  wire signal2_11;
  reg  Delay_25_bypass_delay;  // ufix1
  reg  Delay_25_reg;  // ufix1
  wire signal1_12;
  reg  Delay_26_bypass_delay;  // ufix1
  reg  Delay_26_reg;  // ufix1
  wire signal2_12;
  reg  Delay_27_bypass_delay;  // ufix1
  reg  Delay_27_reg;  // ufix1
  wire signal1_13;
  reg  Delay_28_bypass_delay;  // ufix1
  reg  Delay_28_reg;  // ufix1
  wire signal2_13;
  reg  Delay_29_bypass_delay;  // ufix1
  reg  Delay_29_reg;  // ufix1
  wire signal1_14;
  reg  Delay_30_bypass_delay;  // ufix1
  reg  Delay_30_reg;  // ufix1
  wire signal2_14;
  reg  Delay_31_bypass_delay;  // ufix1
  reg  Delay_31_reg;  // ufix1
  wire signal1_15;
  reg  Delay_32_bypass_delay;  // ufix1
  reg  Delay_32_reg;  // ufix1
  wire signal2_15;


  SIPO_16BIT u_SIPO_16BIT (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .SERIAL_IN(SERIAL_IN),
                           .ENABLE(SHIFT_ENABLE),
                           .PARA_OUT_signal1_signal1_signal1_signal1(SIPO_16BIT_out1_signal1_signal1_signal1_signal1),
                           .PARA_OUT_signal1_signal1_signal1_signal2(SIPO_16BIT_out1_signal1_signal1_signal1_signal2),
                           .PARA_OUT_signal1_signal1_signal2_signal1(SIPO_16BIT_out1_signal1_signal1_signal2_signal1),
                           .PARA_OUT_signal1_signal1_signal2_signal2(SIPO_16BIT_out1_signal1_signal1_signal2_signal2),
                           .PARA_OUT_signal1_signal2_signal1_signal1(SIPO_16BIT_out1_signal1_signal2_signal1_signal1),
                           .PARA_OUT_signal1_signal2_signal1_signal2(SIPO_16BIT_out1_signal1_signal2_signal1_signal2),
                           .PARA_OUT_signal1_signal2_signal2_signal1(SIPO_16BIT_out1_signal1_signal2_signal2_signal1),
                           .PARA_OUT_signal1_signal2_signal2_signal2(SIPO_16BIT_out1_signal1_signal2_signal2_signal2),
                           .PARA_OUT_signal2_signal1_signal1_signal1(SIPO_16BIT_out1_signal2_signal1_signal1_signal1),
                           .PARA_OUT_signal2_signal1_signal1_signal2(SIPO_16BIT_out1_signal2_signal1_signal1_signal2),
                           .PARA_OUT_signal2_signal1_signal2_signal1(SIPO_16BIT_out1_signal2_signal1_signal2_signal1),
                           .PARA_OUT_signal2_signal1_signal2_signal2(SIPO_16BIT_out1_signal2_signal1_signal2_signal2),
                           .PARA_OUT_signal2_signal2_signal1_signal1(SIPO_16BIT_out1_signal2_signal2_signal1_signal1),
                           .PARA_OUT_signal2_signal2_signal1_signal2(SIPO_16BIT_out1_signal2_signal2_signal1_signal2),
                           .PARA_OUT_signal2_signal2_signal2_signal1(SIPO_16BIT_out1_signal2_signal2_signal2_signal1),
                           .PARA_OUT_signal2_signal2_signal2_signal2(SIPO_16BIT_out1_signal2_signal2_signal2_signal2),
                           .SERIAL_OUT(SIPO_16BIT_out2)
                           );

  assign TmpGroundAtSIPO_16BIT1Inport2_out1 = 1'b0;



  SIPO_16BIT1 u_SIPO_16BIT1 (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .SERIAL_IN(SIPO_16BIT_out2),
                             .ENABLE(TmpGroundAtSIPO_16BIT1Inport2_out1),
                             .PARA_OUT_signal1_signal1_signal1_signal1(SIPO_16BIT1_out1_signal1_signal1_signal1_signal1),
                             .PARA_OUT_signal1_signal1_signal1_signal2(SIPO_16BIT1_out1_signal1_signal1_signal1_signal2),
                             .PARA_OUT_signal1_signal1_signal2_signal1(SIPO_16BIT1_out1_signal1_signal1_signal2_signal1),
                             .PARA_OUT_signal1_signal1_signal2_signal2(SIPO_16BIT1_out1_signal1_signal1_signal2_signal2),
                             .PARA_OUT_signal1_signal2_signal1_signal1(SIPO_16BIT1_out1_signal1_signal2_signal1_signal1),
                             .PARA_OUT_signal1_signal2_signal1_signal2(SIPO_16BIT1_out1_signal1_signal2_signal1_signal2),
                             .PARA_OUT_signal1_signal2_signal2_signal1(SIPO_16BIT1_out1_signal1_signal2_signal2_signal1),
                             .PARA_OUT_signal1_signal2_signal2_signal2(SIPO_16BIT1_out1_signal1_signal2_signal2_signal2),
                             .PARA_OUT_signal2_signal1_signal1_signal1(SIPO_16BIT1_out1_signal2_signal1_signal1_signal1),
                             .PARA_OUT_signal2_signal1_signal1_signal2(SIPO_16BIT1_out1_signal2_signal1_signal1_signal2),
                             .PARA_OUT_signal2_signal1_signal2_signal1(SIPO_16BIT1_out1_signal2_signal1_signal2_signal1),
                             .PARA_OUT_signal2_signal1_signal2_signal2(SIPO_16BIT1_out1_signal2_signal1_signal2_signal2),
                             .PARA_OUT_signal2_signal2_signal1_signal1(SIPO_16BIT1_out1_signal2_signal2_signal1_signal1),
                             .PARA_OUT_signal2_signal2_signal1_signal2(SIPO_16BIT1_out1_signal2_signal2_signal1_signal2),
                             .PARA_OUT_signal2_signal2_signal2_signal1(SIPO_16BIT1_out1_signal2_signal2_signal2_signal1),
                             .PARA_OUT_signal2_signal2_signal2_signal2(SIPO_16BIT1_out1_signal2_signal2_signal2_signal2)
                             );

  always @(posedge clk or posedge reset)
    begin : Delay_1_process
      if (reset == 1'b1) begin
        Delay_1_bypass_delay <= 1'b0;
        Delay_1_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_1_bypass_delay <= Delay_1_reg;
          Delay_1_reg <= SIPO_16BIT1_out1_signal1_signal1_signal1_signal1;
        end
      end
    end

  assign signal1 = (DATA_OUT_ENABLE == 1'b1 ? Delay_1_reg :
              Delay_1_bypass_delay);



  assign PARA_OUT_signal1_signal1_signal1_signal1_signal1 = signal1;

  always @(posedge clk or posedge reset)
    begin : Delay_2_process
      if (reset == 1'b1) begin
        Delay_2_bypass_delay <= 1'b0;
        Delay_2_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_2_bypass_delay <= Delay_2_reg;
          Delay_2_reg <= SIPO_16BIT1_out1_signal1_signal1_signal1_signal2;
        end
      end
    end

  assign signal2 = (DATA_OUT_ENABLE == 1'b1 ? Delay_2_reg :
              Delay_2_bypass_delay);



  assign PARA_OUT_signal1_signal1_signal1_signal1_signal2 = signal2;

  always @(posedge clk or posedge reset)
    begin : Delay_3_process
      if (reset == 1'b1) begin
        Delay_3_bypass_delay <= 1'b0;
        Delay_3_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_3_bypass_delay <= Delay_3_reg;
          Delay_3_reg <= SIPO_16BIT1_out1_signal1_signal1_signal2_signal1;
        end
      end
    end

  assign signal1_1 = (DATA_OUT_ENABLE == 1'b1 ? Delay_3_reg :
              Delay_3_bypass_delay);



  assign PARA_OUT_signal1_signal1_signal1_signal2_signal1 = signal1_1;

  always @(posedge clk or posedge reset)
    begin : Delay_4_process
      if (reset == 1'b1) begin
        Delay_4_bypass_delay <= 1'b0;
        Delay_4_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_4_bypass_delay <= Delay_4_reg;
          Delay_4_reg <= SIPO_16BIT1_out1_signal1_signal1_signal2_signal2;
        end
      end
    end

  assign signal2_1 = (DATA_OUT_ENABLE == 1'b1 ? Delay_4_reg :
              Delay_4_bypass_delay);



  assign PARA_OUT_signal1_signal1_signal1_signal2_signal2 = signal2_1;

  always @(posedge clk or posedge reset)
    begin : Delay_5_process
      if (reset == 1'b1) begin
        Delay_5_bypass_delay <= 1'b0;
        Delay_5_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_5_bypass_delay <= Delay_5_reg;
          Delay_5_reg <= SIPO_16BIT1_out1_signal1_signal2_signal1_signal1;
        end
      end
    end

  assign signal1_2 = (DATA_OUT_ENABLE == 1'b1 ? Delay_5_reg :
              Delay_5_bypass_delay);



  assign PARA_OUT_signal1_signal1_signal2_signal1_signal1 = signal1_2;

  always @(posedge clk or posedge reset)
    begin : Delay_6_process
      if (reset == 1'b1) begin
        Delay_6_bypass_delay <= 1'b0;
        Delay_6_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_6_bypass_delay <= Delay_6_reg;
          Delay_6_reg <= SIPO_16BIT1_out1_signal1_signal2_signal1_signal2;
        end
      end
    end

  assign signal2_2 = (DATA_OUT_ENABLE == 1'b1 ? Delay_6_reg :
              Delay_6_bypass_delay);



  assign PARA_OUT_signal1_signal1_signal2_signal1_signal2 = signal2_2;

  always @(posedge clk or posedge reset)
    begin : Delay_7_process
      if (reset == 1'b1) begin
        Delay_7_bypass_delay <= 1'b0;
        Delay_7_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_7_bypass_delay <= Delay_7_reg;
          Delay_7_reg <= SIPO_16BIT1_out1_signal1_signal2_signal2_signal1;
        end
      end
    end

  assign signal1_3 = (DATA_OUT_ENABLE == 1'b1 ? Delay_7_reg :
              Delay_7_bypass_delay);



  assign PARA_OUT_signal1_signal1_signal2_signal2_signal1 = signal1_3;

  always @(posedge clk or posedge reset)
    begin : Delay_8_process
      if (reset == 1'b1) begin
        Delay_8_bypass_delay <= 1'b0;
        Delay_8_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_8_bypass_delay <= Delay_8_reg;
          Delay_8_reg <= SIPO_16BIT1_out1_signal1_signal2_signal2_signal2;
        end
      end
    end

  assign signal2_3 = (DATA_OUT_ENABLE == 1'b1 ? Delay_8_reg :
              Delay_8_bypass_delay);



  assign PARA_OUT_signal1_signal1_signal2_signal2_signal2 = signal2_3;

  always @(posedge clk or posedge reset)
    begin : Delay_9_process
      if (reset == 1'b1) begin
        Delay_9_bypass_delay <= 1'b0;
        Delay_9_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_9_bypass_delay <= Delay_9_reg;
          Delay_9_reg <= SIPO_16BIT1_out1_signal2_signal1_signal1_signal1;
        end
      end
    end

  assign signal1_4 = (DATA_OUT_ENABLE == 1'b1 ? Delay_9_reg :
              Delay_9_bypass_delay);



  assign PARA_OUT_signal1_signal2_signal1_signal1_signal1 = signal1_4;

  always @(posedge clk or posedge reset)
    begin : Delay_10_process
      if (reset == 1'b1) begin
        Delay_10_bypass_delay <= 1'b0;
        Delay_10_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_10_bypass_delay <= Delay_10_reg;
          Delay_10_reg <= SIPO_16BIT1_out1_signal2_signal1_signal1_signal2;
        end
      end
    end

  assign signal2_4 = (DATA_OUT_ENABLE == 1'b1 ? Delay_10_reg :
              Delay_10_bypass_delay);



  assign PARA_OUT_signal1_signal2_signal1_signal1_signal2 = signal2_4;

  always @(posedge clk or posedge reset)
    begin : Delay_11_process
      if (reset == 1'b1) begin
        Delay_11_bypass_delay <= 1'b0;
        Delay_11_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_11_bypass_delay <= Delay_11_reg;
          Delay_11_reg <= SIPO_16BIT1_out1_signal2_signal1_signal2_signal1;
        end
      end
    end

  assign signal1_5 = (DATA_OUT_ENABLE == 1'b1 ? Delay_11_reg :
              Delay_11_bypass_delay);



  assign PARA_OUT_signal1_signal2_signal1_signal2_signal1 = signal1_5;

  always @(posedge clk or posedge reset)
    begin : Delay_12_process
      if (reset == 1'b1) begin
        Delay_12_bypass_delay <= 1'b0;
        Delay_12_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_12_bypass_delay <= Delay_12_reg;
          Delay_12_reg <= SIPO_16BIT1_out1_signal2_signal1_signal2_signal2;
        end
      end
    end

  assign signal2_5 = (DATA_OUT_ENABLE == 1'b1 ? Delay_12_reg :
              Delay_12_bypass_delay);



  assign PARA_OUT_signal1_signal2_signal1_signal2_signal2 = signal2_5;

  always @(posedge clk or posedge reset)
    begin : Delay_13_process
      if (reset == 1'b1) begin
        Delay_13_bypass_delay <= 1'b0;
        Delay_13_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_13_bypass_delay <= Delay_13_reg;
          Delay_13_reg <= SIPO_16BIT1_out1_signal2_signal2_signal1_signal1;
        end
      end
    end

  assign signal1_6 = (DATA_OUT_ENABLE == 1'b1 ? Delay_13_reg :
              Delay_13_bypass_delay);



  assign PARA_OUT_signal1_signal2_signal2_signal1_signal1 = signal1_6;

  always @(posedge clk or posedge reset)
    begin : Delay_14_process
      if (reset == 1'b1) begin
        Delay_14_bypass_delay <= 1'b0;
        Delay_14_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_14_bypass_delay <= Delay_14_reg;
          Delay_14_reg <= SIPO_16BIT1_out1_signal2_signal2_signal1_signal2;
        end
      end
    end

  assign signal2_6 = (DATA_OUT_ENABLE == 1'b1 ? Delay_14_reg :
              Delay_14_bypass_delay);



  assign PARA_OUT_signal1_signal2_signal2_signal1_signal2 = signal2_6;

  always @(posedge clk or posedge reset)
    begin : Delay_15_process
      if (reset == 1'b1) begin
        Delay_15_bypass_delay <= 1'b0;
        Delay_15_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_15_bypass_delay <= Delay_15_reg;
          Delay_15_reg <= SIPO_16BIT1_out1_signal2_signal2_signal2_signal1;
        end
      end
    end

  assign signal1_7 = (DATA_OUT_ENABLE == 1'b1 ? Delay_15_reg :
              Delay_15_bypass_delay);



  assign PARA_OUT_signal1_signal2_signal2_signal2_signal1 = signal1_7;

  always @(posedge clk or posedge reset)
    begin : Delay_16_process
      if (reset == 1'b1) begin
        Delay_16_bypass_delay <= 1'b0;
        Delay_16_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_16_bypass_delay <= Delay_16_reg;
          Delay_16_reg <= SIPO_16BIT1_out1_signal2_signal2_signal2_signal2;
        end
      end
    end

  assign signal2_7 = (DATA_OUT_ENABLE == 1'b1 ? Delay_16_reg :
              Delay_16_bypass_delay);



  assign PARA_OUT_signal1_signal2_signal2_signal2_signal2 = signal2_7;

  always @(posedge clk or posedge reset)
    begin : Delay_17_process
      if (reset == 1'b1) begin
        Delay_17_bypass_delay <= 1'b0;
        Delay_17_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_17_bypass_delay <= Delay_17_reg;
          Delay_17_reg <= SIPO_16BIT_out1_signal1_signal1_signal1_signal1;
        end
      end
    end

  assign signal1_8 = (DATA_OUT_ENABLE == 1'b1 ? Delay_17_reg :
              Delay_17_bypass_delay);



  assign PARA_OUT_signal2_signal1_signal1_signal1_signal1 = signal1_8;

  always @(posedge clk or posedge reset)
    begin : Delay_18_process
      if (reset == 1'b1) begin
        Delay_18_bypass_delay <= 1'b0;
        Delay_18_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_18_bypass_delay <= Delay_18_reg;
          Delay_18_reg <= SIPO_16BIT_out1_signal1_signal1_signal1_signal2;
        end
      end
    end

  assign signal2_8 = (DATA_OUT_ENABLE == 1'b1 ? Delay_18_reg :
              Delay_18_bypass_delay);



  assign PARA_OUT_signal2_signal1_signal1_signal1_signal2 = signal2_8;

  always @(posedge clk or posedge reset)
    begin : Delay_19_process
      if (reset == 1'b1) begin
        Delay_19_bypass_delay <= 1'b0;
        Delay_19_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_19_bypass_delay <= Delay_19_reg;
          Delay_19_reg <= SIPO_16BIT_out1_signal1_signal1_signal2_signal1;
        end
      end
    end

  assign signal1_9 = (DATA_OUT_ENABLE == 1'b1 ? Delay_19_reg :
              Delay_19_bypass_delay);



  assign PARA_OUT_signal2_signal1_signal1_signal2_signal1 = signal1_9;

  always @(posedge clk or posedge reset)
    begin : Delay_20_process
      if (reset == 1'b1) begin
        Delay_20_bypass_delay <= 1'b0;
        Delay_20_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_20_bypass_delay <= Delay_20_reg;
          Delay_20_reg <= SIPO_16BIT_out1_signal1_signal1_signal2_signal2;
        end
      end
    end

  assign signal2_9 = (DATA_OUT_ENABLE == 1'b1 ? Delay_20_reg :
              Delay_20_bypass_delay);



  assign PARA_OUT_signal2_signal1_signal1_signal2_signal2 = signal2_9;

  always @(posedge clk or posedge reset)
    begin : Delay_21_process
      if (reset == 1'b1) begin
        Delay_21_bypass_delay <= 1'b0;
        Delay_21_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_21_bypass_delay <= Delay_21_reg;
          Delay_21_reg <= SIPO_16BIT_out1_signal1_signal2_signal1_signal1;
        end
      end
    end

  assign signal1_10 = (DATA_OUT_ENABLE == 1'b1 ? Delay_21_reg :
              Delay_21_bypass_delay);



  assign PARA_OUT_signal2_signal1_signal2_signal1_signal1 = signal1_10;

  always @(posedge clk or posedge reset)
    begin : Delay_22_process
      if (reset == 1'b1) begin
        Delay_22_bypass_delay <= 1'b0;
        Delay_22_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_22_bypass_delay <= Delay_22_reg;
          Delay_22_reg <= SIPO_16BIT_out1_signal1_signal2_signal1_signal2;
        end
      end
    end

  assign signal2_10 = (DATA_OUT_ENABLE == 1'b1 ? Delay_22_reg :
              Delay_22_bypass_delay);



  assign PARA_OUT_signal2_signal1_signal2_signal1_signal2 = signal2_10;

  always @(posedge clk or posedge reset)
    begin : Delay_23_process
      if (reset == 1'b1) begin
        Delay_23_bypass_delay <= 1'b0;
        Delay_23_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_23_bypass_delay <= Delay_23_reg;
          Delay_23_reg <= SIPO_16BIT_out1_signal1_signal2_signal2_signal1;
        end
      end
    end

  assign signal1_11 = (DATA_OUT_ENABLE == 1'b1 ? Delay_23_reg :
              Delay_23_bypass_delay);



  assign PARA_OUT_signal2_signal1_signal2_signal2_signal1 = signal1_11;

  always @(posedge clk or posedge reset)
    begin : Delay_24_process
      if (reset == 1'b1) begin
        Delay_24_bypass_delay <= 1'b0;
        Delay_24_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_24_bypass_delay <= Delay_24_reg;
          Delay_24_reg <= SIPO_16BIT_out1_signal1_signal2_signal2_signal2;
        end
      end
    end

  assign signal2_11 = (DATA_OUT_ENABLE == 1'b1 ? Delay_24_reg :
              Delay_24_bypass_delay);



  assign PARA_OUT_signal2_signal1_signal2_signal2_signal2 = signal2_11;

  always @(posedge clk or posedge reset)
    begin : Delay_25_process
      if (reset == 1'b1) begin
        Delay_25_bypass_delay <= 1'b0;
        Delay_25_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_25_bypass_delay <= Delay_25_reg;
          Delay_25_reg <= SIPO_16BIT_out1_signal2_signal1_signal1_signal1;
        end
      end
    end

  assign signal1_12 = (DATA_OUT_ENABLE == 1'b1 ? Delay_25_reg :
              Delay_25_bypass_delay);



  assign PARA_OUT_signal2_signal2_signal1_signal1_signal1 = signal1_12;

  always @(posedge clk or posedge reset)
    begin : Delay_26_process
      if (reset == 1'b1) begin
        Delay_26_bypass_delay <= 1'b0;
        Delay_26_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_26_bypass_delay <= Delay_26_reg;
          Delay_26_reg <= SIPO_16BIT_out1_signal2_signal1_signal1_signal2;
        end
      end
    end

  assign signal2_12 = (DATA_OUT_ENABLE == 1'b1 ? Delay_26_reg :
              Delay_26_bypass_delay);



  assign PARA_OUT_signal2_signal2_signal1_signal1_signal2 = signal2_12;

  always @(posedge clk or posedge reset)
    begin : Delay_27_process
      if (reset == 1'b1) begin
        Delay_27_bypass_delay <= 1'b0;
        Delay_27_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_27_bypass_delay <= Delay_27_reg;
          Delay_27_reg <= SIPO_16BIT_out1_signal2_signal1_signal2_signal1;
        end
      end
    end

  assign signal1_13 = (DATA_OUT_ENABLE == 1'b1 ? Delay_27_reg :
              Delay_27_bypass_delay);



  assign PARA_OUT_signal2_signal2_signal1_signal2_signal1 = signal1_13;

  always @(posedge clk or posedge reset)
    begin : Delay_28_process
      if (reset == 1'b1) begin
        Delay_28_bypass_delay <= 1'b0;
        Delay_28_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_28_bypass_delay <= Delay_28_reg;
          Delay_28_reg <= SIPO_16BIT_out1_signal2_signal1_signal2_signal2;
        end
      end
    end

  assign signal2_13 = (DATA_OUT_ENABLE == 1'b1 ? Delay_28_reg :
              Delay_28_bypass_delay);



  assign PARA_OUT_signal2_signal2_signal1_signal2_signal2 = signal2_13;

  always @(posedge clk or posedge reset)
    begin : Delay_29_process
      if (reset == 1'b1) begin
        Delay_29_bypass_delay <= 1'b0;
        Delay_29_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_29_bypass_delay <= Delay_29_reg;
          Delay_29_reg <= SIPO_16BIT_out1_signal2_signal2_signal1_signal1;
        end
      end
    end

  assign signal1_14 = (DATA_OUT_ENABLE == 1'b1 ? Delay_29_reg :
              Delay_29_bypass_delay);



  assign PARA_OUT_signal2_signal2_signal2_signal1_signal1 = signal1_14;

  always @(posedge clk or posedge reset)
    begin : Delay_30_process
      if (reset == 1'b1) begin
        Delay_30_bypass_delay <= 1'b0;
        Delay_30_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_30_bypass_delay <= Delay_30_reg;
          Delay_30_reg <= SIPO_16BIT_out1_signal2_signal2_signal1_signal2;
        end
      end
    end

  assign signal2_14 = (DATA_OUT_ENABLE == 1'b1 ? Delay_30_reg :
              Delay_30_bypass_delay);



  assign PARA_OUT_signal2_signal2_signal2_signal1_signal2 = signal2_14;

  always @(posedge clk or posedge reset)
    begin : Delay_31_process
      if (reset == 1'b1) begin
        Delay_31_bypass_delay <= 1'b0;
        Delay_31_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_31_bypass_delay <= Delay_31_reg;
          Delay_31_reg <= SIPO_16BIT_out1_signal2_signal2_signal2_signal1;
        end
      end
    end

  assign signal1_15 = (DATA_OUT_ENABLE == 1'b1 ? Delay_31_reg :
              Delay_31_bypass_delay);



  assign PARA_OUT_signal2_signal2_signal2_signal2_signal1 = signal1_15;

  always @(posedge clk or posedge reset)
    begin : Delay_32_process
      if (reset == 1'b1) begin
        Delay_32_bypass_delay <= 1'b0;
        Delay_32_reg <= 1'b0;
      end
      else begin
        if (enb && DATA_OUT_ENABLE) begin
          Delay_32_bypass_delay <= Delay_32_reg;
          Delay_32_reg <= SIPO_16BIT_out1_signal2_signal2_signal2_signal2;
        end
      end
    end

  assign signal2_15 = (DATA_OUT_ENABLE == 1'b1 ? Delay_32_reg :
              Delay_32_bypass_delay);



  assign PARA_OUT_signal2_signal2_signal2_signal2_signal2 = signal2_15;

endmodule  // Subsystem

