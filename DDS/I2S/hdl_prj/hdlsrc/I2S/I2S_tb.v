// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\I2S\I2S_tb.v
// Created: 2023-10-15 11:37:56
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: I2S_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module I2S_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire rawData_L_CLR;
  wire rawData_L_DIN_0;
  wire rawData_L_DIN_1;
  wire rawData_L_DIN_2;
  wire rawData_L_DIN_3;
  wire rawData_L_DIN_4;
  wire rawData_L_DIN_5;
  wire rawData_L_DIN_6;
  wire rawData_L_DIN_7;
  wire rawData_L_DIN_8;
  wire rawData_L_DIN_9;
  wire rawData_L_DIN_10;
  wire rawData_L_DIN_11;
  wire rawData_L_DIN_12;
  wire rawData_L_DIN_13;
  wire rawData_L_DIN_14;
  wire rawData_L_DIN_15;
  wire rawData_L_DIN_16;
  wire rawData_L_DIN_17;
  wire rawData_L_DIN_18;
  wire rawData_L_DIN_19;
  wire rawData_L_DIN_20;
  wire rawData_L_DIN_21;
  wire rawData_L_DIN_22;
  wire rawData_L_DIN_23;
  wire rawData_L_DIN_24;
  wire rawData_L_DIN_25;
  wire rawData_L_DIN_26;
  wire rawData_L_DIN_27;
  wire rawData_L_DIN_28;
  wire rawData_L_DIN_29;
  wire rawData_L_DIN_30;
  wire rawData_L_DIN_31;
  wire rawData_MCLK_IN;
  wire rawData_R_CLR;
  wire rawData_R_DIN_0;
  wire rawData_R_DIN_1;
  wire rawData_R_DIN_2;
  wire rawData_R_DIN_3;
  wire rawData_R_DIN_4;
  wire rawData_R_DIN_5;
  wire rawData_R_DIN_6;
  wire rawData_R_DIN_7;
  wire rawData_R_DIN_8;
  wire rawData_R_DIN_9;
  wire rawData_R_DIN_10;
  wire rawData_R_DIN_11;
  wire rawData_R_DIN_12;
  wire rawData_R_DIN_13;
  wire rawData_R_DIN_14;
  wire rawData_R_DIN_15;
  wire rawData_R_DIN_16;
  wire rawData_R_DIN_17;
  wire rawData_R_DIN_18;
  wire rawData_R_DIN_19;
  wire rawData_R_DIN_20;
  wire rawData_R_DIN_21;
  wire rawData_R_DIN_22;
  wire rawData_R_DIN_23;
  wire rawData_R_DIN_24;
  wire rawData_R_DIN_25;
  wire rawData_R_DIN_26;
  wire rawData_R_DIN_27;
  wire rawData_R_DIN_28;
  wire rawData_R_DIN_29;
  wire rawData_R_DIN_30;
  wire rawData_R_DIN_31;
  wire SCLK_OUT_done;  // ufix1
  wire rdEnb;
  wire SCLK_OUT_done_enb;  // ufix1
  reg [13:0] SOUT_addr;  // ufix14
  wire SCLK_OUT_lastAddr;  // ufix1
  wire resetn;
  reg  check4_done;  // ufix1
  wire LRCLK_OUT_done;  // ufix1
  wire LRCLK_OUT_done_enb;  // ufix1
  wire LRCLK_OUT_lastAddr;  // ufix1
  reg  check3_done;  // ufix1
  wire MCLK_OUT_done;  // ufix1
  wire MCLK_OUT_done_enb;  // ufix1
  wire MCLK_OUT_lastAddr;  // ufix1
  reg  check2_done;  // ufix1
  wire SOUT_done;  // ufix1
  wire SOUT_done_enb;  // ufix1
  wire SOUT_active;  // ufix1
  reg  holdData_R_DIN_31;
  reg  R_DIN_31_offset;
  wire R_DIN_31_1;
  reg  holdData_R_DIN_30;
  reg  R_DIN_30_offset;
  wire R_DIN_30_1;
  reg  holdData_R_DIN_29;
  reg  R_DIN_29_offset;
  wire R_DIN_29_1;
  reg  holdData_R_DIN_28;
  reg  R_DIN_28_offset;
  wire R_DIN_28_1;
  reg  holdData_R_DIN_27;
  reg  R_DIN_27_offset;
  wire R_DIN_27_1;
  reg  holdData_R_DIN_26;
  reg  R_DIN_26_offset;
  wire R_DIN_26_1;
  reg  holdData_R_DIN_25;
  reg  R_DIN_25_offset;
  wire R_DIN_25_1;
  reg  holdData_R_DIN_24;
  reg  R_DIN_24_offset;
  wire R_DIN_24_1;
  reg  holdData_R_DIN_23;
  reg  R_DIN_23_offset;
  wire R_DIN_23_1;
  reg  holdData_R_DIN_22;
  reg  R_DIN_22_offset;
  wire R_DIN_22_1;
  reg  holdData_R_DIN_21;
  reg  R_DIN_21_offset;
  wire R_DIN_21_1;
  reg  holdData_R_DIN_20;
  reg  R_DIN_20_offset;
  wire R_DIN_20_1;
  reg  holdData_R_DIN_19;
  reg  R_DIN_19_offset;
  wire R_DIN_19_1;
  reg  holdData_R_DIN_18;
  reg  R_DIN_18_offset;
  wire R_DIN_18_1;
  reg  holdData_R_DIN_17;
  reg  R_DIN_17_offset;
  wire R_DIN_17_1;
  reg  holdData_R_DIN_16;
  reg  R_DIN_16_offset;
  wire R_DIN_16_1;
  reg  holdData_R_DIN_15;
  reg  R_DIN_15_offset;
  wire R_DIN_15_1;
  reg  holdData_R_DIN_14;
  reg  R_DIN_14_offset;
  wire R_DIN_14_1;
  reg  holdData_R_DIN_13;
  reg  R_DIN_13_offset;
  wire R_DIN_13_1;
  reg  holdData_R_DIN_12;
  reg  R_DIN_12_offset;
  wire R_DIN_12_1;
  reg  holdData_R_DIN_11;
  reg  R_DIN_11_offset;
  wire R_DIN_11_1;
  reg  holdData_R_DIN_10;
  reg  R_DIN_10_offset;
  wire R_DIN_10_1;
  reg  holdData_R_DIN_9;
  reg  R_DIN_9_offset;
  wire R_DIN_9_1;
  reg  holdData_R_DIN_8;
  reg  R_DIN_8_offset;
  wire R_DIN_8_1;
  reg  holdData_R_DIN_7;
  reg  R_DIN_7_offset;
  wire R_DIN_7_1;
  reg  holdData_R_DIN_6;
  reg  R_DIN_6_offset;
  wire R_DIN_6_1;
  reg  holdData_R_DIN_5;
  reg  R_DIN_5_offset;
  wire R_DIN_5_1;
  reg  holdData_R_DIN_4;
  reg  R_DIN_4_offset;
  wire R_DIN_4_1;
  reg  holdData_R_DIN_3;
  reg  R_DIN_3_offset;
  wire R_DIN_3_1;
  reg  holdData_R_DIN_2;
  reg  R_DIN_2_offset;
  wire R_DIN_2_1;
  reg  holdData_R_DIN_1;
  reg  R_DIN_1_offset;
  wire R_DIN_1_1;
  reg  holdData_R_DIN_0;
  reg  R_DIN_0_offset;
  wire R_DIN_0_1;
  reg  holdData_R_CLR;
  reg  R_CLR_offset;
  wire R_CLR_1;
  reg  holdData_MCLK_IN;
  reg  MCLK_IN_offset;
  wire MCLK_IN_1;
  reg  holdData_L_DIN_31;
  reg  L_DIN_31_offset;
  wire L_DIN_31_1;
  reg  holdData_L_DIN_30;
  reg  L_DIN_30_offset;
  wire L_DIN_30_1;
  reg  holdData_L_DIN_29;
  reg  L_DIN_29_offset;
  wire L_DIN_29_1;
  reg  holdData_L_DIN_28;
  reg  L_DIN_28_offset;
  wire L_DIN_28_1;
  reg  holdData_L_DIN_27;
  reg  L_DIN_27_offset;
  wire L_DIN_27_1;
  reg  holdData_L_DIN_26;
  reg  L_DIN_26_offset;
  wire L_DIN_26_1;
  reg  holdData_L_DIN_25;
  reg  L_DIN_25_offset;
  wire L_DIN_25_1;
  reg  holdData_L_DIN_24;
  reg  L_DIN_24_offset;
  wire L_DIN_24_1;
  reg  holdData_L_DIN_23;
  reg  L_DIN_23_offset;
  wire L_DIN_23_1;
  reg  holdData_L_DIN_22;
  reg  L_DIN_22_offset;
  wire L_DIN_22_1;
  reg  holdData_L_DIN_21;
  reg  L_DIN_21_offset;
  wire L_DIN_21_1;
  reg  holdData_L_DIN_20;
  reg  L_DIN_20_offset;
  wire L_DIN_20_1;
  reg  holdData_L_DIN_19;
  reg  L_DIN_19_offset;
  wire L_DIN_19_1;
  reg  holdData_L_DIN_18;
  reg  L_DIN_18_offset;
  wire L_DIN_18_1;
  reg  holdData_L_DIN_17;
  reg  L_DIN_17_offset;
  wire L_DIN_17_1;
  reg  holdData_L_DIN_16;
  reg  L_DIN_16_offset;
  wire L_DIN_16_1;
  reg  holdData_L_DIN_15;
  reg  L_DIN_15_offset;
  wire L_DIN_15_1;
  reg  holdData_L_DIN_14;
  reg  L_DIN_14_offset;
  wire L_DIN_14_1;
  reg  holdData_L_DIN_13;
  reg  L_DIN_13_offset;
  wire L_DIN_13_1;
  reg  holdData_L_DIN_12;
  reg  L_DIN_12_offset;
  wire L_DIN_12_1;
  reg  holdData_L_DIN_11;
  reg  L_DIN_11_offset;
  wire L_DIN_11_1;
  reg  holdData_L_DIN_10;
  reg  L_DIN_10_offset;
  wire L_DIN_10_1;
  reg  holdData_L_DIN_9;
  reg  L_DIN_9_offset;
  wire L_DIN_9_1;
  reg  holdData_L_DIN_8;
  reg  L_DIN_8_offset;
  wire L_DIN_8_1;
  reg  holdData_L_DIN_7;
  reg  L_DIN_7_offset;
  wire L_DIN_7_1;
  reg  holdData_L_DIN_6;
  reg  L_DIN_6_offset;
  wire L_DIN_6_1;
  reg  holdData_L_DIN_5;
  reg  L_DIN_5_offset;
  wire L_DIN_5_1;
  reg  holdData_L_DIN_4;
  reg  L_DIN_4_offset;
  wire L_DIN_4_1;
  reg  holdData_L_DIN_3;
  reg  L_DIN_3_offset;
  wire L_DIN_3_1;
  reg  holdData_L_DIN_2;
  reg  L_DIN_2_offset;
  wire L_DIN_2_1;
  reg  holdData_L_DIN_1;
  reg  L_DIN_1_offset;
  wire L_DIN_1_1;
  reg  holdData_L_DIN_0;
  reg  L_DIN_0_offset;
  wire L_DIN_0_1;
  reg  holdData_L_CLR;
  reg  L_CLR_offset;
  wire L_CLR_1;
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  reg  tb_enb_delay;
  wire ce_out;
  wire SOUT;
  wire MCLK_OUT;
  wire LRCLK_OUT;
  wire SCLK_OUT;
  wire SOUT_enb;  // ufix1
  wire SOUT_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire SOUT_expected_1;
  wire SOUT_ref;
  reg  SOUT_testFailure;  // ufix1
  wire MCLK_OUT_expected_1;
  wire MCLK_OUT_ref;
  reg  MCLK_OUT_testFailure;  // ufix1
  wire LRCLK_OUT_expected_1;
  wire LRCLK_OUT_ref;
  reg  LRCLK_OUT_testFailure;  // ufix1
  wire SCLK_OUT_expected_1;
  wire SCLK_OUT_ref;
  reg  SCLK_OUT_testFailure;  // ufix1
  wire testFailure;  // ufix1


  // Data source for L_CLR
  assign rawData_L_CLR = 1'b0;



  // Data source for L_DIN_0
  assign rawData_L_DIN_0 = 1'b0;



  // Data source for L_DIN_1
  assign rawData_L_DIN_1 = 1'b0;



  // Data source for L_DIN_2
  assign rawData_L_DIN_2 = 1'b0;



  // Data source for L_DIN_3
  assign rawData_L_DIN_3 = 1'b0;



  // Data source for L_DIN_4
  assign rawData_L_DIN_4 = 1'b0;



  // Data source for L_DIN_5
  assign rawData_L_DIN_5 = 1'b0;



  // Data source for L_DIN_6
  assign rawData_L_DIN_6 = 1'b0;



  // Data source for L_DIN_7
  assign rawData_L_DIN_7 = 1'b0;



  // Data source for L_DIN_8
  assign rawData_L_DIN_8 = 1'b0;



  // Data source for L_DIN_9
  assign rawData_L_DIN_9 = 1'b0;



  // Data source for L_DIN_10
  assign rawData_L_DIN_10 = 1'b0;



  // Data source for L_DIN_11
  assign rawData_L_DIN_11 = 1'b0;



  // Data source for L_DIN_12
  assign rawData_L_DIN_12 = 1'b0;



  // Data source for L_DIN_13
  assign rawData_L_DIN_13 = 1'b0;



  // Data source for L_DIN_14
  assign rawData_L_DIN_14 = 1'b0;



  // Data source for L_DIN_15
  assign rawData_L_DIN_15 = 1'b0;



  // Data source for L_DIN_16
  assign rawData_L_DIN_16 = 1'b0;



  // Data source for L_DIN_17
  assign rawData_L_DIN_17 = 1'b0;



  // Data source for L_DIN_18
  assign rawData_L_DIN_18 = 1'b0;



  // Data source for L_DIN_19
  assign rawData_L_DIN_19 = 1'b0;



  // Data source for L_DIN_20
  assign rawData_L_DIN_20 = 1'b0;



  // Data source for L_DIN_21
  assign rawData_L_DIN_21 = 1'b0;



  // Data source for L_DIN_22
  assign rawData_L_DIN_22 = 1'b0;



  // Data source for L_DIN_23
  assign rawData_L_DIN_23 = 1'b0;



  // Data source for L_DIN_24
  assign rawData_L_DIN_24 = 1'b0;



  // Data source for L_DIN_25
  assign rawData_L_DIN_25 = 1'b0;



  // Data source for L_DIN_26
  assign rawData_L_DIN_26 = 1'b0;



  // Data source for L_DIN_27
  assign rawData_L_DIN_27 = 1'b0;



  // Data source for L_DIN_28
  assign rawData_L_DIN_28 = 1'b0;



  // Data source for L_DIN_29
  assign rawData_L_DIN_29 = 1'b0;



  // Data source for L_DIN_30
  assign rawData_L_DIN_30 = 1'b0;



  // Data source for L_DIN_31
  assign rawData_L_DIN_31 = 1'b0;



  // Data source for MCLK_IN
  assign rawData_MCLK_IN = 1'b0;



  // Data source for R_CLR
  assign rawData_R_CLR = 1'b0;



  // Data source for R_DIN_0
  assign rawData_R_DIN_0 = 1'b0;



  // Data source for R_DIN_1
  assign rawData_R_DIN_1 = 1'b0;



  // Data source for R_DIN_2
  assign rawData_R_DIN_2 = 1'b0;



  // Data source for R_DIN_3
  assign rawData_R_DIN_3 = 1'b0;



  // Data source for R_DIN_4
  assign rawData_R_DIN_4 = 1'b0;



  // Data source for R_DIN_5
  assign rawData_R_DIN_5 = 1'b0;



  // Data source for R_DIN_6
  assign rawData_R_DIN_6 = 1'b0;



  // Data source for R_DIN_7
  assign rawData_R_DIN_7 = 1'b0;



  // Data source for R_DIN_8
  assign rawData_R_DIN_8 = 1'b0;



  // Data source for R_DIN_9
  assign rawData_R_DIN_9 = 1'b0;



  // Data source for R_DIN_10
  assign rawData_R_DIN_10 = 1'b0;



  // Data source for R_DIN_11
  assign rawData_R_DIN_11 = 1'b0;



  // Data source for R_DIN_12
  assign rawData_R_DIN_12 = 1'b0;



  // Data source for R_DIN_13
  assign rawData_R_DIN_13 = 1'b0;



  // Data source for R_DIN_14
  assign rawData_R_DIN_14 = 1'b0;



  // Data source for R_DIN_15
  assign rawData_R_DIN_15 = 1'b0;



  // Data source for R_DIN_16
  assign rawData_R_DIN_16 = 1'b0;



  // Data source for R_DIN_17
  assign rawData_R_DIN_17 = 1'b0;



  // Data source for R_DIN_18
  assign rawData_R_DIN_18 = 1'b0;



  // Data source for R_DIN_19
  assign rawData_R_DIN_19 = 1'b0;



  // Data source for R_DIN_20
  assign rawData_R_DIN_20 = 1'b0;



  // Data source for R_DIN_21
  assign rawData_R_DIN_21 = 1'b0;



  // Data source for R_DIN_22
  assign rawData_R_DIN_22 = 1'b0;



  // Data source for R_DIN_23
  assign rawData_R_DIN_23 = 1'b0;



  // Data source for R_DIN_24
  assign rawData_R_DIN_24 = 1'b0;



  // Data source for R_DIN_25
  assign rawData_R_DIN_25 = 1'b0;



  // Data source for R_DIN_26
  assign rawData_R_DIN_26 = 1'b0;



  // Data source for R_DIN_27
  assign rawData_R_DIN_27 = 1'b0;



  // Data source for R_DIN_28
  assign rawData_R_DIN_28 = 1'b0;



  // Data source for R_DIN_29
  assign rawData_R_DIN_29 = 1'b0;



  // Data source for R_DIN_30
  assign rawData_R_DIN_30 = 1'b0;



  // Data source for R_DIN_31
  assign rawData_R_DIN_31 = 1'b0;



  assign SCLK_OUT_done_enb = SCLK_OUT_done & rdEnb;



  assign SCLK_OUT_lastAddr = SOUT_addr >= 14'b10011100010000;



  assign SCLK_OUT_done = SCLK_OUT_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_4
      if (reset) begin
        check4_done <= 0;
      end
      else begin
        if (SCLK_OUT_done_enb) begin
          check4_done <= SCLK_OUT_done;
        end
      end
    end

  assign LRCLK_OUT_done_enb = LRCLK_OUT_done & rdEnb;



  assign LRCLK_OUT_lastAddr = SOUT_addr >= 14'b10011100010000;



  assign LRCLK_OUT_done = LRCLK_OUT_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_3
      if (reset) begin
        check3_done <= 0;
      end
      else begin
        if (LRCLK_OUT_done_enb) begin
          check3_done <= LRCLK_OUT_done;
        end
      end
    end

  assign MCLK_OUT_done_enb = MCLK_OUT_done & rdEnb;



  assign MCLK_OUT_lastAddr = SOUT_addr >= 14'b10011100010000;



  assign MCLK_OUT_done = MCLK_OUT_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_2
      if (reset) begin
        check2_done <= 0;
      end
      else begin
        if (MCLK_OUT_done_enb) begin
          check2_done <= MCLK_OUT_done;
        end
      end
    end

  assign SOUT_done_enb = SOUT_done & rdEnb;



  assign SOUT_active = SOUT_addr != 14'b10011100010000;



  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN
      if (reset) begin
        holdData_R_DIN_31 <= 1'bx;
      end
      else begin
        holdData_R_DIN_31 <= rawData_R_DIN_31;
      end
    end

  always @(rawData_R_DIN_31 or rdEnb)
    begin : stimuli_R_DIN_1
      if (rdEnb == 1'b0) begin
        R_DIN_31_offset <= holdData_R_DIN_31;
      end
      else begin
        R_DIN_31_offset <= rawData_R_DIN_31;
      end
    end

  assign #2 R_DIN_31_1 = R_DIN_31_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_2
      if (reset) begin
        holdData_R_DIN_30 <= 1'bx;
      end
      else begin
        holdData_R_DIN_30 <= rawData_R_DIN_30;
      end
    end

  always @(rawData_R_DIN_30 or rdEnb)
    begin : stimuli_R_DIN_3
      if (rdEnb == 1'b0) begin
        R_DIN_30_offset <= holdData_R_DIN_30;
      end
      else begin
        R_DIN_30_offset <= rawData_R_DIN_30;
      end
    end

  assign #2 R_DIN_30_1 = R_DIN_30_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_4
      if (reset) begin
        holdData_R_DIN_29 <= 1'bx;
      end
      else begin
        holdData_R_DIN_29 <= rawData_R_DIN_29;
      end
    end

  always @(rawData_R_DIN_29 or rdEnb)
    begin : stimuli_R_DIN_5
      if (rdEnb == 1'b0) begin
        R_DIN_29_offset <= holdData_R_DIN_29;
      end
      else begin
        R_DIN_29_offset <= rawData_R_DIN_29;
      end
    end

  assign #2 R_DIN_29_1 = R_DIN_29_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_6
      if (reset) begin
        holdData_R_DIN_28 <= 1'bx;
      end
      else begin
        holdData_R_DIN_28 <= rawData_R_DIN_28;
      end
    end

  always @(rawData_R_DIN_28 or rdEnb)
    begin : stimuli_R_DIN_7
      if (rdEnb == 1'b0) begin
        R_DIN_28_offset <= holdData_R_DIN_28;
      end
      else begin
        R_DIN_28_offset <= rawData_R_DIN_28;
      end
    end

  assign #2 R_DIN_28_1 = R_DIN_28_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_8
      if (reset) begin
        holdData_R_DIN_27 <= 1'bx;
      end
      else begin
        holdData_R_DIN_27 <= rawData_R_DIN_27;
      end
    end

  always @(rawData_R_DIN_27 or rdEnb)
    begin : stimuli_R_DIN_9
      if (rdEnb == 1'b0) begin
        R_DIN_27_offset <= holdData_R_DIN_27;
      end
      else begin
        R_DIN_27_offset <= rawData_R_DIN_27;
      end
    end

  assign #2 R_DIN_27_1 = R_DIN_27_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_10
      if (reset) begin
        holdData_R_DIN_26 <= 1'bx;
      end
      else begin
        holdData_R_DIN_26 <= rawData_R_DIN_26;
      end
    end

  always @(rawData_R_DIN_26 or rdEnb)
    begin : stimuli_R_DIN_11
      if (rdEnb == 1'b0) begin
        R_DIN_26_offset <= holdData_R_DIN_26;
      end
      else begin
        R_DIN_26_offset <= rawData_R_DIN_26;
      end
    end

  assign #2 R_DIN_26_1 = R_DIN_26_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_12
      if (reset) begin
        holdData_R_DIN_25 <= 1'bx;
      end
      else begin
        holdData_R_DIN_25 <= rawData_R_DIN_25;
      end
    end

  always @(rawData_R_DIN_25 or rdEnb)
    begin : stimuli_R_DIN_13
      if (rdEnb == 1'b0) begin
        R_DIN_25_offset <= holdData_R_DIN_25;
      end
      else begin
        R_DIN_25_offset <= rawData_R_DIN_25;
      end
    end

  assign #2 R_DIN_25_1 = R_DIN_25_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_14
      if (reset) begin
        holdData_R_DIN_24 <= 1'bx;
      end
      else begin
        holdData_R_DIN_24 <= rawData_R_DIN_24;
      end
    end

  always @(rawData_R_DIN_24 or rdEnb)
    begin : stimuli_R_DIN_15
      if (rdEnb == 1'b0) begin
        R_DIN_24_offset <= holdData_R_DIN_24;
      end
      else begin
        R_DIN_24_offset <= rawData_R_DIN_24;
      end
    end

  assign #2 R_DIN_24_1 = R_DIN_24_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_16
      if (reset) begin
        holdData_R_DIN_23 <= 1'bx;
      end
      else begin
        holdData_R_DIN_23 <= rawData_R_DIN_23;
      end
    end

  always @(rawData_R_DIN_23 or rdEnb)
    begin : stimuli_R_DIN_17
      if (rdEnb == 1'b0) begin
        R_DIN_23_offset <= holdData_R_DIN_23;
      end
      else begin
        R_DIN_23_offset <= rawData_R_DIN_23;
      end
    end

  assign #2 R_DIN_23_1 = R_DIN_23_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_18
      if (reset) begin
        holdData_R_DIN_22 <= 1'bx;
      end
      else begin
        holdData_R_DIN_22 <= rawData_R_DIN_22;
      end
    end

  always @(rawData_R_DIN_22 or rdEnb)
    begin : stimuli_R_DIN_19
      if (rdEnb == 1'b0) begin
        R_DIN_22_offset <= holdData_R_DIN_22;
      end
      else begin
        R_DIN_22_offset <= rawData_R_DIN_22;
      end
    end

  assign #2 R_DIN_22_1 = R_DIN_22_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_20
      if (reset) begin
        holdData_R_DIN_21 <= 1'bx;
      end
      else begin
        holdData_R_DIN_21 <= rawData_R_DIN_21;
      end
    end

  always @(rawData_R_DIN_21 or rdEnb)
    begin : stimuli_R_DIN_21
      if (rdEnb == 1'b0) begin
        R_DIN_21_offset <= holdData_R_DIN_21;
      end
      else begin
        R_DIN_21_offset <= rawData_R_DIN_21;
      end
    end

  assign #2 R_DIN_21_1 = R_DIN_21_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_22
      if (reset) begin
        holdData_R_DIN_20 <= 1'bx;
      end
      else begin
        holdData_R_DIN_20 <= rawData_R_DIN_20;
      end
    end

  always @(rawData_R_DIN_20 or rdEnb)
    begin : stimuli_R_DIN_23
      if (rdEnb == 1'b0) begin
        R_DIN_20_offset <= holdData_R_DIN_20;
      end
      else begin
        R_DIN_20_offset <= rawData_R_DIN_20;
      end
    end

  assign #2 R_DIN_20_1 = R_DIN_20_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_24
      if (reset) begin
        holdData_R_DIN_19 <= 1'bx;
      end
      else begin
        holdData_R_DIN_19 <= rawData_R_DIN_19;
      end
    end

  always @(rawData_R_DIN_19 or rdEnb)
    begin : stimuli_R_DIN_25
      if (rdEnb == 1'b0) begin
        R_DIN_19_offset <= holdData_R_DIN_19;
      end
      else begin
        R_DIN_19_offset <= rawData_R_DIN_19;
      end
    end

  assign #2 R_DIN_19_1 = R_DIN_19_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_26
      if (reset) begin
        holdData_R_DIN_18 <= 1'bx;
      end
      else begin
        holdData_R_DIN_18 <= rawData_R_DIN_18;
      end
    end

  always @(rawData_R_DIN_18 or rdEnb)
    begin : stimuli_R_DIN_27
      if (rdEnb == 1'b0) begin
        R_DIN_18_offset <= holdData_R_DIN_18;
      end
      else begin
        R_DIN_18_offset <= rawData_R_DIN_18;
      end
    end

  assign #2 R_DIN_18_1 = R_DIN_18_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_28
      if (reset) begin
        holdData_R_DIN_17 <= 1'bx;
      end
      else begin
        holdData_R_DIN_17 <= rawData_R_DIN_17;
      end
    end

  always @(rawData_R_DIN_17 or rdEnb)
    begin : stimuli_R_DIN_29
      if (rdEnb == 1'b0) begin
        R_DIN_17_offset <= holdData_R_DIN_17;
      end
      else begin
        R_DIN_17_offset <= rawData_R_DIN_17;
      end
    end

  assign #2 R_DIN_17_1 = R_DIN_17_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_30
      if (reset) begin
        holdData_R_DIN_16 <= 1'bx;
      end
      else begin
        holdData_R_DIN_16 <= rawData_R_DIN_16;
      end
    end

  always @(rawData_R_DIN_16 or rdEnb)
    begin : stimuli_R_DIN_31
      if (rdEnb == 1'b0) begin
        R_DIN_16_offset <= holdData_R_DIN_16;
      end
      else begin
        R_DIN_16_offset <= rawData_R_DIN_16;
      end
    end

  assign #2 R_DIN_16_1 = R_DIN_16_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_32
      if (reset) begin
        holdData_R_DIN_15 <= 1'bx;
      end
      else begin
        holdData_R_DIN_15 <= rawData_R_DIN_15;
      end
    end

  always @(rawData_R_DIN_15 or rdEnb)
    begin : stimuli_R_DIN_33
      if (rdEnb == 1'b0) begin
        R_DIN_15_offset <= holdData_R_DIN_15;
      end
      else begin
        R_DIN_15_offset <= rawData_R_DIN_15;
      end
    end

  assign #2 R_DIN_15_1 = R_DIN_15_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_34
      if (reset) begin
        holdData_R_DIN_14 <= 1'bx;
      end
      else begin
        holdData_R_DIN_14 <= rawData_R_DIN_14;
      end
    end

  always @(rawData_R_DIN_14 or rdEnb)
    begin : stimuli_R_DIN_35
      if (rdEnb == 1'b0) begin
        R_DIN_14_offset <= holdData_R_DIN_14;
      end
      else begin
        R_DIN_14_offset <= rawData_R_DIN_14;
      end
    end

  assign #2 R_DIN_14_1 = R_DIN_14_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_36
      if (reset) begin
        holdData_R_DIN_13 <= 1'bx;
      end
      else begin
        holdData_R_DIN_13 <= rawData_R_DIN_13;
      end
    end

  always @(rawData_R_DIN_13 or rdEnb)
    begin : stimuli_R_DIN_37
      if (rdEnb == 1'b0) begin
        R_DIN_13_offset <= holdData_R_DIN_13;
      end
      else begin
        R_DIN_13_offset <= rawData_R_DIN_13;
      end
    end

  assign #2 R_DIN_13_1 = R_DIN_13_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_38
      if (reset) begin
        holdData_R_DIN_12 <= 1'bx;
      end
      else begin
        holdData_R_DIN_12 <= rawData_R_DIN_12;
      end
    end

  always @(rawData_R_DIN_12 or rdEnb)
    begin : stimuli_R_DIN_39
      if (rdEnb == 1'b0) begin
        R_DIN_12_offset <= holdData_R_DIN_12;
      end
      else begin
        R_DIN_12_offset <= rawData_R_DIN_12;
      end
    end

  assign #2 R_DIN_12_1 = R_DIN_12_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_40
      if (reset) begin
        holdData_R_DIN_11 <= 1'bx;
      end
      else begin
        holdData_R_DIN_11 <= rawData_R_DIN_11;
      end
    end

  always @(rawData_R_DIN_11 or rdEnb)
    begin : stimuli_R_DIN_41
      if (rdEnb == 1'b0) begin
        R_DIN_11_offset <= holdData_R_DIN_11;
      end
      else begin
        R_DIN_11_offset <= rawData_R_DIN_11;
      end
    end

  assign #2 R_DIN_11_1 = R_DIN_11_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_42
      if (reset) begin
        holdData_R_DIN_10 <= 1'bx;
      end
      else begin
        holdData_R_DIN_10 <= rawData_R_DIN_10;
      end
    end

  always @(rawData_R_DIN_10 or rdEnb)
    begin : stimuli_R_DIN_43
      if (rdEnb == 1'b0) begin
        R_DIN_10_offset <= holdData_R_DIN_10;
      end
      else begin
        R_DIN_10_offset <= rawData_R_DIN_10;
      end
    end

  assign #2 R_DIN_10_1 = R_DIN_10_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_44
      if (reset) begin
        holdData_R_DIN_9 <= 1'bx;
      end
      else begin
        holdData_R_DIN_9 <= rawData_R_DIN_9;
      end
    end

  always @(rawData_R_DIN_9 or rdEnb)
    begin : stimuli_R_DIN_45
      if (rdEnb == 1'b0) begin
        R_DIN_9_offset <= holdData_R_DIN_9;
      end
      else begin
        R_DIN_9_offset <= rawData_R_DIN_9;
      end
    end

  assign #2 R_DIN_9_1 = R_DIN_9_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_46
      if (reset) begin
        holdData_R_DIN_8 <= 1'bx;
      end
      else begin
        holdData_R_DIN_8 <= rawData_R_DIN_8;
      end
    end

  always @(rawData_R_DIN_8 or rdEnb)
    begin : stimuli_R_DIN_47
      if (rdEnb == 1'b0) begin
        R_DIN_8_offset <= holdData_R_DIN_8;
      end
      else begin
        R_DIN_8_offset <= rawData_R_DIN_8;
      end
    end

  assign #2 R_DIN_8_1 = R_DIN_8_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_48
      if (reset) begin
        holdData_R_DIN_7 <= 1'bx;
      end
      else begin
        holdData_R_DIN_7 <= rawData_R_DIN_7;
      end
    end

  always @(rawData_R_DIN_7 or rdEnb)
    begin : stimuli_R_DIN_49
      if (rdEnb == 1'b0) begin
        R_DIN_7_offset <= holdData_R_DIN_7;
      end
      else begin
        R_DIN_7_offset <= rawData_R_DIN_7;
      end
    end

  assign #2 R_DIN_7_1 = R_DIN_7_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_50
      if (reset) begin
        holdData_R_DIN_6 <= 1'bx;
      end
      else begin
        holdData_R_DIN_6 <= rawData_R_DIN_6;
      end
    end

  always @(rawData_R_DIN_6 or rdEnb)
    begin : stimuli_R_DIN_51
      if (rdEnb == 1'b0) begin
        R_DIN_6_offset <= holdData_R_DIN_6;
      end
      else begin
        R_DIN_6_offset <= rawData_R_DIN_6;
      end
    end

  assign #2 R_DIN_6_1 = R_DIN_6_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_52
      if (reset) begin
        holdData_R_DIN_5 <= 1'bx;
      end
      else begin
        holdData_R_DIN_5 <= rawData_R_DIN_5;
      end
    end

  always @(rawData_R_DIN_5 or rdEnb)
    begin : stimuli_R_DIN_53
      if (rdEnb == 1'b0) begin
        R_DIN_5_offset <= holdData_R_DIN_5;
      end
      else begin
        R_DIN_5_offset <= rawData_R_DIN_5;
      end
    end

  assign #2 R_DIN_5_1 = R_DIN_5_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_54
      if (reset) begin
        holdData_R_DIN_4 <= 1'bx;
      end
      else begin
        holdData_R_DIN_4 <= rawData_R_DIN_4;
      end
    end

  always @(rawData_R_DIN_4 or rdEnb)
    begin : stimuli_R_DIN_55
      if (rdEnb == 1'b0) begin
        R_DIN_4_offset <= holdData_R_DIN_4;
      end
      else begin
        R_DIN_4_offset <= rawData_R_DIN_4;
      end
    end

  assign #2 R_DIN_4_1 = R_DIN_4_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_56
      if (reset) begin
        holdData_R_DIN_3 <= 1'bx;
      end
      else begin
        holdData_R_DIN_3 <= rawData_R_DIN_3;
      end
    end

  always @(rawData_R_DIN_3 or rdEnb)
    begin : stimuli_R_DIN_57
      if (rdEnb == 1'b0) begin
        R_DIN_3_offset <= holdData_R_DIN_3;
      end
      else begin
        R_DIN_3_offset <= rawData_R_DIN_3;
      end
    end

  assign #2 R_DIN_3_1 = R_DIN_3_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_58
      if (reset) begin
        holdData_R_DIN_2 <= 1'bx;
      end
      else begin
        holdData_R_DIN_2 <= rawData_R_DIN_2;
      end
    end

  always @(rawData_R_DIN_2 or rdEnb)
    begin : stimuli_R_DIN_59
      if (rdEnb == 1'b0) begin
        R_DIN_2_offset <= holdData_R_DIN_2;
      end
      else begin
        R_DIN_2_offset <= rawData_R_DIN_2;
      end
    end

  assign #2 R_DIN_2_1 = R_DIN_2_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_60
      if (reset) begin
        holdData_R_DIN_1 <= 1'bx;
      end
      else begin
        holdData_R_DIN_1 <= rawData_R_DIN_1;
      end
    end

  always @(rawData_R_DIN_1 or rdEnb)
    begin : stimuli_R_DIN_61
      if (rdEnb == 1'b0) begin
        R_DIN_1_offset <= holdData_R_DIN_1;
      end
      else begin
        R_DIN_1_offset <= rawData_R_DIN_1;
      end
    end

  assign #2 R_DIN_1_1 = R_DIN_1_offset;

  // holdData reg for R_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_R_DIN_62
      if (reset) begin
        holdData_R_DIN_0 <= 1'bx;
      end
      else begin
        holdData_R_DIN_0 <= rawData_R_DIN_0;
      end
    end

  always @(rawData_R_DIN_0 or rdEnb)
    begin : stimuli_R_DIN_63
      if (rdEnb == 1'b0) begin
        R_DIN_0_offset <= holdData_R_DIN_0;
      end
      else begin
        R_DIN_0_offset <= rawData_R_DIN_0;
      end
    end

  assign #2 R_DIN_0_1 = R_DIN_0_offset;

  // holdData reg for R_CLR
  always @(posedge clk or posedge reset)
    begin : stimuli_R_CLR
      if (reset) begin
        holdData_R_CLR <= 1'bx;
      end
      else begin
        holdData_R_CLR <= rawData_R_CLR;
      end
    end

  always @(rawData_R_CLR or rdEnb)
    begin : stimuli_R_CLR_1
      if (rdEnb == 1'b0) begin
        R_CLR_offset <= holdData_R_CLR;
      end
      else begin
        R_CLR_offset <= rawData_R_CLR;
      end
    end

  assign #2 R_CLR_1 = R_CLR_offset;

  // holdData reg for MCLK_IN
  always @(posedge clk or posedge reset)
    begin : stimuli_MCLK_IN
      if (reset) begin
        holdData_MCLK_IN <= 1'bx;
      end
      else begin
        holdData_MCLK_IN <= rawData_MCLK_IN;
      end
    end

  always @(rawData_MCLK_IN or rdEnb)
    begin : stimuli_MCLK_IN_1
      if (rdEnb == 1'b0) begin
        MCLK_IN_offset <= holdData_MCLK_IN;
      end
      else begin
        MCLK_IN_offset <= rawData_MCLK_IN;
      end
    end

  assign #2 MCLK_IN_1 = MCLK_IN_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN
      if (reset) begin
        holdData_L_DIN_31 <= 1'bx;
      end
      else begin
        holdData_L_DIN_31 <= rawData_L_DIN_31;
      end
    end

  always @(rawData_L_DIN_31 or rdEnb)
    begin : stimuli_L_DIN_1
      if (rdEnb == 1'b0) begin
        L_DIN_31_offset <= holdData_L_DIN_31;
      end
      else begin
        L_DIN_31_offset <= rawData_L_DIN_31;
      end
    end

  assign #2 L_DIN_31_1 = L_DIN_31_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_2
      if (reset) begin
        holdData_L_DIN_30 <= 1'bx;
      end
      else begin
        holdData_L_DIN_30 <= rawData_L_DIN_30;
      end
    end

  always @(rawData_L_DIN_30 or rdEnb)
    begin : stimuli_L_DIN_3
      if (rdEnb == 1'b0) begin
        L_DIN_30_offset <= holdData_L_DIN_30;
      end
      else begin
        L_DIN_30_offset <= rawData_L_DIN_30;
      end
    end

  assign #2 L_DIN_30_1 = L_DIN_30_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_4
      if (reset) begin
        holdData_L_DIN_29 <= 1'bx;
      end
      else begin
        holdData_L_DIN_29 <= rawData_L_DIN_29;
      end
    end

  always @(rawData_L_DIN_29 or rdEnb)
    begin : stimuli_L_DIN_5
      if (rdEnb == 1'b0) begin
        L_DIN_29_offset <= holdData_L_DIN_29;
      end
      else begin
        L_DIN_29_offset <= rawData_L_DIN_29;
      end
    end

  assign #2 L_DIN_29_1 = L_DIN_29_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_6
      if (reset) begin
        holdData_L_DIN_28 <= 1'bx;
      end
      else begin
        holdData_L_DIN_28 <= rawData_L_DIN_28;
      end
    end

  always @(rawData_L_DIN_28 or rdEnb)
    begin : stimuli_L_DIN_7
      if (rdEnb == 1'b0) begin
        L_DIN_28_offset <= holdData_L_DIN_28;
      end
      else begin
        L_DIN_28_offset <= rawData_L_DIN_28;
      end
    end

  assign #2 L_DIN_28_1 = L_DIN_28_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_8
      if (reset) begin
        holdData_L_DIN_27 <= 1'bx;
      end
      else begin
        holdData_L_DIN_27 <= rawData_L_DIN_27;
      end
    end

  always @(rawData_L_DIN_27 or rdEnb)
    begin : stimuli_L_DIN_9
      if (rdEnb == 1'b0) begin
        L_DIN_27_offset <= holdData_L_DIN_27;
      end
      else begin
        L_DIN_27_offset <= rawData_L_DIN_27;
      end
    end

  assign #2 L_DIN_27_1 = L_DIN_27_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_10
      if (reset) begin
        holdData_L_DIN_26 <= 1'bx;
      end
      else begin
        holdData_L_DIN_26 <= rawData_L_DIN_26;
      end
    end

  always @(rawData_L_DIN_26 or rdEnb)
    begin : stimuli_L_DIN_11
      if (rdEnb == 1'b0) begin
        L_DIN_26_offset <= holdData_L_DIN_26;
      end
      else begin
        L_DIN_26_offset <= rawData_L_DIN_26;
      end
    end

  assign #2 L_DIN_26_1 = L_DIN_26_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_12
      if (reset) begin
        holdData_L_DIN_25 <= 1'bx;
      end
      else begin
        holdData_L_DIN_25 <= rawData_L_DIN_25;
      end
    end

  always @(rawData_L_DIN_25 or rdEnb)
    begin : stimuli_L_DIN_13
      if (rdEnb == 1'b0) begin
        L_DIN_25_offset <= holdData_L_DIN_25;
      end
      else begin
        L_DIN_25_offset <= rawData_L_DIN_25;
      end
    end

  assign #2 L_DIN_25_1 = L_DIN_25_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_14
      if (reset) begin
        holdData_L_DIN_24 <= 1'bx;
      end
      else begin
        holdData_L_DIN_24 <= rawData_L_DIN_24;
      end
    end

  always @(rawData_L_DIN_24 or rdEnb)
    begin : stimuli_L_DIN_15
      if (rdEnb == 1'b0) begin
        L_DIN_24_offset <= holdData_L_DIN_24;
      end
      else begin
        L_DIN_24_offset <= rawData_L_DIN_24;
      end
    end

  assign #2 L_DIN_24_1 = L_DIN_24_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_16
      if (reset) begin
        holdData_L_DIN_23 <= 1'bx;
      end
      else begin
        holdData_L_DIN_23 <= rawData_L_DIN_23;
      end
    end

  always @(rawData_L_DIN_23 or rdEnb)
    begin : stimuli_L_DIN_17
      if (rdEnb == 1'b0) begin
        L_DIN_23_offset <= holdData_L_DIN_23;
      end
      else begin
        L_DIN_23_offset <= rawData_L_DIN_23;
      end
    end

  assign #2 L_DIN_23_1 = L_DIN_23_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_18
      if (reset) begin
        holdData_L_DIN_22 <= 1'bx;
      end
      else begin
        holdData_L_DIN_22 <= rawData_L_DIN_22;
      end
    end

  always @(rawData_L_DIN_22 or rdEnb)
    begin : stimuli_L_DIN_19
      if (rdEnb == 1'b0) begin
        L_DIN_22_offset <= holdData_L_DIN_22;
      end
      else begin
        L_DIN_22_offset <= rawData_L_DIN_22;
      end
    end

  assign #2 L_DIN_22_1 = L_DIN_22_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_20
      if (reset) begin
        holdData_L_DIN_21 <= 1'bx;
      end
      else begin
        holdData_L_DIN_21 <= rawData_L_DIN_21;
      end
    end

  always @(rawData_L_DIN_21 or rdEnb)
    begin : stimuli_L_DIN_21
      if (rdEnb == 1'b0) begin
        L_DIN_21_offset <= holdData_L_DIN_21;
      end
      else begin
        L_DIN_21_offset <= rawData_L_DIN_21;
      end
    end

  assign #2 L_DIN_21_1 = L_DIN_21_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_22
      if (reset) begin
        holdData_L_DIN_20 <= 1'bx;
      end
      else begin
        holdData_L_DIN_20 <= rawData_L_DIN_20;
      end
    end

  always @(rawData_L_DIN_20 or rdEnb)
    begin : stimuli_L_DIN_23
      if (rdEnb == 1'b0) begin
        L_DIN_20_offset <= holdData_L_DIN_20;
      end
      else begin
        L_DIN_20_offset <= rawData_L_DIN_20;
      end
    end

  assign #2 L_DIN_20_1 = L_DIN_20_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_24
      if (reset) begin
        holdData_L_DIN_19 <= 1'bx;
      end
      else begin
        holdData_L_DIN_19 <= rawData_L_DIN_19;
      end
    end

  always @(rawData_L_DIN_19 or rdEnb)
    begin : stimuli_L_DIN_25
      if (rdEnb == 1'b0) begin
        L_DIN_19_offset <= holdData_L_DIN_19;
      end
      else begin
        L_DIN_19_offset <= rawData_L_DIN_19;
      end
    end

  assign #2 L_DIN_19_1 = L_DIN_19_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_26
      if (reset) begin
        holdData_L_DIN_18 <= 1'bx;
      end
      else begin
        holdData_L_DIN_18 <= rawData_L_DIN_18;
      end
    end

  always @(rawData_L_DIN_18 or rdEnb)
    begin : stimuli_L_DIN_27
      if (rdEnb == 1'b0) begin
        L_DIN_18_offset <= holdData_L_DIN_18;
      end
      else begin
        L_DIN_18_offset <= rawData_L_DIN_18;
      end
    end

  assign #2 L_DIN_18_1 = L_DIN_18_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_28
      if (reset) begin
        holdData_L_DIN_17 <= 1'bx;
      end
      else begin
        holdData_L_DIN_17 <= rawData_L_DIN_17;
      end
    end

  always @(rawData_L_DIN_17 or rdEnb)
    begin : stimuli_L_DIN_29
      if (rdEnb == 1'b0) begin
        L_DIN_17_offset <= holdData_L_DIN_17;
      end
      else begin
        L_DIN_17_offset <= rawData_L_DIN_17;
      end
    end

  assign #2 L_DIN_17_1 = L_DIN_17_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_30
      if (reset) begin
        holdData_L_DIN_16 <= 1'bx;
      end
      else begin
        holdData_L_DIN_16 <= rawData_L_DIN_16;
      end
    end

  always @(rawData_L_DIN_16 or rdEnb)
    begin : stimuli_L_DIN_31
      if (rdEnb == 1'b0) begin
        L_DIN_16_offset <= holdData_L_DIN_16;
      end
      else begin
        L_DIN_16_offset <= rawData_L_DIN_16;
      end
    end

  assign #2 L_DIN_16_1 = L_DIN_16_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_32
      if (reset) begin
        holdData_L_DIN_15 <= 1'bx;
      end
      else begin
        holdData_L_DIN_15 <= rawData_L_DIN_15;
      end
    end

  always @(rawData_L_DIN_15 or rdEnb)
    begin : stimuli_L_DIN_33
      if (rdEnb == 1'b0) begin
        L_DIN_15_offset <= holdData_L_DIN_15;
      end
      else begin
        L_DIN_15_offset <= rawData_L_DIN_15;
      end
    end

  assign #2 L_DIN_15_1 = L_DIN_15_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_34
      if (reset) begin
        holdData_L_DIN_14 <= 1'bx;
      end
      else begin
        holdData_L_DIN_14 <= rawData_L_DIN_14;
      end
    end

  always @(rawData_L_DIN_14 or rdEnb)
    begin : stimuli_L_DIN_35
      if (rdEnb == 1'b0) begin
        L_DIN_14_offset <= holdData_L_DIN_14;
      end
      else begin
        L_DIN_14_offset <= rawData_L_DIN_14;
      end
    end

  assign #2 L_DIN_14_1 = L_DIN_14_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_36
      if (reset) begin
        holdData_L_DIN_13 <= 1'bx;
      end
      else begin
        holdData_L_DIN_13 <= rawData_L_DIN_13;
      end
    end

  always @(rawData_L_DIN_13 or rdEnb)
    begin : stimuli_L_DIN_37
      if (rdEnb == 1'b0) begin
        L_DIN_13_offset <= holdData_L_DIN_13;
      end
      else begin
        L_DIN_13_offset <= rawData_L_DIN_13;
      end
    end

  assign #2 L_DIN_13_1 = L_DIN_13_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_38
      if (reset) begin
        holdData_L_DIN_12 <= 1'bx;
      end
      else begin
        holdData_L_DIN_12 <= rawData_L_DIN_12;
      end
    end

  always @(rawData_L_DIN_12 or rdEnb)
    begin : stimuli_L_DIN_39
      if (rdEnb == 1'b0) begin
        L_DIN_12_offset <= holdData_L_DIN_12;
      end
      else begin
        L_DIN_12_offset <= rawData_L_DIN_12;
      end
    end

  assign #2 L_DIN_12_1 = L_DIN_12_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_40
      if (reset) begin
        holdData_L_DIN_11 <= 1'bx;
      end
      else begin
        holdData_L_DIN_11 <= rawData_L_DIN_11;
      end
    end

  always @(rawData_L_DIN_11 or rdEnb)
    begin : stimuli_L_DIN_41
      if (rdEnb == 1'b0) begin
        L_DIN_11_offset <= holdData_L_DIN_11;
      end
      else begin
        L_DIN_11_offset <= rawData_L_DIN_11;
      end
    end

  assign #2 L_DIN_11_1 = L_DIN_11_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_42
      if (reset) begin
        holdData_L_DIN_10 <= 1'bx;
      end
      else begin
        holdData_L_DIN_10 <= rawData_L_DIN_10;
      end
    end

  always @(rawData_L_DIN_10 or rdEnb)
    begin : stimuli_L_DIN_43
      if (rdEnb == 1'b0) begin
        L_DIN_10_offset <= holdData_L_DIN_10;
      end
      else begin
        L_DIN_10_offset <= rawData_L_DIN_10;
      end
    end

  assign #2 L_DIN_10_1 = L_DIN_10_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_44
      if (reset) begin
        holdData_L_DIN_9 <= 1'bx;
      end
      else begin
        holdData_L_DIN_9 <= rawData_L_DIN_9;
      end
    end

  always @(rawData_L_DIN_9 or rdEnb)
    begin : stimuli_L_DIN_45
      if (rdEnb == 1'b0) begin
        L_DIN_9_offset <= holdData_L_DIN_9;
      end
      else begin
        L_DIN_9_offset <= rawData_L_DIN_9;
      end
    end

  assign #2 L_DIN_9_1 = L_DIN_9_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_46
      if (reset) begin
        holdData_L_DIN_8 <= 1'bx;
      end
      else begin
        holdData_L_DIN_8 <= rawData_L_DIN_8;
      end
    end

  always @(rawData_L_DIN_8 or rdEnb)
    begin : stimuli_L_DIN_47
      if (rdEnb == 1'b0) begin
        L_DIN_8_offset <= holdData_L_DIN_8;
      end
      else begin
        L_DIN_8_offset <= rawData_L_DIN_8;
      end
    end

  assign #2 L_DIN_8_1 = L_DIN_8_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_48
      if (reset) begin
        holdData_L_DIN_7 <= 1'bx;
      end
      else begin
        holdData_L_DIN_7 <= rawData_L_DIN_7;
      end
    end

  always @(rawData_L_DIN_7 or rdEnb)
    begin : stimuli_L_DIN_49
      if (rdEnb == 1'b0) begin
        L_DIN_7_offset <= holdData_L_DIN_7;
      end
      else begin
        L_DIN_7_offset <= rawData_L_DIN_7;
      end
    end

  assign #2 L_DIN_7_1 = L_DIN_7_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_50
      if (reset) begin
        holdData_L_DIN_6 <= 1'bx;
      end
      else begin
        holdData_L_DIN_6 <= rawData_L_DIN_6;
      end
    end

  always @(rawData_L_DIN_6 or rdEnb)
    begin : stimuli_L_DIN_51
      if (rdEnb == 1'b0) begin
        L_DIN_6_offset <= holdData_L_DIN_6;
      end
      else begin
        L_DIN_6_offset <= rawData_L_DIN_6;
      end
    end

  assign #2 L_DIN_6_1 = L_DIN_6_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_52
      if (reset) begin
        holdData_L_DIN_5 <= 1'bx;
      end
      else begin
        holdData_L_DIN_5 <= rawData_L_DIN_5;
      end
    end

  always @(rawData_L_DIN_5 or rdEnb)
    begin : stimuli_L_DIN_53
      if (rdEnb == 1'b0) begin
        L_DIN_5_offset <= holdData_L_DIN_5;
      end
      else begin
        L_DIN_5_offset <= rawData_L_DIN_5;
      end
    end

  assign #2 L_DIN_5_1 = L_DIN_5_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_54
      if (reset) begin
        holdData_L_DIN_4 <= 1'bx;
      end
      else begin
        holdData_L_DIN_4 <= rawData_L_DIN_4;
      end
    end

  always @(rawData_L_DIN_4 or rdEnb)
    begin : stimuli_L_DIN_55
      if (rdEnb == 1'b0) begin
        L_DIN_4_offset <= holdData_L_DIN_4;
      end
      else begin
        L_DIN_4_offset <= rawData_L_DIN_4;
      end
    end

  assign #2 L_DIN_4_1 = L_DIN_4_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_56
      if (reset) begin
        holdData_L_DIN_3 <= 1'bx;
      end
      else begin
        holdData_L_DIN_3 <= rawData_L_DIN_3;
      end
    end

  always @(rawData_L_DIN_3 or rdEnb)
    begin : stimuli_L_DIN_57
      if (rdEnb == 1'b0) begin
        L_DIN_3_offset <= holdData_L_DIN_3;
      end
      else begin
        L_DIN_3_offset <= rawData_L_DIN_3;
      end
    end

  assign #2 L_DIN_3_1 = L_DIN_3_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_58
      if (reset) begin
        holdData_L_DIN_2 <= 1'bx;
      end
      else begin
        holdData_L_DIN_2 <= rawData_L_DIN_2;
      end
    end

  always @(rawData_L_DIN_2 or rdEnb)
    begin : stimuli_L_DIN_59
      if (rdEnb == 1'b0) begin
        L_DIN_2_offset <= holdData_L_DIN_2;
      end
      else begin
        L_DIN_2_offset <= rawData_L_DIN_2;
      end
    end

  assign #2 L_DIN_2_1 = L_DIN_2_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_60
      if (reset) begin
        holdData_L_DIN_1 <= 1'bx;
      end
      else begin
        holdData_L_DIN_1 <= rawData_L_DIN_1;
      end
    end

  always @(rawData_L_DIN_1 or rdEnb)
    begin : stimuli_L_DIN_61
      if (rdEnb == 1'b0) begin
        L_DIN_1_offset <= holdData_L_DIN_1;
      end
      else begin
        L_DIN_1_offset <= rawData_L_DIN_1;
      end
    end

  assign #2 L_DIN_1_1 = L_DIN_1_offset;

  // holdData reg for L_DIN
  always @(posedge clk or posedge reset)
    begin : stimuli_L_DIN_62
      if (reset) begin
        holdData_L_DIN_0 <= 1'bx;
      end
      else begin
        holdData_L_DIN_0 <= rawData_L_DIN_0;
      end
    end

  always @(rawData_L_DIN_0 or rdEnb)
    begin : stimuli_L_DIN_63
      if (rdEnb == 1'b0) begin
        L_DIN_0_offset <= holdData_L_DIN_0;
      end
      else begin
        L_DIN_0_offset <= rawData_L_DIN_0;
      end
    end

  assign #2 L_DIN_0_1 = L_DIN_0_offset;

  // holdData reg for L_CLR
  always @(posedge clk or posedge reset)
    begin : stimuli_L_CLR
      if (reset) begin
        holdData_L_CLR <= 1'bx;
      end
      else begin
        holdData_L_CLR <= rawData_L_CLR;
      end
    end

  always @(rawData_L_CLR or rdEnb)
    begin : stimuli_L_CLR_1
      if (rdEnb == 1'b0) begin
        L_CLR_offset <= holdData_L_CLR;
      end
      else begin
        L_CLR_offset <= rawData_L_CLR;
      end
    end

  assign #2 L_CLR_1 = L_CLR_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (snkDone == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  I2S u_I2S (.clk(clk),
             .reset(reset),
             .clk_enable(clk_enable),
             .L_CLR(L_CLR_1),
             .L_DIN_0(L_DIN_0_1),
             .L_DIN_1(L_DIN_1_1),
             .L_DIN_2(L_DIN_2_1),
             .L_DIN_3(L_DIN_3_1),
             .L_DIN_4(L_DIN_4_1),
             .L_DIN_5(L_DIN_5_1),
             .L_DIN_6(L_DIN_6_1),
             .L_DIN_7(L_DIN_7_1),
             .L_DIN_8(L_DIN_8_1),
             .L_DIN_9(L_DIN_9_1),
             .L_DIN_10(L_DIN_10_1),
             .L_DIN_11(L_DIN_11_1),
             .L_DIN_12(L_DIN_12_1),
             .L_DIN_13(L_DIN_13_1),
             .L_DIN_14(L_DIN_14_1),
             .L_DIN_15(L_DIN_15_1),
             .L_DIN_16(L_DIN_16_1),
             .L_DIN_17(L_DIN_17_1),
             .L_DIN_18(L_DIN_18_1),
             .L_DIN_19(L_DIN_19_1),
             .L_DIN_20(L_DIN_20_1),
             .L_DIN_21(L_DIN_21_1),
             .L_DIN_22(L_DIN_22_1),
             .L_DIN_23(L_DIN_23_1),
             .L_DIN_24(L_DIN_24_1),
             .L_DIN_25(L_DIN_25_1),
             .L_DIN_26(L_DIN_26_1),
             .L_DIN_27(L_DIN_27_1),
             .L_DIN_28(L_DIN_28_1),
             .L_DIN_29(L_DIN_29_1),
             .L_DIN_30(L_DIN_30_1),
             .L_DIN_31(L_DIN_31_1),
             .MCLK_IN(MCLK_IN_1),
             .R_CLR(R_CLR_1),
             .R_DIN_0(R_DIN_0_1),
             .R_DIN_1(R_DIN_1_1),
             .R_DIN_2(R_DIN_2_1),
             .R_DIN_3(R_DIN_3_1),
             .R_DIN_4(R_DIN_4_1),
             .R_DIN_5(R_DIN_5_1),
             .R_DIN_6(R_DIN_6_1),
             .R_DIN_7(R_DIN_7_1),
             .R_DIN_8(R_DIN_8_1),
             .R_DIN_9(R_DIN_9_1),
             .R_DIN_10(R_DIN_10_1),
             .R_DIN_11(R_DIN_11_1),
             .R_DIN_12(R_DIN_12_1),
             .R_DIN_13(R_DIN_13_1),
             .R_DIN_14(R_DIN_14_1),
             .R_DIN_15(R_DIN_15_1),
             .R_DIN_16(R_DIN_16_1),
             .R_DIN_17(R_DIN_17_1),
             .R_DIN_18(R_DIN_18_1),
             .R_DIN_19(R_DIN_19_1),
             .R_DIN_20(R_DIN_20_1),
             .R_DIN_21(R_DIN_21_1),
             .R_DIN_22(R_DIN_22_1),
             .R_DIN_23(R_DIN_23_1),
             .R_DIN_24(R_DIN_24_1),
             .R_DIN_25(R_DIN_25_1),
             .R_DIN_26(R_DIN_26_1),
             .R_DIN_27(R_DIN_27_1),
             .R_DIN_28(R_DIN_28_1),
             .R_DIN_29(R_DIN_29_1),
             .R_DIN_30(R_DIN_30_1),
             .R_DIN_31(R_DIN_31_1),
             .ce_out(ce_out),
             .SOUT(SOUT),
             .MCLK_OUT(MCLK_OUT),
             .LRCLK_OUT(LRCLK_OUT),
             .SCLK_OUT(SCLK_OUT)
             );

  assign SOUT_enb = ce_out & SOUT_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10000
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        SOUT_addr <= 14'b00000000000000;
      end
      else begin
        if (SOUT_enb) begin
          if (SOUT_addr >= 14'b10011100010000) begin
            SOUT_addr <= 14'b00000000000000;
          end
          else begin
            SOUT_addr <= SOUT_addr + 14'b00000000000001;
          end
        end
      end
    end



  assign SOUT_lastAddr = SOUT_addr >= 14'b10011100010000;



  assign SOUT_done = SOUT_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (SOUT_done_enb) begin
          check1_done <= SOUT_done;
        end
      end
    end

  assign snkDone = check4_done & (check3_done & (check1_done & check2_done));



  // Data source for SOUT_expected
  assign SOUT_expected_1 = 1'b0;



  assign SOUT_ref = SOUT_expected_1;

  always @(posedge clk or posedge reset)
    begin : SOUT_checker
      if (reset == 1'b1) begin
        SOUT_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && SOUT !== SOUT_ref) begin
          SOUT_testFailure <= 1'b1;
          $display("ERROR in SOUT at time %t : Expected '%h' Actual '%h'", $time, SOUT_ref, SOUT);
        end
      end
    end

  // Data source for MCLK_OUT_expected
  assign MCLK_OUT_expected_1 = 1'b0;



  assign MCLK_OUT_ref = MCLK_OUT_expected_1;

  always @(posedge clk or posedge reset)
    begin : MCLK_OUT_checker
      if (reset == 1'b1) begin
        MCLK_OUT_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && MCLK_OUT !== MCLK_OUT_ref) begin
          MCLK_OUT_testFailure <= 1'b1;
          $display("ERROR in MCLK_OUT at time %t : Expected '%h' Actual '%h'", $time, MCLK_OUT_ref, MCLK_OUT);
        end
      end
    end

  // Data source for LRCLK_OUT_expected
  assign LRCLK_OUT_expected_1 = 1'b0;



  assign LRCLK_OUT_ref = LRCLK_OUT_expected_1;

  always @(posedge clk or posedge reset)
    begin : LRCLK_OUT_checker
      if (reset == 1'b1) begin
        LRCLK_OUT_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && LRCLK_OUT !== LRCLK_OUT_ref) begin
          LRCLK_OUT_testFailure <= 1'b1;
          $display("ERROR in LRCLK_OUT at time %t : Expected '%h' Actual '%h'", $time, LRCLK_OUT_ref, LRCLK_OUT);
        end
      end
    end

  // Data source for SCLK_OUT_expected
  assign SCLK_OUT_expected_1 = 1'b0;



  assign SCLK_OUT_ref = SCLK_OUT_expected_1;

  always @(posedge clk or posedge reset)
    begin : SCLK_OUT_checker
      if (reset == 1'b1) begin
        SCLK_OUT_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && SCLK_OUT !== SCLK_OUT_ref) begin
          SCLK_OUT_testFailure <= 1'b1;
          $display("ERROR in SCLK_OUT at time %t : Expected '%h' Actual '%h'", $time, SCLK_OUT_ref, SCLK_OUT);
        end
      end
    end

  assign testFailure = SCLK_OUT_testFailure | (LRCLK_OUT_testFailure | (SOUT_testFailure | MCLK_OUT_testFailure));



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // I2S_tb

