// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\I2S\I2S.v
// Created: 2023-10-15 13:37:26
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// SOUT_0                        ce_out        1
// SOUT_1                        ce_out        1
// SOUT_2                        ce_out        1
// SOUT_3                        ce_out        1
// SOUT_4                        ce_out        1
// SOUT_5                        ce_out        1
// SOUT_6                        ce_out        1
// SOUT_7                        ce_out        1
// SOUT_8                        ce_out        1
// SOUT_9                        ce_out        1
// SOUT_10                       ce_out        1
// SOUT_11                       ce_out        1
// SOUT_12                       ce_out        1
// SOUT_13                       ce_out        1
// SOUT_14                       ce_out        1
// SOUT_15                       ce_out        1
// SOUT_16                       ce_out        1
// SOUT_17                       ce_out        1
// SOUT_18                       ce_out        1
// SOUT_19                       ce_out        1
// SOUT_20                       ce_out        1
// SOUT_21                       ce_out        1
// SOUT_22                       ce_out        1
// SOUT_23                       ce_out        1
// SOUT_24                       ce_out        1
// SOUT_25                       ce_out        1
// SOUT_26                       ce_out        1
// SOUT_27                       ce_out        1
// SOUT_28                       ce_out        1
// SOUT_29                       ce_out        1
// SOUT_30                       ce_out        1
// SOUT_31                       ce_out        1
// MCLK_OUT                      ce_out        1
// LRCLK_OUT                     ce_out        1
// SCLK_OUT                      ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: I2S
// Source Path: I2S/I2S
// Hierarchy Level: 0
// Model version: 1.83
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module I2S
          (clk,
           reset,
           clk_enable,
           L_CLR,
           L_DIN,
           MCLK_IN,
           R_CLR,
           R_DIN,
           ce_out,
           SOUT_0,
           SOUT_1,
           SOUT_2,
           SOUT_3,
           SOUT_4,
           SOUT_5,
           SOUT_6,
           SOUT_7,
           SOUT_8,
           SOUT_9,
           SOUT_10,
           SOUT_11,
           SOUT_12,
           SOUT_13,
           SOUT_14,
           SOUT_15,
           SOUT_16,
           SOUT_17,
           SOUT_18,
           SOUT_19,
           SOUT_20,
           SOUT_21,
           SOUT_22,
           SOUT_23,
           SOUT_24,
           SOUT_25,
           SOUT_26,
           SOUT_27,
           SOUT_28,
           SOUT_29,
           SOUT_30,
           SOUT_31,
           MCLK_OUT,
           LRCLK_OUT,
           SCLK_OUT);


  input   clk;
  input   reset;
  input   clk_enable;
  input   L_CLR;
  input   [31:0] L_DIN;  // uint32
  input   MCLK_IN;
  input   R_CLR;
  input   [31:0] R_DIN;  // uint32
  output  ce_out;
  output  SOUT_0;  // boolean
  output  SOUT_1;  // boolean
  output  SOUT_2;  // boolean
  output  SOUT_3;  // boolean
  output  SOUT_4;  // boolean
  output  SOUT_5;  // boolean
  output  SOUT_6;  // boolean
  output  SOUT_7;  // boolean
  output  SOUT_8;  // boolean
  output  SOUT_9;  // boolean
  output  SOUT_10;  // boolean
  output  SOUT_11;  // boolean
  output  SOUT_12;  // boolean
  output  SOUT_13;  // boolean
  output  SOUT_14;  // boolean
  output  SOUT_15;  // boolean
  output  SOUT_16;  // boolean
  output  SOUT_17;  // boolean
  output  SOUT_18;  // boolean
  output  SOUT_19;  // boolean
  output  SOUT_20;  // boolean
  output  SOUT_21;  // boolean
  output  SOUT_22;  // boolean
  output  SOUT_23;  // boolean
  output  SOUT_24;  // boolean
  output  SOUT_25;  // boolean
  output  SOUT_26;  // boolean
  output  SOUT_27;  // boolean
  output  SOUT_28;  // boolean
  output  SOUT_29;  // boolean
  output  SOUT_30;  // boolean
  output  SOUT_31;  // boolean
  output  MCLK_OUT;
  output  LRCLK_OUT;
  output  SCLK_OUT;


  wire enb;
  wire [15:0] count_step;  // uint16
  wire [15:0] count_from;  // uint16
  reg [15:0] HDL_Counter_out1;  // uint16
  wire [15:0] count;  // uint16
  wire need_to_wrap;
  wire [15:0] count_value;  // uint16
  wire [15:0] count_1;  // uint16
  wire [15:0] Constant2_out1;  // uint16
  wire LRCLK_relop1;
  wire Logical_Operator_out1;
  wire [15:0] count_step_1;  // uint16
  wire [15:0] count_from_1;  // uint16
  reg [15:0] HDL_Counter1_out1;  // uint16
  wire [15:0] count_2;  // uint16
  wire need_to_wrap_1;
  wire [15:0] count_value_1;  // uint16
  wire [15:0] count_3;  // uint16
  wire [15:0] Constant1_out1;  // uint16
  wire SCLK_relop1;
  wire PISO_SHIFT_REG_LEFT_out1_0;
  wire PISO_SHIFT_REG_LEFT_out1_1;
  wire PISO_SHIFT_REG_LEFT_out1_2;
  wire PISO_SHIFT_REG_LEFT_out1_3;
  wire PISO_SHIFT_REG_LEFT_out1_4;
  wire PISO_SHIFT_REG_LEFT_out1_5;
  wire PISO_SHIFT_REG_LEFT_out1_6;
  wire PISO_SHIFT_REG_LEFT_out1_7;
  wire PISO_SHIFT_REG_LEFT_out1_8;
  wire PISO_SHIFT_REG_LEFT_out1_9;
  wire PISO_SHIFT_REG_LEFT_out1_10;
  wire PISO_SHIFT_REG_LEFT_out1_11;
  wire PISO_SHIFT_REG_LEFT_out1_12;
  wire PISO_SHIFT_REG_LEFT_out1_13;
  wire PISO_SHIFT_REG_LEFT_out1_14;
  wire PISO_SHIFT_REG_LEFT_out1_15;
  wire PISO_SHIFT_REG_LEFT_out1_16;
  wire PISO_SHIFT_REG_LEFT_out1_17;
  wire PISO_SHIFT_REG_LEFT_out1_18;
  wire PISO_SHIFT_REG_LEFT_out1_19;
  wire PISO_SHIFT_REG_LEFT_out1_20;
  wire PISO_SHIFT_REG_LEFT_out1_21;
  wire PISO_SHIFT_REG_LEFT_out1_22;
  wire PISO_SHIFT_REG_LEFT_out1_23;
  wire PISO_SHIFT_REG_LEFT_out1_24;
  wire PISO_SHIFT_REG_LEFT_out1_25;
  wire PISO_SHIFT_REG_LEFT_out1_26;
  wire PISO_SHIFT_REG_LEFT_out1_27;
  wire PISO_SHIFT_REG_LEFT_out1_28;
  wire PISO_SHIFT_REG_LEFT_out1_29;
  wire PISO_SHIFT_REG_LEFT_out1_30;
  wire PISO_SHIFT_REG_LEFT_out1_31;
  wire PISO_SHIFT_REG_LEFT1_out1_0;
  wire PISO_SHIFT_REG_LEFT1_out1_1;
  wire PISO_SHIFT_REG_LEFT1_out1_2;
  wire PISO_SHIFT_REG_LEFT1_out1_3;
  wire PISO_SHIFT_REG_LEFT1_out1_4;
  wire PISO_SHIFT_REG_LEFT1_out1_5;
  wire PISO_SHIFT_REG_LEFT1_out1_6;
  wire PISO_SHIFT_REG_LEFT1_out1_7;
  wire PISO_SHIFT_REG_LEFT1_out1_8;
  wire PISO_SHIFT_REG_LEFT1_out1_9;
  wire PISO_SHIFT_REG_LEFT1_out1_10;
  wire PISO_SHIFT_REG_LEFT1_out1_11;
  wire PISO_SHIFT_REG_LEFT1_out1_12;
  wire PISO_SHIFT_REG_LEFT1_out1_13;
  wire PISO_SHIFT_REG_LEFT1_out1_14;
  wire PISO_SHIFT_REG_LEFT1_out1_15;
  wire PISO_SHIFT_REG_LEFT1_out1_16;
  wire PISO_SHIFT_REG_LEFT1_out1_17;
  wire PISO_SHIFT_REG_LEFT1_out1_18;
  wire PISO_SHIFT_REG_LEFT1_out1_19;
  wire PISO_SHIFT_REG_LEFT1_out1_20;
  wire PISO_SHIFT_REG_LEFT1_out1_21;
  wire PISO_SHIFT_REG_LEFT1_out1_22;
  wire PISO_SHIFT_REG_LEFT1_out1_23;
  wire PISO_SHIFT_REG_LEFT1_out1_24;
  wire PISO_SHIFT_REG_LEFT1_out1_25;
  wire PISO_SHIFT_REG_LEFT1_out1_26;
  wire PISO_SHIFT_REG_LEFT1_out1_27;
  wire PISO_SHIFT_REG_LEFT1_out1_28;
  wire PISO_SHIFT_REG_LEFT1_out1_29;
  wire PISO_SHIFT_REG_LEFT1_out1_30;
  wire PISO_SHIFT_REG_LEFT1_out1_31;
  wire MUX15_out1_0;
  wire MUX15_out1_1;
  wire MUX15_out1_2;
  wire MUX15_out1_3;
  wire MUX15_out1_4;
  wire MUX15_out1_5;
  wire MUX15_out1_6;
  wire MUX15_out1_7;
  wire MUX15_out1_8;
  wire MUX15_out1_9;
  wire MUX15_out1_10;
  wire MUX15_out1_11;
  wire MUX15_out1_12;
  wire MUX15_out1_13;
  wire MUX15_out1_14;
  wire MUX15_out1_15;
  wire MUX15_out1_16;
  wire MUX15_out1_17;
  wire MUX15_out1_18;
  wire MUX15_out1_19;
  wire MUX15_out1_20;
  wire MUX15_out1_21;
  wire MUX15_out1_22;
  wire MUX15_out1_23;
  wire MUX15_out1_24;
  wire MUX15_out1_25;
  wire MUX15_out1_26;
  wire MUX15_out1_27;
  wire MUX15_out1_28;
  wire MUX15_out1_29;
  wire MUX15_out1_30;
  wire MUX15_out1_31;


  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 511
  assign count_step = 16'b0000000000000001;



  assign count_from = 16'b0000000000000000;



  assign enb = clk_enable;

  assign count = HDL_Counter_out1 + count_step;



  assign need_to_wrap = HDL_Counter_out1 == 16'b0000000111111111;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (MCLK_IN == 1'b0 ? HDL_Counter_out1 :
              count_value);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HDL_Counter_out1 <= count_1;
        end
      end
    end



  assign Constant2_out1 = 16'b0000000100000000;



  assign LRCLK_relop1 = HDL_Counter_out1 >= Constant2_out1;



  assign Logical_Operator_out1 =  ~ LRCLK_relop1;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 7
  assign count_step_1 = 16'b0000000000000001;



  assign count_from_1 = 16'b0000000000000000;



  assign count_2 = HDL_Counter1_out1 + count_step_1;



  assign need_to_wrap_1 = HDL_Counter1_out1 == 16'b0000000000000111;



  assign count_value_1 = (need_to_wrap_1 == 1'b0 ? count_2 :
              count_from_1);



  assign count_3 = (MCLK_IN == 1'b0 ? HDL_Counter1_out1 :
              count_value_1);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter1_process
      if (reset == 1'b1) begin
        HDL_Counter1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HDL_Counter1_out1 <= count_3;
        end
      end
    end



  assign Constant1_out1 = 16'b0000000000000111;



  assign SCLK_relop1 = HDL_Counter1_out1 == Constant1_out1;



  PISO_SHIFT_REG_LEFT u_PISO_SHIFT_REG_LEFT (.clk(clk),
                                             .reset(reset),
                                             .enb(clk_enable),
                                             .CLR(L_CLR),
                                             .LOAD(Logical_Operator_out1),
                                             .CLK_1(SCLK_relop1),
                                             .PARA_IN(L_DIN),  // uint32
                                             .SERIAL_OUT_0(PISO_SHIFT_REG_LEFT_out1_0),  // boolean
                                             .SERIAL_OUT_1(PISO_SHIFT_REG_LEFT_out1_1),  // boolean
                                             .SERIAL_OUT_2(PISO_SHIFT_REG_LEFT_out1_2),  // boolean
                                             .SERIAL_OUT_3(PISO_SHIFT_REG_LEFT_out1_3),  // boolean
                                             .SERIAL_OUT_4(PISO_SHIFT_REG_LEFT_out1_4),  // boolean
                                             .SERIAL_OUT_5(PISO_SHIFT_REG_LEFT_out1_5),  // boolean
                                             .SERIAL_OUT_6(PISO_SHIFT_REG_LEFT_out1_6),  // boolean
                                             .SERIAL_OUT_7(PISO_SHIFT_REG_LEFT_out1_7),  // boolean
                                             .SERIAL_OUT_8(PISO_SHIFT_REG_LEFT_out1_8),  // boolean
                                             .SERIAL_OUT_9(PISO_SHIFT_REG_LEFT_out1_9),  // boolean
                                             .SERIAL_OUT_10(PISO_SHIFT_REG_LEFT_out1_10),  // boolean
                                             .SERIAL_OUT_11(PISO_SHIFT_REG_LEFT_out1_11),  // boolean
                                             .SERIAL_OUT_12(PISO_SHIFT_REG_LEFT_out1_12),  // boolean
                                             .SERIAL_OUT_13(PISO_SHIFT_REG_LEFT_out1_13),  // boolean
                                             .SERIAL_OUT_14(PISO_SHIFT_REG_LEFT_out1_14),  // boolean
                                             .SERIAL_OUT_15(PISO_SHIFT_REG_LEFT_out1_15),  // boolean
                                             .SERIAL_OUT_16(PISO_SHIFT_REG_LEFT_out1_16),  // boolean
                                             .SERIAL_OUT_17(PISO_SHIFT_REG_LEFT_out1_17),  // boolean
                                             .SERIAL_OUT_18(PISO_SHIFT_REG_LEFT_out1_18),  // boolean
                                             .SERIAL_OUT_19(PISO_SHIFT_REG_LEFT_out1_19),  // boolean
                                             .SERIAL_OUT_20(PISO_SHIFT_REG_LEFT_out1_20),  // boolean
                                             .SERIAL_OUT_21(PISO_SHIFT_REG_LEFT_out1_21),  // boolean
                                             .SERIAL_OUT_22(PISO_SHIFT_REG_LEFT_out1_22),  // boolean
                                             .SERIAL_OUT_23(PISO_SHIFT_REG_LEFT_out1_23),  // boolean
                                             .SERIAL_OUT_24(PISO_SHIFT_REG_LEFT_out1_24),  // boolean
                                             .SERIAL_OUT_25(PISO_SHIFT_REG_LEFT_out1_25),  // boolean
                                             .SERIAL_OUT_26(PISO_SHIFT_REG_LEFT_out1_26),  // boolean
                                             .SERIAL_OUT_27(PISO_SHIFT_REG_LEFT_out1_27),  // boolean
                                             .SERIAL_OUT_28(PISO_SHIFT_REG_LEFT_out1_28),  // boolean
                                             .SERIAL_OUT_29(PISO_SHIFT_REG_LEFT_out1_29),  // boolean
                                             .SERIAL_OUT_30(PISO_SHIFT_REG_LEFT_out1_30),  // boolean
                                             .SERIAL_OUT_31(PISO_SHIFT_REG_LEFT_out1_31)  // boolean
                                             );

  PISO_SHIFT_REG_LEFT1 u_PISO_SHIFT_REG_LEFT1 (.clk(clk),
                                               .reset(reset),
                                               .enb(clk_enable),
                                               .CLR(R_CLR),
                                               .LOAD(LRCLK_relop1),
                                               .CLK_1(SCLK_relop1),
                                               .PARA_IN(R_DIN),  // uint32
                                               .SERIAL_OUT_0(PISO_SHIFT_REG_LEFT1_out1_0),  // boolean
                                               .SERIAL_OUT_1(PISO_SHIFT_REG_LEFT1_out1_1),  // boolean
                                               .SERIAL_OUT_2(PISO_SHIFT_REG_LEFT1_out1_2),  // boolean
                                               .SERIAL_OUT_3(PISO_SHIFT_REG_LEFT1_out1_3),  // boolean
                                               .SERIAL_OUT_4(PISO_SHIFT_REG_LEFT1_out1_4),  // boolean
                                               .SERIAL_OUT_5(PISO_SHIFT_REG_LEFT1_out1_5),  // boolean
                                               .SERIAL_OUT_6(PISO_SHIFT_REG_LEFT1_out1_6),  // boolean
                                               .SERIAL_OUT_7(PISO_SHIFT_REG_LEFT1_out1_7),  // boolean
                                               .SERIAL_OUT_8(PISO_SHIFT_REG_LEFT1_out1_8),  // boolean
                                               .SERIAL_OUT_9(PISO_SHIFT_REG_LEFT1_out1_9),  // boolean
                                               .SERIAL_OUT_10(PISO_SHIFT_REG_LEFT1_out1_10),  // boolean
                                               .SERIAL_OUT_11(PISO_SHIFT_REG_LEFT1_out1_11),  // boolean
                                               .SERIAL_OUT_12(PISO_SHIFT_REG_LEFT1_out1_12),  // boolean
                                               .SERIAL_OUT_13(PISO_SHIFT_REG_LEFT1_out1_13),  // boolean
                                               .SERIAL_OUT_14(PISO_SHIFT_REG_LEFT1_out1_14),  // boolean
                                               .SERIAL_OUT_15(PISO_SHIFT_REG_LEFT1_out1_15),  // boolean
                                               .SERIAL_OUT_16(PISO_SHIFT_REG_LEFT1_out1_16),  // boolean
                                               .SERIAL_OUT_17(PISO_SHIFT_REG_LEFT1_out1_17),  // boolean
                                               .SERIAL_OUT_18(PISO_SHIFT_REG_LEFT1_out1_18),  // boolean
                                               .SERIAL_OUT_19(PISO_SHIFT_REG_LEFT1_out1_19),  // boolean
                                               .SERIAL_OUT_20(PISO_SHIFT_REG_LEFT1_out1_20),  // boolean
                                               .SERIAL_OUT_21(PISO_SHIFT_REG_LEFT1_out1_21),  // boolean
                                               .SERIAL_OUT_22(PISO_SHIFT_REG_LEFT1_out1_22),  // boolean
                                               .SERIAL_OUT_23(PISO_SHIFT_REG_LEFT1_out1_23),  // boolean
                                               .SERIAL_OUT_24(PISO_SHIFT_REG_LEFT1_out1_24),  // boolean
                                               .SERIAL_OUT_25(PISO_SHIFT_REG_LEFT1_out1_25),  // boolean
                                               .SERIAL_OUT_26(PISO_SHIFT_REG_LEFT1_out1_26),  // boolean
                                               .SERIAL_OUT_27(PISO_SHIFT_REG_LEFT1_out1_27),  // boolean
                                               .SERIAL_OUT_28(PISO_SHIFT_REG_LEFT1_out1_28),  // boolean
                                               .SERIAL_OUT_29(PISO_SHIFT_REG_LEFT1_out1_29),  // boolean
                                               .SERIAL_OUT_30(PISO_SHIFT_REG_LEFT1_out1_30),  // boolean
                                               .SERIAL_OUT_31(PISO_SHIFT_REG_LEFT1_out1_31)  // boolean
                                               );

  MUX15 u_MUX15 (.In1_0(PISO_SHIFT_REG_LEFT_out1_0),  // boolean
                 .In1_1(PISO_SHIFT_REG_LEFT_out1_1),  // boolean
                 .In1_2(PISO_SHIFT_REG_LEFT_out1_2),  // boolean
                 .In1_3(PISO_SHIFT_REG_LEFT_out1_3),  // boolean
                 .In1_4(PISO_SHIFT_REG_LEFT_out1_4),  // boolean
                 .In1_5(PISO_SHIFT_REG_LEFT_out1_5),  // boolean
                 .In1_6(PISO_SHIFT_REG_LEFT_out1_6),  // boolean
                 .In1_7(PISO_SHIFT_REG_LEFT_out1_7),  // boolean
                 .In1_8(PISO_SHIFT_REG_LEFT_out1_8),  // boolean
                 .In1_9(PISO_SHIFT_REG_LEFT_out1_9),  // boolean
                 .In1_10(PISO_SHIFT_REG_LEFT_out1_10),  // boolean
                 .In1_11(PISO_SHIFT_REG_LEFT_out1_11),  // boolean
                 .In1_12(PISO_SHIFT_REG_LEFT_out1_12),  // boolean
                 .In1_13(PISO_SHIFT_REG_LEFT_out1_13),  // boolean
                 .In1_14(PISO_SHIFT_REG_LEFT_out1_14),  // boolean
                 .In1_15(PISO_SHIFT_REG_LEFT_out1_15),  // boolean
                 .In1_16(PISO_SHIFT_REG_LEFT_out1_16),  // boolean
                 .In1_17(PISO_SHIFT_REG_LEFT_out1_17),  // boolean
                 .In1_18(PISO_SHIFT_REG_LEFT_out1_18),  // boolean
                 .In1_19(PISO_SHIFT_REG_LEFT_out1_19),  // boolean
                 .In1_20(PISO_SHIFT_REG_LEFT_out1_20),  // boolean
                 .In1_21(PISO_SHIFT_REG_LEFT_out1_21),  // boolean
                 .In1_22(PISO_SHIFT_REG_LEFT_out1_22),  // boolean
                 .In1_23(PISO_SHIFT_REG_LEFT_out1_23),  // boolean
                 .In1_24(PISO_SHIFT_REG_LEFT_out1_24),  // boolean
                 .In1_25(PISO_SHIFT_REG_LEFT_out1_25),  // boolean
                 .In1_26(PISO_SHIFT_REG_LEFT_out1_26),  // boolean
                 .In1_27(PISO_SHIFT_REG_LEFT_out1_27),  // boolean
                 .In1_28(PISO_SHIFT_REG_LEFT_out1_28),  // boolean
                 .In1_29(PISO_SHIFT_REG_LEFT_out1_29),  // boolean
                 .In1_30(PISO_SHIFT_REG_LEFT_out1_30),  // boolean
                 .In1_31(PISO_SHIFT_REG_LEFT_out1_31),  // boolean
                 .SERIAL_OUT_0(PISO_SHIFT_REG_LEFT1_out1_0),  // boolean
                 .SERIAL_OUT_1(PISO_SHIFT_REG_LEFT1_out1_1),  // boolean
                 .SERIAL_OUT_2(PISO_SHIFT_REG_LEFT1_out1_2),  // boolean
                 .SERIAL_OUT_3(PISO_SHIFT_REG_LEFT1_out1_3),  // boolean
                 .SERIAL_OUT_4(PISO_SHIFT_REG_LEFT1_out1_4),  // boolean
                 .SERIAL_OUT_5(PISO_SHIFT_REG_LEFT1_out1_5),  // boolean
                 .SERIAL_OUT_6(PISO_SHIFT_REG_LEFT1_out1_6),  // boolean
                 .SERIAL_OUT_7(PISO_SHIFT_REG_LEFT1_out1_7),  // boolean
                 .SERIAL_OUT_8(PISO_SHIFT_REG_LEFT1_out1_8),  // boolean
                 .SERIAL_OUT_9(PISO_SHIFT_REG_LEFT1_out1_9),  // boolean
                 .SERIAL_OUT_10(PISO_SHIFT_REG_LEFT1_out1_10),  // boolean
                 .SERIAL_OUT_11(PISO_SHIFT_REG_LEFT1_out1_11),  // boolean
                 .SERIAL_OUT_12(PISO_SHIFT_REG_LEFT1_out1_12),  // boolean
                 .SERIAL_OUT_13(PISO_SHIFT_REG_LEFT1_out1_13),  // boolean
                 .SERIAL_OUT_14(PISO_SHIFT_REG_LEFT1_out1_14),  // boolean
                 .SERIAL_OUT_15(PISO_SHIFT_REG_LEFT1_out1_15),  // boolean
                 .SERIAL_OUT_16(PISO_SHIFT_REG_LEFT1_out1_16),  // boolean
                 .SERIAL_OUT_17(PISO_SHIFT_REG_LEFT1_out1_17),  // boolean
                 .SERIAL_OUT_18(PISO_SHIFT_REG_LEFT1_out1_18),  // boolean
                 .SERIAL_OUT_19(PISO_SHIFT_REG_LEFT1_out1_19),  // boolean
                 .SERIAL_OUT_20(PISO_SHIFT_REG_LEFT1_out1_20),  // boolean
                 .SERIAL_OUT_21(PISO_SHIFT_REG_LEFT1_out1_21),  // boolean
                 .SERIAL_OUT_22(PISO_SHIFT_REG_LEFT1_out1_22),  // boolean
                 .SERIAL_OUT_23(PISO_SHIFT_REG_LEFT1_out1_23),  // boolean
                 .SERIAL_OUT_24(PISO_SHIFT_REG_LEFT1_out1_24),  // boolean
                 .SERIAL_OUT_25(PISO_SHIFT_REG_LEFT1_out1_25),  // boolean
                 .SERIAL_OUT_26(PISO_SHIFT_REG_LEFT1_out1_26),  // boolean
                 .SERIAL_OUT_27(PISO_SHIFT_REG_LEFT1_out1_27),  // boolean
                 .SERIAL_OUT_28(PISO_SHIFT_REG_LEFT1_out1_28),  // boolean
                 .SERIAL_OUT_29(PISO_SHIFT_REG_LEFT1_out1_29),  // boolean
                 .SERIAL_OUT_30(PISO_SHIFT_REG_LEFT1_out1_30),  // boolean
                 .SERIAL_OUT_31(PISO_SHIFT_REG_LEFT1_out1_31),  // boolean
                 .SEL(LRCLK_relop1),
                 .Out1_0(MUX15_out1_0),  // boolean
                 .Out1_1(MUX15_out1_1),  // boolean
                 .Out1_2(MUX15_out1_2),  // boolean
                 .Out1_3(MUX15_out1_3),  // boolean
                 .Out1_4(MUX15_out1_4),  // boolean
                 .Out1_5(MUX15_out1_5),  // boolean
                 .Out1_6(MUX15_out1_6),  // boolean
                 .Out1_7(MUX15_out1_7),  // boolean
                 .Out1_8(MUX15_out1_8),  // boolean
                 .Out1_9(MUX15_out1_9),  // boolean
                 .Out1_10(MUX15_out1_10),  // boolean
                 .Out1_11(MUX15_out1_11),  // boolean
                 .Out1_12(MUX15_out1_12),  // boolean
                 .Out1_13(MUX15_out1_13),  // boolean
                 .Out1_14(MUX15_out1_14),  // boolean
                 .Out1_15(MUX15_out1_15),  // boolean
                 .Out1_16(MUX15_out1_16),  // boolean
                 .Out1_17(MUX15_out1_17),  // boolean
                 .Out1_18(MUX15_out1_18),  // boolean
                 .Out1_19(MUX15_out1_19),  // boolean
                 .Out1_20(MUX15_out1_20),  // boolean
                 .Out1_21(MUX15_out1_21),  // boolean
                 .Out1_22(MUX15_out1_22),  // boolean
                 .Out1_23(MUX15_out1_23),  // boolean
                 .Out1_24(MUX15_out1_24),  // boolean
                 .Out1_25(MUX15_out1_25),  // boolean
                 .Out1_26(MUX15_out1_26),  // boolean
                 .Out1_27(MUX15_out1_27),  // boolean
                 .Out1_28(MUX15_out1_28),  // boolean
                 .Out1_29(MUX15_out1_29),  // boolean
                 .Out1_30(MUX15_out1_30),  // boolean
                 .Out1_31(MUX15_out1_31)  // boolean
                 );

  assign SOUT_0 = MUX15_out1_0;

  assign SOUT_1 = MUX15_out1_1;

  assign SOUT_2 = MUX15_out1_2;

  assign SOUT_3 = MUX15_out1_3;

  assign SOUT_4 = MUX15_out1_4;

  assign SOUT_5 = MUX15_out1_5;

  assign SOUT_6 = MUX15_out1_6;

  assign SOUT_7 = MUX15_out1_7;

  assign SOUT_8 = MUX15_out1_8;

  assign SOUT_9 = MUX15_out1_9;

  assign SOUT_10 = MUX15_out1_10;

  assign SOUT_11 = MUX15_out1_11;

  assign SOUT_12 = MUX15_out1_12;

  assign SOUT_13 = MUX15_out1_13;

  assign SOUT_14 = MUX15_out1_14;

  assign SOUT_15 = MUX15_out1_15;

  assign SOUT_16 = MUX15_out1_16;

  assign SOUT_17 = MUX15_out1_17;

  assign SOUT_18 = MUX15_out1_18;

  assign SOUT_19 = MUX15_out1_19;

  assign SOUT_20 = MUX15_out1_20;

  assign SOUT_21 = MUX15_out1_21;

  assign SOUT_22 = MUX15_out1_22;

  assign SOUT_23 = MUX15_out1_23;

  assign SOUT_24 = MUX15_out1_24;

  assign SOUT_25 = MUX15_out1_25;

  assign SOUT_26 = MUX15_out1_26;

  assign SOUT_27 = MUX15_out1_27;

  assign SOUT_28 = MUX15_out1_28;

  assign SOUT_29 = MUX15_out1_29;

  assign SOUT_30 = MUX15_out1_30;

  assign SOUT_31 = MUX15_out1_31;

  assign MCLK_OUT = MCLK_IN;

  assign LRCLK_OUT = LRCLK_relop1;

  assign SCLK_OUT = SCLK_relop1;

  assign ce_out = clk_enable;

endmodule  // I2S

