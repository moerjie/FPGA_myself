// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\I2S\MUX_block.v
// Created: 2023-10-15 13:37:26
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: MUX_block
// Source Path: I2S/I2S/PISO_SHIFT_REG_LEFT1/Subsystem/MUX
// Hierarchy Level: 3
// Model version: 1.83
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module MUX_block
          (In1_0,
           In1_1,
           In1_2,
           In1_3,
           In1_4,
           In1_5,
           In1_6,
           In1_7,
           In1_8,
           In1_9,
           In1_10,
           In1_11,
           In1_12,
           In1_13,
           In1_14,
           In1_15,
           In1_16,
           In1_17,
           In1_18,
           In1_19,
           In1_20,
           In1_21,
           In1_22,
           In1_23,
           In1_24,
           In1_25,
           In1_26,
           In1_27,
           In1_28,
           In1_29,
           In1_30,
           In1_31,
           In2,
           SEL,
           Out1_0,
           Out1_1,
           Out1_2,
           Out1_3,
           Out1_4,
           Out1_5,
           Out1_6,
           Out1_7,
           Out1_8,
           Out1_9,
           Out1_10,
           Out1_11,
           Out1_12,
           Out1_13,
           Out1_14,
           Out1_15,
           Out1_16,
           Out1_17,
           Out1_18,
           Out1_19,
           Out1_20,
           Out1_21,
           Out1_22,
           Out1_23,
           Out1_24,
           Out1_25,
           Out1_26,
           Out1_27,
           Out1_28,
           Out1_29,
           Out1_30,
           Out1_31);


  input   In1_0;  // boolean
  input   In1_1;  // boolean
  input   In1_2;  // boolean
  input   In1_3;  // boolean
  input   In1_4;  // boolean
  input   In1_5;  // boolean
  input   In1_6;  // boolean
  input   In1_7;  // boolean
  input   In1_8;  // boolean
  input   In1_9;  // boolean
  input   In1_10;  // boolean
  input   In1_11;  // boolean
  input   In1_12;  // boolean
  input   In1_13;  // boolean
  input   In1_14;  // boolean
  input   In1_15;  // boolean
  input   In1_16;  // boolean
  input   In1_17;  // boolean
  input   In1_18;  // boolean
  input   In1_19;  // boolean
  input   In1_20;  // boolean
  input   In1_21;  // boolean
  input   In1_22;  // boolean
  input   In1_23;  // boolean
  input   In1_24;  // boolean
  input   In1_25;  // boolean
  input   In1_26;  // boolean
  input   In1_27;  // boolean
  input   In1_28;  // boolean
  input   In1_29;  // boolean
  input   In1_30;  // boolean
  input   In1_31;  // boolean
  input   In2;
  input   SEL;
  output  Out1_0;  // boolean
  output  Out1_1;  // boolean
  output  Out1_2;  // boolean
  output  Out1_3;  // boolean
  output  Out1_4;  // boolean
  output  Out1_5;  // boolean
  output  Out1_6;  // boolean
  output  Out1_7;  // boolean
  output  Out1_8;  // boolean
  output  Out1_9;  // boolean
  output  Out1_10;  // boolean
  output  Out1_11;  // boolean
  output  Out1_12;  // boolean
  output  Out1_13;  // boolean
  output  Out1_14;  // boolean
  output  Out1_15;  // boolean
  output  Out1_16;  // boolean
  output  Out1_17;  // boolean
  output  Out1_18;  // boolean
  output  Out1_19;  // boolean
  output  Out1_20;  // boolean
  output  Out1_21;  // boolean
  output  Out1_22;  // boolean
  output  Out1_23;  // boolean
  output  Out1_24;  // boolean
  output  Out1_25;  // boolean
  output  Out1_26;  // boolean
  output  Out1_27;  // boolean
  output  Out1_28;  // boolean
  output  Out1_29;  // boolean
  output  Out1_30;  // boolean
  output  Out1_31;  // boolean


  wire Logical_Operator3_out1;
  wire In1_0_1;
  wire Logical_Operator1_out1;
  wire Logical_Operator_out1_0;
  wire In1_1_1;
  wire Logical_Operator_out1_1;
  wire In1_2_1;
  wire Logical_Operator_out1_2;
  wire In1_3_1;
  wire Logical_Operator_out1_3;
  wire In1_4_1;
  wire Logical_Operator_out1_4;
  wire In1_5_1;
  wire Logical_Operator_out1_5;
  wire In1_6_1;
  wire Logical_Operator_out1_6;
  wire In1_7_1;
  wire Logical_Operator_out1_7;
  wire In1_8_1;
  wire Logical_Operator_out1_8;
  wire In1_9_1;
  wire Logical_Operator_out1_9;
  wire In1_10_1;
  wire Logical_Operator_out1_10;
  wire In1_11_1;
  wire Logical_Operator_out1_11;
  wire In1_12_1;
  wire Logical_Operator_out1_12;
  wire In1_13_1;
  wire Logical_Operator_out1_13;
  wire In1_14_1;
  wire Logical_Operator_out1_14;
  wire In1_15_1;
  wire Logical_Operator_out1_15;
  wire In1_16_1;
  wire Logical_Operator_out1_16;
  wire In1_17_1;
  wire Logical_Operator_out1_17;
  wire In1_18_1;
  wire Logical_Operator_out1_18;
  wire In1_19_1;
  wire Logical_Operator_out1_19;
  wire In1_20_1;
  wire Logical_Operator_out1_20;
  wire In1_21_1;
  wire Logical_Operator_out1_21;
  wire In1_22_1;
  wire Logical_Operator_out1_22;
  wire In1_23_1;
  wire Logical_Operator_out1_23;
  wire In1_24_1;
  wire Logical_Operator_out1_24;
  wire In1_25_1;
  wire Logical_Operator_out1_25;
  wire In1_26_1;
  wire Logical_Operator_out1_26;
  wire In1_27_1;
  wire Logical_Operator_out1_27;
  wire In1_28_1;
  wire Logical_Operator_out1_28;
  wire In1_29_1;
  wire Logical_Operator_out1_29;
  wire In1_30_1;
  wire Logical_Operator_out1_30;
  wire In1_31_1;
  wire Logical_Operator_out1_31;

  // SEL=0  ==>  IN1


  assign Logical_Operator3_out1 =  ~ SEL;



  assign In1_0_1 = In1_0 & Logical_Operator3_out1;



  assign Logical_Operator1_out1 = SEL & In2;



  assign Logical_Operator_out1_0 = In1_0_1 | Logical_Operator1_out1;



  assign Out1_0 = Logical_Operator_out1_0;

  assign In1_1_1 = In1_1 & Logical_Operator3_out1;



  assign Logical_Operator_out1_1 = In1_1_1 | Logical_Operator1_out1;



  assign Out1_1 = Logical_Operator_out1_1;

  assign In1_2_1 = In1_2 & Logical_Operator3_out1;



  assign Logical_Operator_out1_2 = In1_2_1 | Logical_Operator1_out1;



  assign Out1_2 = Logical_Operator_out1_2;

  assign In1_3_1 = In1_3 & Logical_Operator3_out1;



  assign Logical_Operator_out1_3 = In1_3_1 | Logical_Operator1_out1;



  assign Out1_3 = Logical_Operator_out1_3;

  assign In1_4_1 = In1_4 & Logical_Operator3_out1;



  assign Logical_Operator_out1_4 = In1_4_1 | Logical_Operator1_out1;



  assign Out1_4 = Logical_Operator_out1_4;

  assign In1_5_1 = In1_5 & Logical_Operator3_out1;



  assign Logical_Operator_out1_5 = In1_5_1 | Logical_Operator1_out1;



  assign Out1_5 = Logical_Operator_out1_5;

  assign In1_6_1 = In1_6 & Logical_Operator3_out1;



  assign Logical_Operator_out1_6 = In1_6_1 | Logical_Operator1_out1;



  assign Out1_6 = Logical_Operator_out1_6;

  assign In1_7_1 = In1_7 & Logical_Operator3_out1;



  assign Logical_Operator_out1_7 = In1_7_1 | Logical_Operator1_out1;



  assign Out1_7 = Logical_Operator_out1_7;

  assign In1_8_1 = In1_8 & Logical_Operator3_out1;



  assign Logical_Operator_out1_8 = In1_8_1 | Logical_Operator1_out1;



  assign Out1_8 = Logical_Operator_out1_8;

  assign In1_9_1 = In1_9 & Logical_Operator3_out1;



  assign Logical_Operator_out1_9 = In1_9_1 | Logical_Operator1_out1;



  assign Out1_9 = Logical_Operator_out1_9;

  assign In1_10_1 = In1_10 & Logical_Operator3_out1;



  assign Logical_Operator_out1_10 = In1_10_1 | Logical_Operator1_out1;



  assign Out1_10 = Logical_Operator_out1_10;

  assign In1_11_1 = In1_11 & Logical_Operator3_out1;



  assign Logical_Operator_out1_11 = In1_11_1 | Logical_Operator1_out1;



  assign Out1_11 = Logical_Operator_out1_11;

  assign In1_12_1 = In1_12 & Logical_Operator3_out1;



  assign Logical_Operator_out1_12 = In1_12_1 | Logical_Operator1_out1;



  assign Out1_12 = Logical_Operator_out1_12;

  assign In1_13_1 = In1_13 & Logical_Operator3_out1;



  assign Logical_Operator_out1_13 = In1_13_1 | Logical_Operator1_out1;



  assign Out1_13 = Logical_Operator_out1_13;

  assign In1_14_1 = In1_14 & Logical_Operator3_out1;



  assign Logical_Operator_out1_14 = In1_14_1 | Logical_Operator1_out1;



  assign Out1_14 = Logical_Operator_out1_14;

  assign In1_15_1 = In1_15 & Logical_Operator3_out1;



  assign Logical_Operator_out1_15 = In1_15_1 | Logical_Operator1_out1;



  assign Out1_15 = Logical_Operator_out1_15;

  assign In1_16_1 = In1_16 & Logical_Operator3_out1;



  assign Logical_Operator_out1_16 = In1_16_1 | Logical_Operator1_out1;



  assign Out1_16 = Logical_Operator_out1_16;

  assign In1_17_1 = In1_17 & Logical_Operator3_out1;



  assign Logical_Operator_out1_17 = In1_17_1 | Logical_Operator1_out1;



  assign Out1_17 = Logical_Operator_out1_17;

  assign In1_18_1 = In1_18 & Logical_Operator3_out1;



  assign Logical_Operator_out1_18 = In1_18_1 | Logical_Operator1_out1;



  assign Out1_18 = Logical_Operator_out1_18;

  assign In1_19_1 = In1_19 & Logical_Operator3_out1;



  assign Logical_Operator_out1_19 = In1_19_1 | Logical_Operator1_out1;



  assign Out1_19 = Logical_Operator_out1_19;

  assign In1_20_1 = In1_20 & Logical_Operator3_out1;



  assign Logical_Operator_out1_20 = In1_20_1 | Logical_Operator1_out1;



  assign Out1_20 = Logical_Operator_out1_20;

  assign In1_21_1 = In1_21 & Logical_Operator3_out1;



  assign Logical_Operator_out1_21 = In1_21_1 | Logical_Operator1_out1;



  assign Out1_21 = Logical_Operator_out1_21;

  assign In1_22_1 = In1_22 & Logical_Operator3_out1;



  assign Logical_Operator_out1_22 = In1_22_1 | Logical_Operator1_out1;



  assign Out1_22 = Logical_Operator_out1_22;

  assign In1_23_1 = In1_23 & Logical_Operator3_out1;



  assign Logical_Operator_out1_23 = In1_23_1 | Logical_Operator1_out1;



  assign Out1_23 = Logical_Operator_out1_23;

  assign In1_24_1 = In1_24 & Logical_Operator3_out1;



  assign Logical_Operator_out1_24 = In1_24_1 | Logical_Operator1_out1;



  assign Out1_24 = Logical_Operator_out1_24;

  assign In1_25_1 = In1_25 & Logical_Operator3_out1;



  assign Logical_Operator_out1_25 = In1_25_1 | Logical_Operator1_out1;



  assign Out1_25 = Logical_Operator_out1_25;

  assign In1_26_1 = In1_26 & Logical_Operator3_out1;



  assign Logical_Operator_out1_26 = In1_26_1 | Logical_Operator1_out1;



  assign Out1_26 = Logical_Operator_out1_26;

  assign In1_27_1 = In1_27 & Logical_Operator3_out1;



  assign Logical_Operator_out1_27 = In1_27_1 | Logical_Operator1_out1;



  assign Out1_27 = Logical_Operator_out1_27;

  assign In1_28_1 = In1_28 & Logical_Operator3_out1;



  assign Logical_Operator_out1_28 = In1_28_1 | Logical_Operator1_out1;



  assign Out1_28 = Logical_Operator_out1_28;

  assign In1_29_1 = In1_29 & Logical_Operator3_out1;



  assign Logical_Operator_out1_29 = In1_29_1 | Logical_Operator1_out1;



  assign Out1_29 = Logical_Operator_out1_29;

  assign In1_30_1 = In1_30 & Logical_Operator3_out1;



  assign Logical_Operator_out1_30 = In1_30_1 | Logical_Operator1_out1;



  assign Out1_30 = Logical_Operator_out1_30;

  assign In1_31_1 = In1_31 & Logical_Operator3_out1;



  assign Logical_Operator_out1_31 = In1_31_1 | Logical_Operator1_out1;



  assign Out1_31 = Logical_Operator_out1_31;

endmodule  // MUX_block

