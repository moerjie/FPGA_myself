// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\rec_i2s\HDL_FIFO_L.v
// Created: 2023-10-27 19:54:39
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_FIFO_L
// Source Path: rec_i2s/REC_I2S/HDL_FIFO_L
// Hierarchy Level: 2
// Model version: 1.35
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_FIFO_L
          (clk,
           reset,
           enb,
           In,
           Push,
           Pop,
           rst,
           Out);


  input   clk;
  input   reset;
  input   enb;
  input   In;
  input   Push;
  input   Pop;
  input   rst;  // ufix1
  output  Out;


  reg [4:0] fifo_front_indx;  // ufix5
  reg [4:0] fifo_front_dir;  // ufix5
  reg [4:0] fifo_back_indx;  // ufix5
  reg [4:0] fifo_back_dir;  // ufix5
  reg [5:0] fifo_sample_count;  // ufix6
  wire [4:0] fifo_front_indx_next;  // ufix5
  wire [4:0] fifo_front_dir_next;  // ufix5
  wire [4:0] fifo_back_indx_next;  // ufix5
  wire [4:0] fifo_back_dir_next;  // ufix5
  wire [5:0] fifo_sample_count_next;  // ufix6
  wire fifo_out3;
  wire fifo_out4;
  wire fifo_write_enable;
  wire fifo_read_enable;
  wire [4:0] fifo_front_indx_temp;  // ufix5
  wire [4:0] fifo_back_indx_temp;  // ufix5
  wire [4:0] w_waddr;  // ufix5
  wire w_we;  // ufix1
  wire [4:0] w_raddr;  // ufix5
  wire Empty;  // ufix1
  wire Full;  // ufix1
  wire [5:0] Num;  // ufix6
  wire w_cz;
  wire w_const;  // ufix1
  wire rst_neg;  // ufix1
  wire rst_neg_1;  // ufix1
  wire w_mux1;  // ufix1
  reg  w_d1;  // ufix1
  wire w_waddr_1;
  wire w_const_0;
  wire w_out_1;
  wire w_out;
  reg  w_d2;


  // FIFO logic controller
  // us2: Upsample by 1, Sample offset 0 
  // us3: Upsample by 1, Sample offset 0 
  always @(posedge clk or posedge reset)
    begin : fifo_process
      if (reset == 1'b1) begin
        fifo_front_indx <= 5'b00000;
        fifo_front_dir <= 5'b00001;
        fifo_back_indx <= 5'b00000;
        fifo_back_dir <= 5'b00001;
        fifo_sample_count <= 6'b000000;
      end
      else begin
        if (enb) begin
          fifo_front_indx <= fifo_front_indx_next;
          fifo_front_dir <= fifo_front_dir_next;
          fifo_back_indx <= fifo_back_indx_next;
          fifo_back_dir <= fifo_back_dir_next;
          fifo_sample_count <= fifo_sample_count_next;
        end
      end
    end

  assign fifo_out4 = fifo_sample_count == 6'b100000;
  assign fifo_out3 = fifo_sample_count == 6'b000000;
  assign fifo_write_enable = Push && (Pop || ( ! fifo_out4));
  assign fifo_read_enable = Pop && ( ! fifo_out3);
  assign fifo_front_indx_temp = (rst != 1'b0 ? 5'b00000 :
              (fifo_read_enable ? fifo_front_indx + fifo_front_dir :
              fifo_front_indx));
  assign fifo_front_dir_next = (fifo_front_indx_temp == 5'b11111 ? 5'b00001 :
              5'b00001);
  assign fifo_back_indx_temp = (rst != 1'b0 ? 5'b00000 :
              (fifo_write_enable ? fifo_back_indx + fifo_back_dir :
              fifo_back_indx));
  assign fifo_back_dir_next = (fifo_back_indx_temp == 5'b11111 ? 5'b00001 :
              5'b00001);
  assign fifo_sample_count_next = (rst != 1'b0 ? 6'b000000 :
              (fifo_write_enable && ( ! fifo_read_enable) ? fifo_sample_count + 6'b000001 :
              (( ! fifo_write_enable) && fifo_read_enable ? fifo_sample_count + 6'b111111 :
              fifo_sample_count)));
  assign w_waddr = fifo_back_indx;
  assign w_we = fifo_write_enable;
  assign w_raddr = fifo_front_indx;
  assign Empty = fifo_out3;
  assign Full = fifo_out4;
  assign Num = fifo_sample_count;
  assign fifo_front_indx_next = fifo_front_indx_temp;
  assign fifo_back_indx_next = fifo_back_indx_temp;



  assign w_cz = Num > 6'b000000;



  assign w_const = 1'b0;



  assign rst_neg =  ~ rst;



  assign rst_neg_1 = rst_neg & Pop;



  assign w_mux1 = (w_cz == 1'b0 ? w_const :
              rst_neg_1);



  always @(posedge clk or posedge reset)
    begin : f_d1_process
      if (reset == 1'b1) begin
        w_d1 <= 1'b0;
      end
      else begin
        if (enb) begin
          w_d1 <= w_mux1;
        end
      end
    end



  // us1: Upsample by 1, Sample offset 0 
  SimpleDualPortRAM_singlebit #(.AddrWidth(5),
                                .DataWidth(1)
                                )
                              u_HDL_FIFO_L_ram_singlebit (.clk(clk),
                                                          .enb(enb),
                                                          .wr_din(In),
                                                          .wr_addr(w_waddr),
                                                          .wr_en(w_we),  // ufix1
                                                          .rd_addr(w_raddr),
                                                          .dout(w_waddr_1)
                                                          );

  assign w_const_0 = 1'b0;



  assign w_out_1 = (rst == 1'b0 ? w_waddr_1 :
              w_const_0);



  always @(posedge clk or posedge reset)
    begin : f_d2_process
      if (reset == 1'b1) begin
        w_d2 <= 1'b0;
      end
      else begin
        if (enb && w_d1) begin
          w_d2 <= w_out;
        end
      end
    end



  assign w_out = (w_d1 == 1'b0 ? w_d2 :
              w_out_1);



  assign Out = w_out;

endmodule  // HDL_FIFO_L

