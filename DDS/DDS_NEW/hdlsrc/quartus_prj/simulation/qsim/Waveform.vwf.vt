// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/18/2023 13:09:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    NCO_quartus
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module NCO_quartus_vlg_sample_tst(
	CLOCK_50,
	EN,
	RST,
	SW,
	sampler_tx
);
input  CLOCK_50;
input  EN;
input  RST;
input [9:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or EN or RST or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module NCO_quartus_vlg_check_tst (
	DAC_CLK_OUT,
	DAT_DAC,
	NCO_OUT,
	VLD_OUT,
	sampler_rx
);
input  DAC_CLK_OUT;
input [11:0] DAT_DAC;
input [7:0] NCO_OUT;
input  VLD_OUT;
input sampler_rx;

reg  DAC_CLK_OUT_expected;
reg [11:0] DAT_DAC_expected;
reg [7:0] NCO_OUT_expected;
reg  VLD_OUT_expected;

reg  DAC_CLK_OUT_prev;
reg [11:0] DAT_DAC_prev;
reg [7:0] NCO_OUT_prev;
reg  VLD_OUT_prev;

reg  DAC_CLK_OUT_expected_prev;
reg [11:0] DAT_DAC_expected_prev;
reg [7:0] NCO_OUT_expected_prev;
reg  VLD_OUT_expected_prev;

reg  last_DAC_CLK_OUT_exp;
reg [11:0] last_DAT_DAC_exp;
reg [7:0] last_NCO_OUT_exp;
reg  last_VLD_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	DAC_CLK_OUT_prev = DAC_CLK_OUT;
	DAT_DAC_prev = DAT_DAC;
	NCO_OUT_prev = NCO_OUT;
	VLD_OUT_prev = VLD_OUT;
end

// update expected /o prevs

always @(trigger)
begin
	DAC_CLK_OUT_expected_prev = DAC_CLK_OUT_expected;
	DAT_DAC_expected_prev = DAT_DAC_expected;
	NCO_OUT_expected_prev = NCO_OUT_expected;
	VLD_OUT_expected_prev = VLD_OUT_expected;
end



// expected DAC_CLK_OUT
initial
begin
	DAC_CLK_OUT_expected = 1'bX;
end 

// expected VLD_OUT
initial
begin
	VLD_OUT_expected = 1'bX;
	VLD_OUT_expected = #999000 1'b0;
end 
// expected DAT_DAC[ 11 ]
initial
begin
	DAT_DAC_expected[11] = 1'bX;
end 
// expected DAT_DAC[ 10 ]
initial
begin
	DAT_DAC_expected[10] = 1'bX;
end 
// expected DAT_DAC[ 9 ]
initial
begin
	DAT_DAC_expected[9] = 1'bX;
end 
// expected DAT_DAC[ 8 ]
initial
begin
	DAT_DAC_expected[8] = 1'bX;
end 
// expected DAT_DAC[ 7 ]
initial
begin
	DAT_DAC_expected[7] = 1'bX;
end 
// expected DAT_DAC[ 6 ]
initial
begin
	DAT_DAC_expected[6] = 1'bX;
end 
// expected DAT_DAC[ 5 ]
initial
begin
	DAT_DAC_expected[5] = 1'bX;
end 
// expected DAT_DAC[ 4 ]
initial
begin
	DAT_DAC_expected[4] = 1'bX;
end 
// expected DAT_DAC[ 3 ]
initial
begin
	DAT_DAC_expected[3] = 1'bX;
end 
// expected DAT_DAC[ 2 ]
initial
begin
	DAT_DAC_expected[2] = 1'bX;
end 
// expected DAT_DAC[ 1 ]
initial
begin
	DAT_DAC_expected[1] = 1'bX;
end 
// expected DAT_DAC[ 0 ]
initial
begin
	DAT_DAC_expected[0] = 1'bX;
end 
// expected NCO_OUT[ 7 ]
initial
begin
	NCO_OUT_expected[7] = 1'bX;
end 
// expected NCO_OUT[ 6 ]
initial
begin
	NCO_OUT_expected[6] = 1'bX;
end 
// expected NCO_OUT[ 5 ]
initial
begin
	NCO_OUT_expected[5] = 1'bX;
end 
// expected NCO_OUT[ 4 ]
initial
begin
	NCO_OUT_expected[4] = 1'bX;
end 
// expected NCO_OUT[ 3 ]
initial
begin
	NCO_OUT_expected[3] = 1'bX;
end 
// expected NCO_OUT[ 2 ]
initial
begin
	NCO_OUT_expected[2] = 1'bX;
end 
// expected NCO_OUT[ 1 ]
initial
begin
	NCO_OUT_expected[1] = 1'bX;
end 
// expected NCO_OUT[ 0 ]
initial
begin
	NCO_OUT_expected[0] = 1'bX;
end 
// generate trigger
always @(DAC_CLK_OUT_expected or DAC_CLK_OUT or DAT_DAC_expected or DAT_DAC or NCO_OUT_expected or NCO_OUT or VLD_OUT_expected or VLD_OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DAC_CLK_OUT = %b | expected DAT_DAC = %b | expected NCO_OUT = %b | expected VLD_OUT = %b | ",DAC_CLK_OUT_expected_prev,DAT_DAC_expected_prev,NCO_OUT_expected_prev,VLD_OUT_expected_prev);
	$display("| real DAC_CLK_OUT = %b | real DAT_DAC = %b | real NCO_OUT = %b | real VLD_OUT = %b | ",DAC_CLK_OUT_prev,DAT_DAC_prev,NCO_OUT_prev,VLD_OUT_prev);
`endif
	if (
		( DAC_CLK_OUT_expected_prev !== 1'bx ) && ( DAC_CLK_OUT_prev !== DAC_CLK_OUT_expected_prev )
		&& ((DAC_CLK_OUT_expected_prev !== last_DAC_CLK_OUT_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAC_CLK_OUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAC_CLK_OUT_expected_prev);
		$display ("     Real value = %b", DAC_CLK_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DAC_CLK_OUT_exp = DAC_CLK_OUT_expected_prev;
	end
	if (
		( DAT_DAC_expected_prev[0] !== 1'bx ) && ( DAT_DAC_prev[0] !== DAT_DAC_expected_prev[0] )
		&& ((DAT_DAC_expected_prev[0] !== last_DAT_DAC_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[0] = DAT_DAC_expected_prev[0];
	end
	if (
		( DAT_DAC_expected_prev[1] !== 1'bx ) && ( DAT_DAC_prev[1] !== DAT_DAC_expected_prev[1] )
		&& ((DAT_DAC_expected_prev[1] !== last_DAT_DAC_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[1] = DAT_DAC_expected_prev[1];
	end
	if (
		( DAT_DAC_expected_prev[2] !== 1'bx ) && ( DAT_DAC_prev[2] !== DAT_DAC_expected_prev[2] )
		&& ((DAT_DAC_expected_prev[2] !== last_DAT_DAC_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[2] = DAT_DAC_expected_prev[2];
	end
	if (
		( DAT_DAC_expected_prev[3] !== 1'bx ) && ( DAT_DAC_prev[3] !== DAT_DAC_expected_prev[3] )
		&& ((DAT_DAC_expected_prev[3] !== last_DAT_DAC_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[3] = DAT_DAC_expected_prev[3];
	end
	if (
		( DAT_DAC_expected_prev[4] !== 1'bx ) && ( DAT_DAC_prev[4] !== DAT_DAC_expected_prev[4] )
		&& ((DAT_DAC_expected_prev[4] !== last_DAT_DAC_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[4] = DAT_DAC_expected_prev[4];
	end
	if (
		( DAT_DAC_expected_prev[5] !== 1'bx ) && ( DAT_DAC_prev[5] !== DAT_DAC_expected_prev[5] )
		&& ((DAT_DAC_expected_prev[5] !== last_DAT_DAC_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[5] = DAT_DAC_expected_prev[5];
	end
	if (
		( DAT_DAC_expected_prev[6] !== 1'bx ) && ( DAT_DAC_prev[6] !== DAT_DAC_expected_prev[6] )
		&& ((DAT_DAC_expected_prev[6] !== last_DAT_DAC_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[6] = DAT_DAC_expected_prev[6];
	end
	if (
		( DAT_DAC_expected_prev[7] !== 1'bx ) && ( DAT_DAC_prev[7] !== DAT_DAC_expected_prev[7] )
		&& ((DAT_DAC_expected_prev[7] !== last_DAT_DAC_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[7] = DAT_DAC_expected_prev[7];
	end
	if (
		( DAT_DAC_expected_prev[8] !== 1'bx ) && ( DAT_DAC_prev[8] !== DAT_DAC_expected_prev[8] )
		&& ((DAT_DAC_expected_prev[8] !== last_DAT_DAC_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[8] = DAT_DAC_expected_prev[8];
	end
	if (
		( DAT_DAC_expected_prev[9] !== 1'bx ) && ( DAT_DAC_prev[9] !== DAT_DAC_expected_prev[9] )
		&& ((DAT_DAC_expected_prev[9] !== last_DAT_DAC_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[9] = DAT_DAC_expected_prev[9];
	end
	if (
		( DAT_DAC_expected_prev[10] !== 1'bx ) && ( DAT_DAC_prev[10] !== DAT_DAC_expected_prev[10] )
		&& ((DAT_DAC_expected_prev[10] !== last_DAT_DAC_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[10] = DAT_DAC_expected_prev[10];
	end
	if (
		( DAT_DAC_expected_prev[11] !== 1'bx ) && ( DAT_DAC_prev[11] !== DAT_DAC_expected_prev[11] )
		&& ((DAT_DAC_expected_prev[11] !== last_DAT_DAC_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_DAC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_DAC_expected_prev);
		$display ("     Real value = %b", DAT_DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_DAC_exp[11] = DAT_DAC_expected_prev[11];
	end
	if (
		( NCO_OUT_expected_prev[0] !== 1'bx ) && ( NCO_OUT_prev[0] !== NCO_OUT_expected_prev[0] )
		&& ((NCO_OUT_expected_prev[0] !== last_NCO_OUT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NCO_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NCO_OUT_expected_prev);
		$display ("     Real value = %b", NCO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NCO_OUT_exp[0] = NCO_OUT_expected_prev[0];
	end
	if (
		( NCO_OUT_expected_prev[1] !== 1'bx ) && ( NCO_OUT_prev[1] !== NCO_OUT_expected_prev[1] )
		&& ((NCO_OUT_expected_prev[1] !== last_NCO_OUT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NCO_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NCO_OUT_expected_prev);
		$display ("     Real value = %b", NCO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NCO_OUT_exp[1] = NCO_OUT_expected_prev[1];
	end
	if (
		( NCO_OUT_expected_prev[2] !== 1'bx ) && ( NCO_OUT_prev[2] !== NCO_OUT_expected_prev[2] )
		&& ((NCO_OUT_expected_prev[2] !== last_NCO_OUT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NCO_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NCO_OUT_expected_prev);
		$display ("     Real value = %b", NCO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NCO_OUT_exp[2] = NCO_OUT_expected_prev[2];
	end
	if (
		( NCO_OUT_expected_prev[3] !== 1'bx ) && ( NCO_OUT_prev[3] !== NCO_OUT_expected_prev[3] )
		&& ((NCO_OUT_expected_prev[3] !== last_NCO_OUT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NCO_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NCO_OUT_expected_prev);
		$display ("     Real value = %b", NCO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NCO_OUT_exp[3] = NCO_OUT_expected_prev[3];
	end
	if (
		( NCO_OUT_expected_prev[4] !== 1'bx ) && ( NCO_OUT_prev[4] !== NCO_OUT_expected_prev[4] )
		&& ((NCO_OUT_expected_prev[4] !== last_NCO_OUT_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NCO_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NCO_OUT_expected_prev);
		$display ("     Real value = %b", NCO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NCO_OUT_exp[4] = NCO_OUT_expected_prev[4];
	end
	if (
		( NCO_OUT_expected_prev[5] !== 1'bx ) && ( NCO_OUT_prev[5] !== NCO_OUT_expected_prev[5] )
		&& ((NCO_OUT_expected_prev[5] !== last_NCO_OUT_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NCO_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NCO_OUT_expected_prev);
		$display ("     Real value = %b", NCO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NCO_OUT_exp[5] = NCO_OUT_expected_prev[5];
	end
	if (
		( NCO_OUT_expected_prev[6] !== 1'bx ) && ( NCO_OUT_prev[6] !== NCO_OUT_expected_prev[6] )
		&& ((NCO_OUT_expected_prev[6] !== last_NCO_OUT_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NCO_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NCO_OUT_expected_prev);
		$display ("     Real value = %b", NCO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NCO_OUT_exp[6] = NCO_OUT_expected_prev[6];
	end
	if (
		( NCO_OUT_expected_prev[7] !== 1'bx ) && ( NCO_OUT_prev[7] !== NCO_OUT_expected_prev[7] )
		&& ((NCO_OUT_expected_prev[7] !== last_NCO_OUT_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NCO_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NCO_OUT_expected_prev);
		$display ("     Real value = %b", NCO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NCO_OUT_exp[7] = NCO_OUT_expected_prev[7];
	end
	if (
		( VLD_OUT_expected_prev !== 1'bx ) && ( VLD_OUT_prev !== VLD_OUT_expected_prev )
		&& ((VLD_OUT_expected_prev !== last_VLD_OUT_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VLD_OUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VLD_OUT_expected_prev);
		$display ("     Real value = %b", VLD_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VLD_OUT_exp = VLD_OUT_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module NCO_quartus_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg EN;
reg RST;
reg [9:0] SW;
// wires                                               
wire DAC_CLK_OUT;
wire [11:0] DAT_DAC;
wire [7:0] NCO_OUT;
wire VLD_OUT;

wire sampler;                             

// assign statements (if any)                          
NCO_quartus i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.DAC_CLK_OUT(DAC_CLK_OUT),
	.DAT_DAC(DAT_DAC),
	.EN(EN),
	.NCO_OUT(NCO_OUT),
	.RST(RST),
	.SW(SW),
	.VLD_OUT(VLD_OUT)
);

// EN
initial
begin
	EN = 1'b1;
end 

// RST
initial
begin
	RST = 1'b0;
end 

NCO_quartus_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.EN(EN),
	.RST(RST),
	.SW(SW),
	.sampler_tx(sampler)
);

NCO_quartus_vlg_check_tst tb_out(
	.DAC_CLK_OUT(DAC_CLK_OUT),
	.DAT_DAC(DAT_DAC),
	.NCO_OUT(NCO_OUT),
	.VLD_OUT(VLD_OUT),
	.sampler_rx(sampler)
);
endmodule

