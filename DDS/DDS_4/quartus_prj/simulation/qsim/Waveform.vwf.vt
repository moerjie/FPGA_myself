// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/18/2023 13:23:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    NCO_quartus
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module NCO_quartus_vlg_sample_tst(
	CLOCK_50,
	EN,
	INC,
	RST,
	sampler_tx
);
input  CLOCK_50;
input  EN;
input [15:0] INC;
input  RST;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or EN or INC or RST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module NCO_quartus_vlg_check_tst (
	CE,
	DAT_OUT,
	NCO_EN,
	sampler_rx
);
input  CE;
input [7:0] DAT_OUT;
input  NCO_EN;
input sampler_rx;

reg  CE_expected;
reg [7:0] DAT_OUT_expected;
reg  NCO_EN_expected;

reg  CE_prev;
reg [7:0] DAT_OUT_prev;
reg  NCO_EN_prev;

reg  CE_expected_prev;
reg [7:0] DAT_OUT_expected_prev;
reg  NCO_EN_expected_prev;

reg  last_CE_exp;
reg [7:0] last_DAT_OUT_exp;
reg  last_NCO_EN_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	CE_prev = CE;
	DAT_OUT_prev = DAT_OUT;
	NCO_EN_prev = NCO_EN;
end

// update expected /o prevs

always @(trigger)
begin
	CE_expected_prev = CE_expected;
	DAT_OUT_expected_prev = DAT_OUT_expected;
	NCO_EN_expected_prev = NCO_EN_expected;
end


// expected DAT_OUT[ 7 ]
initial
begin
	DAT_OUT_expected[7] = 1'bX;
	DAT_OUT_expected[7] = #999000 1'b0;
end 
// expected DAT_OUT[ 6 ]
initial
begin
	DAT_OUT_expected[6] = 1'bX;
	DAT_OUT_expected[6] = #999000 1'b0;
end 
// expected DAT_OUT[ 5 ]
initial
begin
	DAT_OUT_expected[5] = 1'bX;
	DAT_OUT_expected[5] = #999000 1'b0;
end 
// expected DAT_OUT[ 4 ]
initial
begin
	DAT_OUT_expected[4] = 1'bX;
	DAT_OUT_expected[4] = #999000 1'b0;
end 
// expected DAT_OUT[ 3 ]
initial
begin
	DAT_OUT_expected[3] = 1'bX;
	DAT_OUT_expected[3] = #999000 1'b0;
end 
// expected DAT_OUT[ 2 ]
initial
begin
	DAT_OUT_expected[2] = 1'bX;
	DAT_OUT_expected[2] = #999000 1'b0;
end 
// expected DAT_OUT[ 1 ]
initial
begin
	DAT_OUT_expected[1] = 1'bX;
	DAT_OUT_expected[1] = #999000 1'b0;
end 
// expected DAT_OUT[ 0 ]
initial
begin
	DAT_OUT_expected[0] = 1'bX;
	DAT_OUT_expected[0] = #999000 1'b0;
end 

// expected NCO_EN
initial
begin
	NCO_EN_expected = 1'bX;
	NCO_EN_expected = #999000 1'b0;
end 

// expected CE
initial
begin
	CE_expected = 1'bX;
	CE_expected = #999000 1'b0;
end 
// generate trigger
always @(CE_expected or CE or DAT_OUT_expected or DAT_OUT or NCO_EN_expected or NCO_EN)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CE = %b | expected DAT_OUT = %b | expected NCO_EN = %b | ",CE_expected_prev,DAT_OUT_expected_prev,NCO_EN_expected_prev);
	$display("| real CE = %b | real DAT_OUT = %b | real NCO_EN = %b | ",CE_prev,DAT_OUT_prev,NCO_EN_prev);
`endif
	if (
		( CE_expected_prev !== 1'bx ) && ( CE_prev !== CE_expected_prev )
		&& ((CE_expected_prev !== last_CE_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE_expected_prev);
		$display ("     Real value = %b", CE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CE_exp = CE_expected_prev;
	end
	if (
		( DAT_OUT_expected_prev[0] !== 1'bx ) && ( DAT_OUT_prev[0] !== DAT_OUT_expected_prev[0] )
		&& ((DAT_OUT_expected_prev[0] !== last_DAT_OUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_OUT_expected_prev);
		$display ("     Real value = %b", DAT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_OUT_exp[0] = DAT_OUT_expected_prev[0];
	end
	if (
		( DAT_OUT_expected_prev[1] !== 1'bx ) && ( DAT_OUT_prev[1] !== DAT_OUT_expected_prev[1] )
		&& ((DAT_OUT_expected_prev[1] !== last_DAT_OUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_OUT_expected_prev);
		$display ("     Real value = %b", DAT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_OUT_exp[1] = DAT_OUT_expected_prev[1];
	end
	if (
		( DAT_OUT_expected_prev[2] !== 1'bx ) && ( DAT_OUT_prev[2] !== DAT_OUT_expected_prev[2] )
		&& ((DAT_OUT_expected_prev[2] !== last_DAT_OUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_OUT_expected_prev);
		$display ("     Real value = %b", DAT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_OUT_exp[2] = DAT_OUT_expected_prev[2];
	end
	if (
		( DAT_OUT_expected_prev[3] !== 1'bx ) && ( DAT_OUT_prev[3] !== DAT_OUT_expected_prev[3] )
		&& ((DAT_OUT_expected_prev[3] !== last_DAT_OUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_OUT_expected_prev);
		$display ("     Real value = %b", DAT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_OUT_exp[3] = DAT_OUT_expected_prev[3];
	end
	if (
		( DAT_OUT_expected_prev[4] !== 1'bx ) && ( DAT_OUT_prev[4] !== DAT_OUT_expected_prev[4] )
		&& ((DAT_OUT_expected_prev[4] !== last_DAT_OUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_OUT_expected_prev);
		$display ("     Real value = %b", DAT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_OUT_exp[4] = DAT_OUT_expected_prev[4];
	end
	if (
		( DAT_OUT_expected_prev[5] !== 1'bx ) && ( DAT_OUT_prev[5] !== DAT_OUT_expected_prev[5] )
		&& ((DAT_OUT_expected_prev[5] !== last_DAT_OUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_OUT_expected_prev);
		$display ("     Real value = %b", DAT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_OUT_exp[5] = DAT_OUT_expected_prev[5];
	end
	if (
		( DAT_OUT_expected_prev[6] !== 1'bx ) && ( DAT_OUT_prev[6] !== DAT_OUT_expected_prev[6] )
		&& ((DAT_OUT_expected_prev[6] !== last_DAT_OUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_OUT_expected_prev);
		$display ("     Real value = %b", DAT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_OUT_exp[6] = DAT_OUT_expected_prev[6];
	end
	if (
		( DAT_OUT_expected_prev[7] !== 1'bx ) && ( DAT_OUT_prev[7] !== DAT_OUT_expected_prev[7] )
		&& ((DAT_OUT_expected_prev[7] !== last_DAT_OUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAT_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAT_OUT_expected_prev);
		$display ("     Real value = %b", DAT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DAT_OUT_exp[7] = DAT_OUT_expected_prev[7];
	end
	if (
		( NCO_EN_expected_prev !== 1'bx ) && ( NCO_EN_prev !== NCO_EN_expected_prev )
		&& ((NCO_EN_expected_prev !== last_NCO_EN_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NCO_EN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NCO_EN_expected_prev);
		$display ("     Real value = %b", NCO_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NCO_EN_exp = NCO_EN_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module NCO_quartus_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg EN;
reg [15:0] INC;
reg RST;
// wires                                               
wire CE;
wire [7:0] DAT_OUT;
wire NCO_EN;

wire sampler;                             

// assign statements (if any)                          
NCO_quartus i1 (
// port map - connection between master ports and signals/registers   
	.CE(CE),
	.CLOCK_50(CLOCK_50),
	.DAT_OUT(DAT_OUT),
	.EN(EN),
	.INC(INC),
	.NCO_EN(NCO_EN),
	.RST(RST)
);

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #10000 1'b1;
	#10000;
end 

// RST
initial
begin
	RST = 1'b0;
end 

// EN
initial
begin
	EN = 1'b1;
end 
// INC[ 15 ]
initial
begin
	INC[15] = 1'b0;
end 
// INC[ 14 ]
initial
begin
	INC[14] = 1'b0;
end 
// INC[ 13 ]
initial
begin
	INC[13] = 1'b0;
end 
// INC[ 12 ]
initial
begin
	INC[12] = 1'b0;
end 
// INC[ 11 ]
initial
begin
	INC[11] = 1'b0;
end 
// INC[ 10 ]
initial
begin
	INC[10] = 1'b0;
end 
// INC[ 9 ]
initial
begin
	INC[9] = 1'b0;
end 
// INC[ 8 ]
initial
begin
	INC[8] = 1'b1;
end 
// INC[ 7 ]
initial
begin
	INC[7] = 1'b1;
end 
// INC[ 6 ]
initial
begin
	INC[6] = 1'b1;
end 
// INC[ 5 ]
initial
begin
	INC[5] = 1'b1;
end 
// INC[ 4 ]
initial
begin
	INC[4] = 1'b1;
end 
// INC[ 3 ]
initial
begin
	INC[3] = 1'b1;
end 
// INC[ 2 ]
initial
begin
	INC[2] = 1'b1;
end 
// INC[ 1 ]
initial
begin
	INC[1] = 1'b1;
end 
// INC[ 0 ]
initial
begin
	INC[0] = 1'b1;
end 

NCO_quartus_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.EN(EN),
	.INC(INC),
	.RST(RST),
	.sampler_tx(sampler)
);

NCO_quartus_vlg_check_tst tb_out(
	.CE(CE),
	.DAT_OUT(DAT_OUT),
	.NCO_EN(NCO_EN),
	.sampler_rx(sampler)
);
endmodule

