// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/21/2023 18:05:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    counter12
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module counter12_vlg_sample_tst(
	CLK,
	CLR_EN,
	sampler_tx
);
input  CLK;
input  CLR_EN;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLR_EN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module counter12_vlg_check_tst (
	D0,
	D1,
	D2,
	D3,
	OV,
	OV_16,
	sampler_rx
);
input  D0;
input  D1;
input  D2;
input  D3;
input  OV;
input  OV_16;
input sampler_rx;

reg  D0_expected;
reg  D1_expected;
reg  D2_expected;
reg  D3_expected;
reg  OV_expected;
reg  OV_16_expected;

reg  D0_prev;
reg  D1_prev;
reg  D2_prev;
reg  D3_prev;
reg  OV_prev;
reg  OV_16_prev;

reg  D0_expected_prev;
reg  D1_expected_prev;
reg  D2_expected_prev;
reg  D3_expected_prev;
reg  OV_expected_prev;

reg  last_D0_exp;
reg  last_D1_exp;
reg  last_D2_exp;
reg  last_D3_exp;
reg  last_OV_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	D0_prev = D0;
	D1_prev = D1;
	D2_prev = D2;
	D3_prev = D3;
	OV_prev = OV;
	OV_16_prev = OV_16;
end

// update expected /o prevs

always @(trigger)
begin
	D0_expected_prev = D0_expected;
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	D3_expected_prev = D3_expected;
	OV_expected_prev = OV_expected;
end



// expected D3
initial
begin
	D3_expected = 1'bX;
end 

// expected D2
initial
begin
	D2_expected = 1'bX;
end 

// expected D1
initial
begin
	D1_expected = 1'bX;
end 

// expected D0
initial
begin
	D0_expected = 1'bX;
end 

// expected OV
initial
begin
	OV_expected = 1'bX;
end 
// generate trigger
always @(D0_expected or D0 or D1_expected or D1 or D2_expected or D2 or D3_expected or D3 or OV_expected or OV or OV_16_expected or OV_16)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D0 = %b | expected D1 = %b | expected D2 = %b | expected D3 = %b | expected OV = %b | expected OV_16 = %b | ",D0_expected_prev,D1_expected_prev,D2_expected_prev,D3_expected_prev,OV_expected_prev,OV_16_expected_prev);
	$display("| real D0 = %b | real D1 = %b | real D2 = %b | real D3 = %b | real OV = %b | real OV_16 = %b | ",D0_prev,D1_prev,D2_prev,D3_prev,OV_prev,OV_16_prev);
`endif
	if (
		( D0_expected_prev !== 1'bx ) && ( D0_prev !== D0_expected_prev )
		&& ((D0_expected_prev !== last_D0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D0_expected_prev);
		$display ("     Real value = %b", D0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D0_exp = D0_expected_prev;
	end
	if (
		( D1_expected_prev !== 1'bx ) && ( D1_prev !== D1_expected_prev )
		&& ((D1_expected_prev !== last_D1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D1_exp = D1_expected_prev;
	end
	if (
		( D2_expected_prev !== 1'bx ) && ( D2_prev !== D2_expected_prev )
		&& ((D2_expected_prev !== last_D2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D2_exp = D2_expected_prev;
	end
	if (
		( D3_expected_prev !== 1'bx ) && ( D3_prev !== D3_expected_prev )
		&& ((D3_expected_prev !== last_D3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D3_exp = D3_expected_prev;
	end
	if (
		( OV_expected_prev !== 1'bx ) && ( OV_prev !== OV_expected_prev )
		&& ((OV_expected_prev !== last_OV_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OV_expected_prev);
		$display ("     Real value = %b", OV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OV_exp = OV_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module counter12_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR_EN;
// wires                                               
wire D0;
wire D1;
wire D2;
wire D3;
wire OV;
wire OV_16;

wire sampler;                             

// assign statements (if any)                          
counter12 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR_EN(CLR_EN),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.OV(OV),
	.OV_16(OV_16)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// CLR_EN
initial
begin
	CLR_EN = 1'b1;
end 

counter12_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLR_EN(CLR_EN),
	.sampler_tx(sampler)
);

counter12_vlg_check_tst tb_out(
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.OV(OV),
	.OV_16(OV_16),
	.sampler_rx(sampler)
);
endmodule

